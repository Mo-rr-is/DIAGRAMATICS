{"version":3,"file":"diagramatics.min.js","sources":["../src/vector.ts","../src/BBcode.ts","../src/tag_names.ts","../src/diagram.ts","../src/utils.ts","../src/color_palette.ts","../src/unicode_utils.ts","../src/draw_svg.ts","../src/shapes.ts","../src/shapes/shapes_geometry.ts","../src/alignment.ts","../src/html_interactivity.ts","../src/modifier.ts","../src/shapes/shapes_graph.ts","../src/shapes/shapes_annotation.ts","../src/shapes/shapes_mechanics.ts","../src/shapes/shapes_bar.ts","../src/shapes/shapes_table.ts","../src/shapes/shapes_numberline.ts","../src/shapes/shapes_boxplot.ts","../src/geo_construct/geo_construct.ts","../src/shapes/utils_tree.ts","../src/shapes/shapes_tree.ts","../src/shapes/shapes_curves.ts","../src/encoding.ts"],"sourcesContent":["/**\n *  Class for 2D Vectors \n*/\nexport class Vector2 {\n    constructor(public x: number, public y: number) { }\n    add(v: Vector2) : Vector2 {\n        return new Vector2(this.x + v.x, this.y + v.y);\n    }\n    sub(v: Vector2) : Vector2 {\n        return new Vector2(this.x - v.x, this.y - v.y);\n    }\n    scale(s: number) : Vector2 {\n        return new Vector2(this.x * s, this.y * s);\n    }\n    mul(v: Vector2) : Vector2 {\n        return new Vector2(this.x * v.x, this.y * v.y);\n    }\n    rotate(angle: number) : Vector2 {\n        let x = this.x * Math.cos(angle) - this.y * Math.sin(angle);\n        let y = this.x * Math.sin(angle) + this.y * Math.cos(angle);\n        return new Vector2(x, y);\n    }\n    dot(v: Vector2) : number {\n        return this.x * v.x + this.y * v.y;\n    }\n    cross(v: Vector2) : number {\n        return this.x * v.y - this.y * v.x;\n    }\n    equals(v: Vector2) : boolean {\n        return this.x == v.x && this.y == v.y;\n    }\n    length() : number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n    length_sq() : number {\n        return this.x * this.x + this.y * this.y;\n    }\n    angle() : number {\n        return Math.atan2(this.y, this.x);\n    }\n    normalize() : Vector2 {\n        let len = this.length();\n        return new Vector2(this.x / len, this.y / len);\n    }\n    copy() : Vector2 {\n        return new Vector2(this.x, this.y);\n    }\n    apply(f : (v : Vector2) => Vector2) : Vector2 {\n        return f(this.copy());\n    }\n}\n\n/**\n * Helper function to create a Vector2\n */\nexport function V2(x : number, y : number) : Vector2 {\n    return new Vector2(x, y);\n}\n\n/**\n * Helper function to create a Vector2 from an angle\n * @param angle angle in radians\n * @returns Vector2 with length 1\n */\nexport function Vdir(angle : number) : Vector2 {\n    return new Vector2(Math.cos(angle), Math.sin(angle));\n}\n\n\n// transformation functions\ntype TransformFunc = (p : Vector2) => Vector2;\nexport class Transform {\n    static translate(v : Vector2) : TransformFunc {\n        return (p : Vector2) => p.add(v);\n    }\n    static rotate(angle : number, pivot : Vector2) : TransformFunc {\n        return (p : Vector2) => p.sub(pivot).rotate(angle).add(pivot);\n    }\n    static scale(scale : Vector2, origin : Vector2) : TransformFunc {\n        return (p : Vector2) => p.sub(origin).mul(scale).add(origin);\n    }\n    static reflect_over_point(q : Vector2) : TransformFunc {\n        return (p : Vector2) => p.sub(q).rotate(Math.PI).add(q);\n    }\n    static reflect_over_line(p1 : Vector2, p2 : Vector2) : TransformFunc {\n        let v = p2.sub(p1);\n        let n = v.rotate(Math.PI / 2).normalize();\n        return (p : Vector2) => {\n            let d = n.dot(p.sub(p1));\n            return p.sub(n.scale(2*d));\n        }   \n    }\n    static skewX(angle : number, ybase : number) : TransformFunc {\n        return (p : Vector2) => {\n            let x = p.x + (ybase - p.y) * Math.tan(angle);\n            return new Vector2(x, p.y);\n        }\n    }\n    static skewY(angle : number, xbase : number) : TransformFunc {\n        return (p : Vector2) => {\n            let y = p.y + (xbase - p.x) * Math.tan(angle);\n            return new Vector2(p.x, y);\n        }\n    }\n};\n","// BBCode parser for multiline text object\n//\n\nenum BB_TokenType {\n    TEXT      = \"TEXT\",\n    OPEN_TAG  = \"OPEN_TAG\",\n    CLOSE_TAG = \"CLOSE_TAG\",\n    EOF       = \"EOF\",\n}\ntype BB_Token = {\n    type       : BB_TokenType,\n    attributes : { [key: string]: string }\n}\n\nexport class BB_Lexer {\n    static parse_tag_content(str : string) : BB_Token {\n        if (str[0] === \"/\") {\n        // close tag\n            let name = str.substring(1);\n            return {\n                type: BB_TokenType.CLOSE_TAG,\n                attributes: {_tag_name : name}\n            }\n        }\n\n        // open tag\n        let space_id = str.indexOf(\" \");\n        let equal_id = str.indexOf(\"=\");\n        if (space_id === -1 && equal_id === -1) {\n        // [name]\n            return {\n                type: BB_TokenType.OPEN_TAG,\n                attributes: {_tag_name : str}\n            }\n        }\n        if (space_id === -1 && equal_id > 0) {\n        // [name=value]\n            let name = str.substring(0, equal_id);\n            let value = str.substring(equal_id + 1);\n            let attributes : any = {_tag_name : name}\n            attributes[name] = value;\n            return {\n                type: BB_TokenType.OPEN_TAG,\n                attributes\n            }\n        }\n        // [name attr1=value1 attr2=value2]\n        throw new Error(\"Unimplemented\");\n    }\n\n    static parse(text : string) : BB_Token[] | null {\n        let tokens : BB_Token[] = [];\n\n        let pos = 0;\n        let len = text.length;\n        while (pos < len) {\n            // Find the next tag\n            // Find [\n            let TagLeft = text.indexOf(\"[\", pos);\n            if (TagLeft === -1) {\n            // no more tags, add the rest of the text\n                tokens.push({ \n                    type: BB_TokenType.TEXT, \n                    attributes: {_text : text.substring(pos)} \n                });\n                break;\n            }\n            if (TagLeft > pos) {\n            // add the text before the [\n                tokens.push({ \n                    type: BB_TokenType.TEXT, \n                    attributes: {_text : text.substring(pos, TagLeft)} \n                });\n            }\n\n            // find ]\n            let TagRight = text.indexOf(\"]\", TagLeft);\n            let nextTagLeft  = text.indexOf(\"[\", TagLeft + 1);\n            // make sure there is no [ between the [ and ]\n            if (nextTagLeft > 0 && nextTagLeft < TagRight) return null;\n            // make sure there is a ] after the [\n            if (TagRight === -1) return null;\n\n            let tag_content = text.substring(TagLeft + 1, TagRight);\n            tokens.push(BB_Lexer.parse_tag_content(tag_content));\n\n            pos = TagRight + 1;\n        }\n        return tokens;\n    }\n}\n\nexport class BB_multiline {\n    static from_BBCode(text : string, linespace : string = \"1em\") {\n        let tspans : {text : string, style : {}}[]  = []\n        let tag_stack : { [key: string]: string }[] = [];\n        let tokens = BB_Lexer.parse(text);\n        if (tokens === null) {\n            console.error(\"Invalid BBCode\");\n            return;\n        }\n        for (let token of tokens) {\n            switch (token.type) {\n                case BB_TokenType.OPEN_TAG: {\n                    // if the token is [br] then add a new line\n                    if (token.attributes['_tag_name'] === \"br\") {\n                        tspans.push({text: \"\\n\", style: {dy: linespace}});\n                        break;\n                    }\n                    tag_stack.push(token.attributes);\n                } break;\n                case BB_TokenType.CLOSE_TAG: {\n                    if (tag_stack.length === 0) {\n                        console.error(\"Invalid BBCode\");\n                        return;\n                    }\n                    let tag_top = tag_stack[tag_stack.length - 1];\n                    if (tag_top['_tag_name'] !== token.attributes['_tag_name']) {\n                        console.error(\"Invalid BBCode\");\n                        return;\n                    }\n                    tag_stack.pop();\n                } break;\n                case BB_TokenType.TEXT: {\n                    let style = BB_multiline.build_style(tag_stack);\n                    tspans.push({text: token.attributes['_text'], style});\n                } break;\n            }\n        }\n\n        return tspans;\n    }\n\n    static build_style(tag_stack : { [key: string]: string }[]) {\n        let style : any = {};\n        for (let tag of tag_stack) {\n            switch (tag['_tag_name']) {\n                case \"b\"     : style[\"font-weight\"] = \"bold\"; break;\n                case \"i\"     : style[\"font-style\"] = \"italic\"; break;\n                case \"color\" : style[\"fill\"] = tag[\"color\"]; break;\n                case \"size\"  : style[\"font-size\"] = tag[\"size\"]; break;\n                case \"dx\"    : style[\"dx\"] = tag[\"dx\"]; break;\n                case \"dy\"    : style[\"dy\"] = tag[\"dy\"]; break;\n                case \"font\"  : style[\"font-family\"] = tag[\"font\"]; break;\n                case \"var\"   : style[\"textvar\"] = true; break;\n                case \"tag\"   : style[\"tag\"] = tag[\"tag\"]; break;\n            }\n        }\n        return style;\n    }\n}\n\n","/*\n* For objects that contain children, having a tag is useful so that the children can be easily accessed.\n*/\n\nexport enum TAG {\n    LINE = \"line\",\n    CIRCLE = \"circle\",\n    TEXTVAR = \"textvar\",\n    \n    // prefix\n    ROW_ = \"row_\",\n    COL_ = \"col_\",\n    \n    // arrow\n    ARROW_LINE = \"arrow_line\",\n    ARROW_HEAD = \"arrow_head\",\n    \n    // table\n    TABLE = \"table\",\n    CONTAIN_TABLE = \"contain_table\",\n    TABLE_CELL = \"table_cell\",\n    TABLE_CONTENT = \"table_content\",\n    \n    //graph\n    GRAPH_AXIS = \"graph_axis_line\",\n    GRAPH_TICK = \"graph_tick\",\n    GRAPH_TICK_LABEL = \"graph_tick_label\",\n    GRAPH_GRID = \"graph_grid\",\n}\n","import { Vector2, V2, Transform } from './vector.js';\nimport { BB_multiline } from './BBcode.js'\nimport { TAG } from './tag_names.js'\n\nfunction assert(condition : boolean, message : string) : void {\n    if (!condition) {\n        throw new Error(message || \"Assertion failed\");\n    }\n}\n\nexport enum DiagramType {\n    Polygon = 'polygon',\n    Curve   = 'curve',\n    Text    = 'text',\n    Image   = 'image',\n    Diagram = 'diagram',\n    MultilineText = 'multilinetext',\n}\n\nexport const DEFAULT_FONTSIZE = \"16\"; // 16px (12pt) is the web default\n\nexport type Anchor = \n    'top-left'    | 'top-center'    | 'top-right'    | \n    'center-left' | 'center-center' | 'center-right' | \n    'bottom-left' | 'bottom-center' | 'bottom-right' ;\n\n/**\n * Make sure that every function return a new Diagram\n * Diagram is immutable to the user\n */\n\nexport type DiagramStyle = {\n    \"stroke\"           : string,\n    \"fill\"             : string,\n    \"opacity\"          : string,\n    \"stroke-width\"     : string, // number\n    \"stroke-linecap\"   : string,\n    \"stroke-dasharray\" : string, // number[]\n    \"stroke-linejoin\"  : string,\n    \"vector-effect\"    : string,\n    // TODO : add more style\n}\n\nexport type TextData = {\n    \"text\"             : string,\n    \"font-family\"      : string,\n    \"font-size\"        : string,\n    \"font-weight\"      : string,\n    \"font-style\"       : string,\n    \"text-anchor\"      : string,\n    \"dy\"               : string, // used to be \"dominant-baseline\": string,\n    \"angle\"            : string,\n    \"font-scale\"       : string, // this is a custom attribute that is not present in SVG\n    // \"letter-spacing\"   : string,\n    // \"word-spacing\"     : string,\n    // \"text-decoration\"  : string,\n    // \"writing-mode\"     : string,\n}\n\nexport type ImageData = {\n    \"src\"    : string,\n}\n\ntype ExtraTspanStyle = {\n    \"dy\" : string,\n    \"dx\" : string,\n    \"textvar\" : boolean,\n    \"tag\" : string,\n}\ntype TextSpanData = {\n    \"text\"  : string,\n    \"style\" : Partial<TextData> & Partial<DiagramStyle> & Partial<ExtraTspanStyle>,\n}\nexport type MultilineTextData = {\n    \"content\" : TextSpanData[],\n    \"scale-factor\" : number,\n}\n\nfunction anchor_to_textdata(anchor : Anchor) : Partial<TextData> {\n    // TODO : might want to look at\n    // hanging vs text-before-edge\n    // ideographic vs text-after-edge\n    switch (anchor) {\n        case \"top-left\"      : return {\"text-anchor\" : \"start\" , \"dy\" : \"0.75em\"};\n        case \"top-center\"    : return {\"text-anchor\" : \"middle\", \"dy\" : \"0.75em\"};\n        case \"top-right\"     : return {\"text-anchor\" : \"end\"   , \"dy\" : \"0.75em\"};\n        case \"center-left\"   : return {\"text-anchor\" : \"start\" , \"dy\" : \"0.25em\"};\n        case \"center-center\" : return {\"text-anchor\" : \"middle\", \"dy\" : \"0.25em\"};\n        case \"center-right\"  : return {\"text-anchor\" : \"end\"   , \"dy\" : \"0.25em\"};\n        case \"bottom-left\"   : return {\"text-anchor\" : \"start\" , \"dy\" : \"-0.25em\"};\n        case \"bottom-center\" : return {\"text-anchor\" : \"middle\", \"dy\" : \"-0.25em\"};\n        case \"bottom-right\"  : return {\"text-anchor\" : \"end\"   , \"dy\" : \"-0.25em\"};\n        default: throw new Error(\"Unknown anchor \" + anchor);\n    }\n}\n\n\n/**\n* Diagram Class \n*\n* Diagram is a tree structure\n* Diagram can be a polygon, curve, text, image, or diagram\n* Polygon is a closed path\n* Curve is an open path\n* Diagram is a tree of Diagrams\n*/\nexport class Diagram {\n    type : DiagramType;\n    children : Diagram[] = [];\n    path : Path | undefined = undefined; // Polygon and Curve have a path\n    origin : Vector2 = new Vector2(0, 0); // position of the origin of the diagram\n    style         : Partial<DiagramStyle>      = {};\n    textdata      : Partial<TextData>          = {};\n    multilinedata : Partial<MultilineTextData> = {};\n    imgdata       : Partial<ImageData>         = {};\n    mutable       : boolean   = false;\n    tags : string[] = [];\n\n    constructor(type_ : DiagramType, \n        args : { \n            path?     : Path, \n            children? : Diagram[], \n            textdata? : Partial<TextData>, \n            imgdata?  : Partial<ImageData>,\n            multilinedata? : Partial<MultilineTextData>,\n            tags?     : string[],\n        } = {}\n    ) {\n        this.type = type_;\n        this.path = args.path;\n        if (args.children) { this.children = args.children; }\n        if (args.textdata) { this.textdata = args.textdata; }\n        if (args.imgdata)  { this.imgdata  = args.imgdata; }\n        if (args.tags)     { this.tags     = args.tags; }\n        if (args.multilinedata) { this.multilinedata = args.multilinedata; }\n    }\n\n    /**\n     * Turn the diagram into a mutable diagram\n     */\n    public mut() : Diagram {\n        this.mutable = true;\n        // make path mutable\n        if (this.path != undefined) this.path.mutable = true;\n        // make all of the children mutable\n        for (let i = 0; i < this.children.length; i++) this.children[i].mut();\n        return this;\n    }\n\n    public mut_parent_only() : Diagram {\n        this.mutable = true;\n        // make path mutable\n        if (this.path != undefined) this.path.mutable = true;\n        return this;\n    }\n\n    /**\n     * Create a copy of the diagram that is immutable\n     */\n    public immut() : Diagram {\n        let newd : Diagram = this.copy();\n        newd.mutable = false;\n        // make path immutable\n        if (this.path != undefined) this.path.mutable = false;\n        // make all of the children immutable\n        for (let i = 0; i < newd.children.length; i++) newd.children[i].immut();\n        return newd;\n    }\n\n    private static deep_setPrototypeOf(obj : any) : void {\n        Object.setPrototypeOf(obj, Diagram.prototype);\n        let objd : Diagram = obj;\n        // convert position and origin_offset to Vector2\n        objd.origin = Object.setPrototypeOf(objd.origin, Vector2.prototype);\n        // make sure all of the children are Diagram\n        for (let c = 0; c < objd.children.length; c++)\n            Diagram.deep_setPrototypeOf(objd.children[c]);\n\n        // set path to Path\n        if (objd.path != undefined) {\n            Object.setPrototypeOf(objd.path, Path.prototype);\n            objd.path = objd.path.copy();\n        }\n    }\n\n    /**\n     * Copy the diagram\n     * @return { Diagram }\n     */\n    public copy() : Diagram {\n        // do deepcopy with JSON\n        let newd : Diagram = JSON.parse(JSON.stringify(this));\n        // turn newd into Diagram\n        Diagram.deep_setPrototypeOf(newd);\n        return newd;\n    }\n\n    public copy_if_not_mutable() : Diagram {\n        return this.mutable ? this : this.copy();\n    }\n\n    /**\n     * Append tags to the diagram\n     */\n    public append_tags(tags : string | string[]) : Diagram {\n        let newd = this.copy_if_not_mutable();\n        if (!Array.isArray(tags)) tags = [tags];\n        for (let tag of tags){\n            if(!newd.tags.includes(tag)) newd.tags.push(tag);\n        }\n        return newd;\n    }\n    /**\n     * Remove tags from the diagram\n     */\n    public remove_tags(tags : string | string[]) : Diagram {\n        let newd = this.copy_if_not_mutable();\n        newd.tags = newd.tags.filter(t => !tags.includes(t));\n        return newd;\n    }\n    /**\n     * Reset all tags of the diagram\n     */\n    public reset_tags() : Diagram {\n        let newd = this.copy_if_not_mutable();\n        newd.tags = [];\n        return newd;\n    }\n    /**\n    * Check if the diagram contains a tag\n    */\n    public contain_tag(tag : string) : boolean {\n        return this.tags.includes(tag);\n    }\n    public contain_all_tags(tags : string[]) : boolean {\n        for (let tag of tags){\n            if (!this.tags.includes(tag)) return false;\n        }\n        return true;\n    }\n\n    /**\n     * Collect all children and subchildren of the diagram\n     * helper function for flatten()\n     */\n    private collect_children() : Diagram[] {\n        let children : Diagram[] = [];\n        if (this.type == DiagramType.Diagram) {\n            for (let c of this.children) {\n                children = children.concat(c.collect_children());\n            }\n        } else {\n            children.push(this);\n        }\n        return children;\n    }\n\n    /**\n     * Flatten the children structure of the diagram\n     * so that the diagram only has one level of children\n     * \\* implemented for performance reason\n     */\n    public flatten() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        newd.children = newd.collect_children();\n        return newd;\n    }\n\n    /**\n     * Apply a function to the diagram\n     * @param func function to apply\n     * func takes in a diagram and returns a diagram\n     */\n    public apply(func : (d : Diagram) => Diagram) : Diagram {\n        return func(this.copy_if_not_mutable());\n    }\n\n    /**\n     * Apply a function to the diagram and all of its children recursively\n     * @param func function to apply\n     * func takes in a diagram and returns a diagram\n     */\n    public apply_recursive(func : (d : Diagram) => Diagram) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        // apply to self\n        newd = func(newd);\n        // apply to children\n        for (let i = 0; i < newd.children.length; i++) {\n            newd.children[i] = newd.children[i].apply_recursive(func);\n        }\n        return newd;\n    }\n    \n    /**\n    * Apply a function to the diagram and all of its children recursively\n    * The function is only applied to the diagrams that contain a specific tag\n    * @param tags the tag to filter the diagrams\n    * @param func function to apply\n    * func takes in a diagram and returns a diagram\n    */ \n    public apply_to_tagged_recursive(tags : string | string[], func : (d : Diagram) => Diagram) : Diagram {\n        if (!Array.isArray(tags)) tags = [tags];\n        \n        let newd : Diagram = this.copy_if_not_mutable();\n        // if the diagram has the tag, apply the function to self\n        if (newd.contain_all_tags(tags)) newd = func(newd);\n        // apply to children\n        for (let i = 0; i < newd.children.length; i++) {\n            newd.children[i] = newd.children[i].apply_to_tagged_recursive(tags, func);\n        }\n        return newd;\n    }\n\n    /**\n     * Combine another diagram with this diagram\n     * @param diagrams a diagram or a list of diagrams\n     */\n    public combine(...diagrams : Diagram[]) : Diagram {\n        return diagram_combine(this, ...diagrams);\n    }\n\n    /**\n     * Convert the diagram to a curve\n     * If the diagram is a polygon, convert it to a curve\n     * If the diagram is a Diagram, convert all of the children to curves\n     */\n    public to_curve() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Polygon) {\n            newd.type = DiagramType.Curve;\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.to_curve());\n            for (let i = 0; i < newd.children.length; i++) \n                newd.children[i] = newd.children[i].to_curve();\n        }\n        return newd;\n    }\n\n    /**\n     * Convert the diagram to a polygon\n     * If the diagram is a curve, convert it to a polygon\n     * If the diagram is a Diagram, convert all of the children to polygons\n     */\n    public to_polygon() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Curve) {\n            newd.type = DiagramType.Polygon;\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.to_polygon());\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].to_polygon();\n        }\n        return newd;\n    }\n\n    /**\n     * Add points to the diagram\n     * if the diagram is a polygon or curve, add points to the path\n     * if the diagram is a diagram, add points to the last polygon or curve child\n     * @param points points to add\n     */\n    public add_points(points : Vector2[]) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Polygon || newd.type == DiagramType.Curve) {\n            if (newd.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            newd.path = newd.path.add_points(points);\n        } else if (newd.type == DiagramType.Diagram) {\n            // add point to the last polygon or curve child\n            let last_child = newd.children[newd.children.length - 1];\n            newd.children[newd.children.length - 1] = last_child.add_points(points);\n        }\n        return newd;\n    }\n\n    private update_style(stylename : keyof Diagram['style'], stylevalue : string, excludedType? : DiagramType[]) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (excludedType?.includes(newd.type)) { \n            return newd; \n        } else if (newd.type == DiagramType.Polygon || newd.type == DiagramType.Curve \n            || newd.type == DiagramType.Text || newd.type == DiagramType.Image \n            || newd.type == DiagramType.MultilineText\n        ) {\n            newd.style[stylename] = stylevalue;\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.update_style(stylename, stylevalue, excludedType));\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].update_style(stylename, stylevalue, excludedType);\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + newd.type);\n        }\n        return newd;\n    }\n    \n    /* * Clone style from another diagram */\n    public clone_style_from(diagram : Diagram) : Diagram {\n        return this.apply_recursive(d => {\n            d.style = {...diagram.style};\n            return d;\n        });\n    }\n\n    public fill(color : string) : Diagram { \n        return this.update_style('fill', color, [DiagramType.Text]);\n    }\n    public stroke(color : string) : Diagram { \n        return this.update_style('stroke', color, [DiagramType.Text]);\n    }\n    public opacity(opacity : number) : Diagram {\n        return this.update_style('opacity', opacity.toString());\n    }\n    public strokewidth(width : number) : Diagram { \n        return this.update_style('stroke-width', width.toString(), [DiagramType.Text]);\n    }\n    public strokelinecap(linecap : 'butt' | 'round' | 'square') : Diagram {\n        return this.update_style('stroke-linecap', linecap);\n    }\n    public strokelinejoin(linejoin : 'arcs' | 'bevel' | 'miter' | 'miter-clip' | 'round') : Diagram {\n        return this.update_style('stroke-linejoin', linejoin);\n    }\n    public strokedasharray(dasharray : number[]) : Diagram {\n        return this.update_style('stroke-dasharray', dasharray.join(','));\n    }\n    public vectoreffect(vectoreffect : 'none' | 'non-scaling-stroke' | 'non-scaling-size' | 'non-rotation' | 'fixed-position'\n) : Diagram {\n        return this.update_style('vector-effect', vectoreffect);\n    }\n\n    public textfill(color : string) : Diagram {\n        return this.update_style('fill', color, [DiagramType.Polygon, DiagramType.Curve]);\n    }\n    public textstroke(color : string) : Diagram {\n        return this.update_style('stroke', color, [DiagramType.Polygon, DiagramType.Curve]);\n    }\n    public textstrokewidth(width : number) : Diagram {\n        return this.update_style('stroke-width', width.toString(), [DiagramType.Polygon, DiagramType.Curve]);\n    }\n\n\n    private update_textdata(textdataname : keyof Diagram['textdata'], textdatavalue : string) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Text || newd.type == DiagramType.MultilineText) {\n            newd.textdata[textdataname] = textdatavalue;\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.update_textdata(textdataname, textdatavalue));\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].update_textdata(textdataname, textdatavalue);\n        } else if (newd.type == DiagramType.Polygon || newd.type == DiagramType.Curve) {\n            // do nothing\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + newd.type);\n        }\n        return newd;\n    }\n    public fontfamily(fontfamily : string) : Diagram {\n        return this.update_textdata('font-family', fontfamily);\n    }\n    public fontstyle(fontstyle : string) : Diagram {\n        return this.update_textdata('font-style', fontstyle);\n    }\n    public fontsize(fontsize : number) : Diagram {\n        return this.update_textdata('font-size', fontsize.toString());\n    }\n    public fontweight(fontweight : 'normal' | 'bold' | 'bolder' | 'lighter' | number ) : Diagram {\n        return this.update_textdata('font-weight', fontweight.toString());\n    }\n    public fontscale(fontscale : number | 'auto') : Diagram {\n        return this.update_textdata('font-scale', fontscale.toString());\n    }\n    public textanchor(textanchor : 'start' | 'middle' | 'end' ) : Diagram {\n        return this.update_textdata('text-anchor', textanchor);\n    }\n    public textdy(dy : string) : Diagram {\n        return this.update_textdata('dy', dy);\n    }\n    public textangle(angle : number){\n        return this.update_textdata('angle', angle.toString());\n    }\n    public text_tovar() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Text) {\n            newd = newd.append_tags(TAG.TEXTVAR);\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.text_tovar());\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].text_tovar();\n        }\n        return newd;\n    }\n    public text_totext() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Text) {\n            newd = newd.remove_tags('textvar');\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.text_totext());\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].text_totext();\n        }\n        return newd;\n    }\n            \n\n\n    /**\n     * Get the bounding box of the diagram\n     * @returns [min, max] where min is the top left corner and max is the bottom right corner\n     */\n    public bounding_box() : [Vector2, Vector2] {\n        let minx = Infinity, miny = Infinity;\n        let maxx = -Infinity, maxy = -Infinity;\n        if (this.type == DiagramType.Diagram){\n                for (let c = 0; c < this.children.length; c++){\n                    let child = this.children[c];\n                    let [min, max] = child.bounding_box();\n                    minx = Math.min(minx, min.x);\n                    miny = Math.min(miny, min.y);\n                    maxx = Math.max(maxx, max.x);\n                    maxy = Math.max(maxy, max.y);\n                }\n                return [new Vector2(minx, miny), new Vector2(maxx, maxy)];\n        }\n        else if (this.type == DiagramType.Curve || this.type == DiagramType.Polygon \n            || this.type == DiagramType.Image){\n                if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n                for (let p = 0; p < this.path.points.length; p++) {\n                    let point = this.path.points[p];\n                    minx = Math.min(minx, point.x);\n                    miny = Math.min(miny, point.y);\n                    maxx = Math.max(maxx, point.x);\n                    maxy = Math.max(maxy, point.y);\n                }\n                return [new Vector2(minx, miny), new Vector2(maxx, maxy)];\n        } \n        else if (this.type == DiagramType.Text || this.type == DiagramType.MultilineText){\n            return [this.origin.copy(), this.origin.copy()];\n        }\n        else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\n        }\n    }\n\n    /**\n     * Transform the diagram by a function\n     * @param transform_function function to transform the diagram\n     */\n    public transform(transform_function : (p : Vector2) => Vector2) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        // transform all children\n        // newd.children = newd.children.map(c => c.transform(transform_function));\n        for (let i = 0; i < newd.children.length; i++)\n            newd.children[i] = newd.children[i].transform(transform_function);\n        // transform path\n        if (newd.path != undefined) newd.path = newd.path.transform(transform_function);\n        // transform origin\n        newd.origin = transform_function(newd.origin);\n        return newd;\n    }\n\n    /**\n     * Translate the diagram by a vector\n     * @param v vector to translate\n     */\n    public translate(v : Vector2) : Diagram {\n        return this.transform(Transform.translate(v));\n    }\n\n    /**\n     * move the diagram to a position\n     * @param v position to move to (if left undefined, move to the origin)\n     */\n    public position(v : Vector2 = new Vector2(0,0)) : Diagram {\n        let dv = v.sub(this.origin)\n        return this.translate(dv);\n    }\n\n    /**\n     * Rotate the diagram by an angle around a pivot\n     * @param angle angle to rotate\n     * @param pivot pivot point, if left undefined, rotate around the origin\n     */\n    public rotate(angle : number, pivot : Vector2 | undefined = undefined) : Diagram {\n        if (pivot == undefined) { pivot = this.origin; }\n        return this.transform(Transform.rotate(angle, pivot));\n    }\n\n    /**\n     * Scale the diagram by a scale around a origin\n     * @param scale scale to scale (x, y)\n     * @param origin origin point, if left undefined, scale around the origin\n     */\n    public scale(scale : Vector2 | number, origin? : Vector2) : Diagram {\n        if (origin == undefined) { origin = this.origin; }\n        if (typeof scale == 'number') { scale = new Vector2(scale, scale); }\n        return this.transform(Transform.scale(scale, origin));\n    }\n\n    /**\n     * Scale texts contained in the diagram by a scale\n     * @param scale scaling factor\n     */\n    public scaletext(scale : number) : Diagram {\n        return this.apply_recursive(d => {\n            switch (d.type) {\n                case DiagramType.Text: {\n                    let fontsize = parseFloat(d.textdata['font-size'] || DEFAULT_FONTSIZE);\n                    let newd = d.copy_if_not_mutable();\n                    newd.textdata['font-size'] = (fontsize * scale).toString();\n                    return newd;\n                }\n                case DiagramType.MultilineText: {\n                    let newd = d.copy_if_not_mutable();\n                    newd.multilinedata['scale-factor'] = (newd.multilinedata['scale-factor'] || 1) * scale;\n                    return newd;\n                }\n                default: return d;\n            }\n        });\n    }\n\n    /**\n     * Skew the diagram in the x direction by an angle around a base\n     * @param angle angle to skew\n     * @param base base point, if left undefined, skew around the origin\n     */\n    public skewX(angle : number, base? : Vector2) : Diagram {\n        if (base == undefined) { base = this.origin; }\n        return this.transform(Transform.skewX(angle, base.y));\n    }\n\n    /**\n     * Skew the diagram in the y direction by an angle around a base\n     * @param angle angle to skew\n     * @param base base point, if left undefined, skew around the origin\n     */\n    public skewY(angle : number, base? : Vector2) : Diagram {\n        if (base == undefined) { base = this.origin; }\n        return this.transform(Transform.skewY(angle, base.x));\n    }\n\n    /**\n     * Reflect the diagram over a point\n     * @param p point to reflect over\n     */\n    public reflect_over_point(p : Vector2) {\n        return this.transform(Transform.reflect_over_point(p));\n    }\n\n    /**\n     * Reflect the diagram over a line defined by two points\n     * @param p1 point on the line\n     * @param p2 point on the line\n     */\n    public reflect_over_line(p1 : Vector2, p2 : Vector2) {\n        return this.transform(Transform.reflect_over_line(p1, p2));\n    }\n\n    /**\n     * Reflect the diagram\n     * if given 0 arguments, reflect over the origin\n     * if given 1 argument, reflect over a point p1\n     * if given 2 arguments, reflect over a line defined by two points p1 and p2\n     * @param p1 point\n     * @param p2 point\n     */\n    public reflect(p1? : Vector2, p2? : Vector2){\n        if (p1 == undefined && p2 == undefined) {\n            return this.reflect_over_point(this.origin);\n        } else if (p1 != undefined && p2 == undefined) {\n            return this.reflect_over_point(p1);\n        } else if (p1 != undefined && p2 != undefined) {\n            return this.reflect_over_line(p1, p2);\n        } else {\n            throw new Error(\"Unreachable\");\n        }\n    }\n\n    /**\n     * Vertical flip\n     * Reflect the diagram over a horizontal line y = a\n     * @param a y value of the line\n     * if left undefined, flip over the origin\n     */\n    public vflip(a? : number) {\n        if (a == undefined) { a = this.origin.y; }\n        return this.reflect(new Vector2(0, a), new Vector2(1, a));\n    }\n\n    /**\n     * Horizontal flip\n     * Reflect the diagram over a vertical line x = a\n     * @param a x value of the line\n     * if left undefined, flip over the origin\n     */\n    public hflip(a? : number){\n        if (a == undefined) { a = this.origin.x; }\n        return this.reflect(new Vector2(a, 0), new Vector2(a, 1));\n    }\n\n\n    /**\n     * Get the position of the anchor of the diagram\n     * @param anchor anchor to get, anchors can be\n     *   'top-left', 'top-center', 'top-right'\n     *   'center-left', 'center-center', 'center-right'\n     *   'bottom-left', 'bottom-center', 'bottom-right'\n     * @returns the position of the anchor\n     */\n    public get_anchor(anchor : Anchor) : Vector2 {\n        let [min, max] = this.bounding_box();\n        let minx = min.x, miny = min.y;\n        let maxx = max.x, maxy = max.y;\n        let midx = (minx + maxx) / 2;\n        let midy = (miny + maxy) / 2;\n        switch (anchor) {\n            case \"top-left\"      : return new Vector2(minx, maxy);\n            case \"top-center\"    : return new Vector2(midx, maxy);\n            case \"top-right\"     : return new Vector2(maxx, maxy);\n            case \"center-left\"   : return new Vector2(minx, midy);\n            case \"center-center\" : return new Vector2(midx, midy);\n            case \"center-right\"  : return new Vector2(maxx, midy);\n            case \"bottom-left\"   : return new Vector2(minx, miny);\n            case \"bottom-center\" : return new Vector2(midx, miny);\n            case \"bottom-right\"  : return new Vector2(maxx, miny);\n            default: throw new Error(\"Unknown anchor \" + anchor);\n        }\n    }\n\n    /**\n     * Move the origin of the diagram to a position or anchor\n     * @param pos position to move the origin to (Vector2), or anchor to move the origin to.\n     * anchors can be\n     *  'top-left', 'top-center', 'top-right'\n     *  'center-left', 'center-center', 'center-right'\n     *  'bottom-left', 'bottom-center', 'bottom-right'\n     * * for texts, use `move_origin_text()`\n     */\n    public move_origin(pos : Vector2 | Anchor) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (pos instanceof Vector2) {\n            newd.origin = pos;\n        } else {\n            newd.origin = newd.get_anchor(pos);\n        }\n        return newd;\n    }\n\n    /**\n     * Move the origin of text diagram to an anchor\n     * @param anchor anchor to move the origin to.\n     * anchors can be\n     * 'top-left', 'top-center', 'top-right'\n     * 'center-left', 'center-center', 'center-right'\n     * 'bottom-left', 'bottom-center', 'bottom-right'\n     */\n    private __move_origin_text(anchor : Anchor) : Diagram {\n        // for text, use text-anchor and dominant-baseline\n        let newd = this.copy_if_not_mutable();\n        let textdata = anchor_to_textdata(anchor);\n        newd.textdata['text-anchor'] = textdata['text-anchor'];\n        newd.textdata['dy'] = textdata['dy'];\n        return newd;\n    }\n\n    /**\n     * Move the origin of text diagram to a position\n     * @param anchor anchor to move the origin to.\n     * anchors can be\n     * 'top-left', 'top-center', 'top-right'\n     * 'center-left', 'center-center', 'center-right'\n     * 'bottom-left', 'bottom-center', 'bottom-right'\n     *\n     */\n    public move_origin_text(anchor : Anchor) : Diagram {\n        let newd = this.copy_if_not_mutable();\n        if (this.type == DiagramType.Text || this.type == DiagramType.MultilineText) {\n            newd = newd.__move_origin_text(anchor);\n        } else if (this.type == DiagramType.Diagram) {\n            //newd.children = newd.children.map(c => c.move_origin_text(anchor));\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].move_origin_text(anchor);\n        } else {\n            // do nothing\n        }\n        return newd;\n    }\n\n    public path_length() : number {\n        if (this.type == DiagramType.Diagram) {\n            let length = 0;\n            for (let c = 0; c < this.children.length; c++) {\n                length += this.children[c].path_length();\n            }\n            return length;\n        } else if (this.type == DiagramType.Curve || this.type == DiagramType.Polygon) {\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            return this.path.length();\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\n        }\n    }\n    \n    /**\n    * Reverse the order of the points in the path\n    */\n    public reverse_path() {\n        let newd = this.copy_if_not_mutable();\n        if (newd.path) {\n            newd.path = newd.path?.reverse();\n        }\n        return newd;\n    }\n\n    /**\n     * Get the point on the path at t\n     * Path can be described parametrically in the form of (x(t), y(t))\n     * Path starts at t=0 and ends at t=1\n     * @param t parameter\n     * @param segment_index (only works for polygon and curves)\n     * If segment_index (n) is defined, get the point at the nth segment\n     * If segment_index (n) is defined, t can be outside of [0, 1] and will return the extrapolated point\n     * @returns the position of the point\n     */\n    public parametric_point(t : number, segment_index? : number) : Vector2 {\n        if (this.type == DiagramType.Diagram) {\n            // use entire length, use the childrens\n            let cumuative_length = [];\n            let length   = 0.0;\n            for (let c = 0; c < this.children.length; c++) {\n                length += this.children[c].path_length();\n                cumuative_length.push(length);\n            }\n            let total_length = length;\n            let cumulative_t = cumuative_length.map(l => l / total_length);\n\n            // figure out which children t is in\n            for (let i = 0; i < cumulative_t.length; i++) {\n                if (t <= cumulative_t[i]) {\n                    let child_id = i;\n\n                    let prev_t = (i == 0) ? 0 : cumulative_t[i-1];\n                    let segment_t = (t - prev_t) / (cumulative_t[i] - prev_t);\n                    return this.children[child_id].parametric_point(segment_t);\n                }\n            }\n            throw Error(\"Unreachable\");\n        } else if (this.type == DiagramType.Curve) {\n            // get the point on the path\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            return this.path.parametric_point(t, false, segment_index);\n        } else if (this.type == DiagramType.Polygon) {\n            // get the point on the path\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            return this.path.parametric_point(t, true, segment_index);\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\n        }\n    }\n\n    public debug_bbox() : Diagram {\n        // TODO : let user supply the styling function\n        let style_bbox = (d : Diagram) => {\n            return d.fill('none').stroke('gray').strokedasharray([5,5])\n        };\n\n        let [min, max] = this.bounding_box();\n        let rect_bbox = polygon([\n            new Vector2(min.x, min.y), new Vector2(max.x, min.y), \n            new Vector2(max.x, max.y), new Vector2(min.x, max.y)\n        ]).apply(style_bbox);\n\n        let origin_x = text('+').position(this.origin)\n\n        return rect_bbox.combine(origin_x);\n    }\n\n    public debug(show_index : boolean = true) : Diagram {\n        // TODO : let user supply the styling function\n        let style_path = (d : Diagram) => {\n            return d.fill('none').stroke('red').strokedasharray([5,5])\n        };\n        let style_index = (d : Diagram) => {\n            let bg = d.textfill('white').textstroke('white').textstrokewidth(5);\n            let dd = d.fill('black');\n            return bg.combine(dd);\n        };\n\n        // handle each type separately\n        if (this.type == DiagramType.Diagram) {\n            return this.debug_bbox();\n        } \n        else if (this.type == DiagramType.Text){\n            // return empty at diagram origin\n            return empty(this.origin);\n        }\n        else if (this.type == DiagramType.Polygon || this.type == DiagramType.Curve \n            || this.type == DiagramType.Image){\n            let f_obj = this.type == DiagramType.Polygon || DiagramType.Image ? polygon : curve;\n\n            let deb_bbox = this.debug_bbox();\n\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            let deb_object = f_obj(this.path.points).apply(style_path);\n\n            // if show_index is false, return only the bbox and polygon\n            if (show_index == false) { return deb_bbox.combine(deb_object); }\n\n            // iterate for all path points\n            let points = this.path.points;\n            // let point_texts = points.map((p, i) => text(i.toString()).position(p).apply(style_index));\n            let point_texts : Diagram[] = [];\n            let prev_point : Vector2 | undefined = undefined;\n\n            let [min, max] = this.bounding_box();\n            let minimum_dist_tolerance = Math.min(max.x - min.x, max.y - min.y) / 10;\n            for (let i = 0; i < points.length; i++) {\n                // push to point_texts only if far enough from prev_point\n                let dist_to_prev = prev_point == undefined ? Infinity : points[i].sub(prev_point).length();\n                if (dist_to_prev < minimum_dist_tolerance) continue;\n\n                point_texts.push(text(i.toString()).position(points[i]).apply(style_index));\n                prev_point = points[i];\n            }\n\n            return deb_bbox.combine(deb_object,...point_texts);\n        }\n        else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\n        }\n    }\n}\n\nexport class Path {\n    mutable : boolean = false;\n    constructor(public points : Vector2[]) { }\n\n    copy() : Path {\n        let newpoints = this.points.map(p => new Vector2(p.x,p.y));\n        return new Path(newpoints);\n    }\n    copy_if_not_mutable() : Path {\n        return this.mutable ? this : this.copy();\n    }\n    \n    /**\n    * Reverse the order of the points in the path\n    */\n    public reverse() : Path {\n        let newp : Path = this.copy_if_not_mutable();\n        newp.points = newp.points.reverse();\n        return newp;\n    }\n\n    /**\n     * Get the length of the path\n     */\n    public length() : number {\n        let length = 0;\n        for (let i = 1; i < this.points.length; i++) {\n            length += this.points[i].sub(this.points[i-1]).length();\n        }\n        return length;\n    }\n\n    /**\n     * add points to the path\n     * @param points points to add\n     */\n    public add_points(points : Vector2[]) : Path {\n        let newp : Path = this.copy_if_not_mutable();\n        newp.points = newp.points.concat(points);\n        return newp;\n    }\n\n    /**\n     * Get the point on the path at t \n     * Path can be described parametrically in the form of (x(t), y(t))\n     * Path starts at t=0 and ends at t=1\n     * @param t parameter\n     * @param closed if true, the path is closed\n     * @param segment_index \n     * If `segment_index` (n) is defined, get the point at the nth segment.\n     * If `segment_index` (n) is defined, t can be outside of [0, 1] and will return the extrapolated point.\n     * @returns the position of the point\n    */\n    public parametric_point(t : number, closed : boolean = false, segment_index? : number) : Vector2 {\n        let extended_points = this.points;\n        if (closed) extended_points = this.points.concat(this.points[0]);\n        // for a closed path, there's an extra segment connecting the last point to the first point\n\n        if (segment_index == undefined) { \n            if (t < 0 || t > 1) { throw Error(\"t must be between 0 and 1\"); }\n            // use entire length\n            let cumulative_length = [];\n            let length   = 0.0;\n            for (let i = 1; i < extended_points.length; i++) {\n                length += extended_points[i].sub(extended_points[i-1]).length();\n                cumulative_length.push(length);\n            }\n            let total_length = length;\n            let cumulative_t = cumulative_length.map(l => l / total_length);\n            // figure out which segment t is in\n            for (let i = 0; i < cumulative_t.length; i++) {\n                if (t <= cumulative_t[i]) {\n                    let segment_id = i;\n\n                    let prev_t = (i == 0) ? 0 : cumulative_t[i-1];\n                    let segment_t = (t - prev_t) / (cumulative_t[i] - prev_t);\n                    return this.parametric_point(segment_t, closed, segment_id);\n                }\n            }\n            // segment must have been retrieved at this point\n            throw Error(\"Unreachable\");\n        } else {\n            // take nth segment\n            if (segment_index < 0 || segment_index > extended_points.length - 1) { \n                throw Error(\"segment_index must be between 0 and n-1\"); \n            }\n            let start = extended_points[segment_index];\n            let end   = extended_points[segment_index + 1];\n            let dir : Vector2 = end.sub(start);\n            return start.add(dir.scale(t));\n        }\n    }\n\n    /**\n     * Tranfrom the path by a function\n     * @param transform_function function to transform the path\n     */\n    public transform(transform_function : (p : Vector2) => Vector2) : Path {\n        let newp : Path = this.copy_if_not_mutable();\n        // transform all the points\n        // newp.points = newp.points.map(p => transform_function(p));\n        for (let i = 0; i < newp.points.length; i++) newp.points[i] = transform_function(newp.points[i]);\n        return newp;\n    }\n}\n\n/**\n * Combine multiple diagrams into one diagram\n * @param diagrams list of diagrams to combine\n * @returns a diagram\n */\nexport function diagram_combine(...diagrams : Diagram[]) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = diagrams.map(d => d.copy_if_not_mutable());\n\n    // check if all children is mutable\n    // if they are, then set the new diagram to be mutable\n    let all_children_mutable = true;\n    for (let i = 0; i < newdiagrams.length; i++) {\n        if (!newdiagrams[i].mutable) { \n            all_children_mutable = false; \n            break; \n        }\n    }\n\n    let newd = new Diagram(DiagramType.Diagram, {children : newdiagrams});\n    newd.mutable = all_children_mutable;\n    return newd.move_origin(diagrams[0].origin);\n    // return newd.move_origin(Anchor.CenterCenter);\n    // i think it's better to keep the origin at the origin of the first diagram\n}\n\n// ====== function helpers to create primitives =========\n\n\n/**\n * Create a curve from a list of points\n * @param points list of points\n * @returns a curve diagram\n */\nexport function curve(points : Vector2[]) : Diagram {\n    let path : Path = new Path(points);\n    let curve = new Diagram(DiagramType.Curve, {path : path});\n    return curve;\n}\n\n/**\n * Create a line from start to end \n * @param start start point\n * @param end end point\n * @returns a line diagram\n */\nexport function line(start : Vector2, end : Vector2) : Diagram {\n    return curve([start, end]).append_tags(TAG.LINE);\n}\n\n\n/**\n * Create a polygon from a list of points\n * @param points list of points\n * @param names list of names for each path\n * @returns a polygon diagram\n */\nexport function polygon(points: Vector2[]) : Diagram {\n    assert(points.length >= 3, \"Polygon must have at least 3 points\");\n    let path : Path = new Path(points);\n\n    // create diagram\n    let polygon = new Diagram(DiagramType.Polygon, {path : path});\n    return polygon;\n}\n\n/**\n * Create an empty diagram, contain just a single point\n * @param v position of the point\n * @returns an empty diagram\n */\nexport function empty(v : Vector2 = V2(0,0)) : Diagram {\n    let emp = curve([v])\n    return emp;\n}\n\n/**\n * Create a text diagram\n * @param str text to display\n * @returns a text diagram\n */\nexport function text(str : string) : Diagram {\n    let dtext = new Diagram(DiagramType.Text, {\n        textdata : { text : str, \"font-size\" : DEFAULT_FONTSIZE },\n        path : new Path([new Vector2(0, 0)]),\n    });\n    return dtext;\n}\n\n/**\n * Create an image diagram\n * @param src image source\n * @param width width of the image\n * @param height height of the image\n * @returns an image diagram\n */\nexport function image(src : string, width : number, height: number){\n    let imgdata : ImageData = { src }\n    // path: bottom-left, bottom-right, top-right, top-left\n    let path    : Path      = new Path([\n        V2(-width/2, -height/2), V2(width/2, -height/2),\n        V2(width/2, height/2), V2(-width/2, height/2),\n    ]);\n    let img = new Diagram(DiagramType.Image, {imgdata : imgdata, path : path});\n    return img;\n}\n\n/**\n * Create a multiline text diagram\n * @param strs list of text to display\n */\nexport function multiline(spans : ([string] | [string,Partial<TextData>])[]) : Diagram {\n    let tspans : TextSpanData[] = [];\n    for (let i = 0; i < spans.length; i++) {\n        let text = spans[i][0];\n        let style = spans[i][1] ?? {};\n        tspans.push({text, style});\n    }\n    let dmulti = new Diagram(DiagramType.MultilineText, {\n        multilinedata : { content : tspans, \"scale-factor\" : 1 },\n        path : new Path([new Vector2(0, 0)]),\n    });\n    return dmulti;\n}\n\nexport function multiline_bb(bbstr : string, linespace? : string) : Diagram {\n    let tspans : TextSpanData[] = BB_multiline.from_BBCode(bbstr,linespace) as TextSpanData[];\n    let dmulti = new Diagram(DiagramType.MultilineText, {\n        multilinedata : { content : tspans, \"scale-factor\" : 1 },\n        path : new Path([new Vector2(0, 0)]),\n    });\n    return dmulti;\n}\n\n\n// END primitives =============================\n\nexport function diagram_from_jsonstring(str : string) : Diagram {\n    try {\n        // turn str into JSON object\n        let d : Diagram = JSON.parse(str);\n        // turn d into Diagram\n        Object.setPrototypeOf(d, Diagram.prototype);\n        d = d.copy();\n        return d;\n    } catch (e) {\n        // if there's a mistake, return an empty diagram\n        console.warn(e);\n        return empty(new Vector2(0,0));\n    }\n}\n","import { Vector2, V2 } from \"./vector.js\";\n\n/**\n * Helper function to convert from degrees to radians\n */\nexport function to_radian(angle: number) : number {\n    return angle * Math.PI / 180;\n}\n\n/**\n * Helper function to convert from radians to degrees\n */\nexport function to_degree(angle: number) : number {\n    return angle * 180 / Math.PI;\n}\n\n\n\nexport function array_repeat<T>(arr : T[], len : number) : T[] {\n    let new_arr : T[] = [];\n    for (let i = 0; i < len; i++) {\n        new_arr.push(arr[i % arr.length]);\n    }\n    return new_arr;\n}\n\n/**\n * Create a equivalently spaced array of numbers from start to end (inclusive) \n * [start, end]\n * @param start start value\n * @param end end value\n * @param n number of points\n */\nexport function linspace(start: number, end: number, n: number = 100) : number[] {\n    let result = [];\n    let step = (end - start) / (n - 1);\n    for (let i = 0; i < n; i++) {\n        result.push(start + step * i);\n    }\n    return result;\n}\n\n/**\n * Create a equivalently spaced array of numbers from start to end (exclusice) \n * [start, end)\n * @param start start value\n * @param end end value\n * @param n number of points\n */\nexport function linspace_exc(start: number, end: number, n: number = 100) : number[] {\n    let result = [];\n    let step = (end - start) / n;\n    for (let i = 0; i < n; i++) {\n        result.push(start + step * i);\n    }\n    return result;\n}\n\n/**\n * Create a equivalently spaced array of numbers from start to end (exclusive)\n * [start, end)\n * @param start start value\n * @param end end value\n * @param step step size\n */\nexport function range(start: number, end: number, step: number = 1) : number[] {\n    // step cannot be 0 and cannot be in the wrong direction\n    if (step == 0) return [];\n    let n = Math.floor((end - start) / step);\n    if (n <= 0) return [];\n\n    let result = [];\n    if (step > 0){\n        for (let i = start; i < end; i += step) {\n            result.push(i);\n        }\n    } else {\n        for (let i = start; i > end; i += step) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\n/**\n * Create a equivalently spaced array of numbers from start to end (inc)\n * [start, end]\n * @param start start value\n * @param end end value\n * @param step step size\n */\nexport function range_inc(start: number, end: number, step: number = 1) : number[] {\n    // step cannot be 0 and cannot be in the wrong direction\n    if (step == 0) return [];\n    let n = Math.floor((end - start) / step);\n    if (n <= 0) return [];\n\n    let result = [];\n    if (step > 0){\n        for (let i = start; i <= end; i += step) {\n            result.push(i);\n        }\n    } else {\n        for (let i = start; i >= end; i += step) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\n/**\n * Transpose a 2D array\n * if the array is not a rectangle, the transposed array will be padded with undefined\n * @param arr 2D array\n * @returns transposed 2D array\n */\nexport function transpose<T>(arr : T[][]) : (T|undefined)[][] {\n    let result : T[][] = [];\n    let n = Math.max(...arr.map(a => a.length));\n    for (let i = 0; i < n; i++) {\n        result.push([]);\n        for (let j = 0; j < arr.length; j++) {\n            result[i].push(arr[j][i]);\n        }\n    }\n    return result;\n}\n\n/* @return [top, right, bottom, left] */\nexport function expand_directional_value(padding : number | number[]) : [number,number,number,number] {\n    let p = padding;\n    if (typeof p === 'number') return [p,p,p,p];\n    if (!Array.isArray(p)) return [0,0,0,0];\n    if (p.length === 1) return [p[0], p[0], p[0], p[0]];\n    if (p.length === 2) return [p[0], p[1], p[0], p[1]];\n    if (p.length === 3) return [p[0], p[1], p[2], p[1]];\n    if (p.length >= 4)  return [p[0], p[1], p[2], p[3]];\n    return [0,0,0,0];\n}\n","// color from matpltlib's tab20\nexport const tab_color : {[key : string]: string} = {\n    'blue'        : '#1f77b4',\n    'lightblue'   : '#aec7e8',\n    'orange'      : '#ff7f0e',\n    'lightorange' : '#ffbb78',\n    'green'       : '#2ca02c',\n    'lightgreen'  : '#98df8a',\n    'red'         : '#d62728',\n    'lightred'    : '#ff9896',\n    'purple'      : '#9467bd',\n    'lightpurple' : '#c5b0d5',\n    'brown'       : '#8c564b',\n    'lightbrown'  : '#c49c94',\n    'pink'        : '#e377c2',\n    'lightpink'   : '#f7b6d2',\n    'grey'        : '#7f7f7f',\n    'lightgrey'   : '#c7c7c7',\n    'gray'        : '#7f7f7f',\n    'lightgray'   : '#c7c7c7',\n    'olive'       : '#bcbd22',\n    'lightolive'  : '#dbdb8d',\n    'cyan'        : '#17becf',\n    'lightcyan'   : '#9edae5',\n}\n\nexport function get_color(colorname : string, palette : {[key : string]: string}) : string {\n    return palette[colorname] ?? colorname;\n}\n","const unicode_mathematical_italic = {\n    'A' : '𝐴', 'B' : '𝐵', 'C' : '𝐶', 'D' : '𝐷', 'E' : '𝐸',\n    'F' : '𝐹', 'G' : '𝐺', 'H' : '𝐻', 'I' : '𝐼', 'J' : '𝐽',\n    'K' : '𝐾', 'L' : '𝐿', 'M' : '𝑀', 'N' : '𝑁', 'O' : '𝑂',\n    'P' : '𝑃', 'Q' : '𝑄', 'R' : '𝑅', 'S' : '𝑆', 'T' : '𝑇',\n    'U' : '𝑈', 'V' : '𝑉', 'W' : '𝑊', 'X' : '𝑋', 'Y' : '𝑌', 'Z' : '𝑍',\n    'a' : '𝑎', 'b' : '𝑏', 'c' : '𝑐', 'd' : '𝑑', 'e' : '𝑒',\n    'f' : '𝑓', 'g' : '𝑔', 'h' : 'ℎ', 'i' : '𝑖', 'j' : '𝑗',\n    'k' : '𝑘', 'l' : '𝑙', 'm' : '𝑚', 'n' : '𝑛', 'o' : '𝑜',\n    'p' : '𝑝', 'q' : '𝑞', 'r' : '𝑟', 's' : '𝑠', 't' : '𝑡',\n    'u' : '𝑢', 'v' : '𝑣', 'w' : '𝑤', 'x' : '𝑥', 'y' : '𝑦', 'z' : '𝑧',\n\n    'Α' : '𝛢', 'Β' : '𝛣', 'Γ' : '𝛤', 'Δ' : '𝛥', 'Ε' : '𝛦',\n    'Ζ' : '𝛧', 'Η' : '𝛨', 'Θ' : '𝛩', 'Ι' : '𝛪', 'Κ' : '𝛫',\n    'Λ' : '𝛬', 'Μ' : '𝛭', 'Ν' : '𝛮', 'Ξ' : '𝛯', 'Ο' : '𝛰',\n    'Π' : '𝛱', 'Ρ' : '𝛲', 'Σ' : '𝛴', 'Τ' : '𝛵', 'Υ' : '𝛶',\n    'Φ' : '𝛷', 'Χ' : '𝛸', 'Ψ' : '𝛹', 'Ω' : '𝛺',\n    'α' : '𝛼', 'β' : '𝛽', 'γ' : '𝛾', 'δ' : '𝛿', 'ε' : '𝜀',\n    'ζ' : '𝜁', 'η' : '𝜂', 'θ' : '𝜃', 'ι' : '𝜄', 'κ' : '𝜅',\n    'λ' : '𝜆', 'μ' : '𝜇', 'ν' : '𝜈', 'ξ' : '𝜉', 'ο' : '𝜊',\n    'π' : '𝜋', 'ρ' : '𝜌', 'ς' : '𝜍', 'σ' : '𝜎', 'τ' : '𝜏', 'υ' : '𝜐', \n    'φ' : '𝜑', 'χ' : '𝜒', 'ψ' : '𝜓', 'ω' : '𝜔',\n    'ϑ' : '𝜗', 'ϰ' : '𝜘', 'ϕ' : '𝜙', 'ϱ' : '𝜚', 'ϖ' : '𝜛',\n    // '.' : '𝛻', '.' : '𝛳', '.' : '𝜕', '.' : '𝜖',\n}\nconst reversed_unicode_mathematical_italic = Object.fromEntries(\n    Object.entries(unicode_mathematical_italic).map(([k,v]) => [v,k])\n);\n\nconst latex_greek  = {\n    '\\\\alpha'   : 'α', '\\\\beta'    : 'β', '\\\\gamma'   : 'γ', '\\\\delta'   : 'δ', '\\\\epsilon' : 'ε',\n    '\\\\zeta'    : 'ζ', '\\\\eta'     : 'η', '\\\\theta'   : 'θ', '\\\\iota'    : 'ι', '\\\\kappa'   : 'κ',\n    '\\\\lambda'  : 'λ', '\\\\mu'      : 'μ', '\\\\nu'      : 'ν', '\\\\xi'      : 'ξ', '\\\\omicron' : 'ο',\n    '\\\\pi'      : 'π', '\\\\rho'     : 'ρ', '\\\\sigma'   : 'σ', '\\\\tau'     : 'τ', '\\\\upsilon' : 'υ',\n    '\\\\phi'     : 'ϕ', '\\\\chi'     : 'χ', '\\\\psi'     : 'ψ', '\\\\omega'   : 'ω',\n    '\\\\vartheta'   : 'ϑ', '\\\\varchi'     : 'ϰ', '\\\\varphi'     : 'φ', '\\\\varepsilon' : 'ε',\n    '\\\\varrho'     : 'ϱ', '\\\\varsigma'   : 'ς',\n}\n\nconst latex_symbols = {\n    \"textfractionsolidus\" : \"⁄\",\n    \"leftrightsquigarrow\" : \"↭\",\n    \"textpertenthousand\" : \"‱\",\n    \"blacktriangleright\" : \"▸\",\n    \"blacktriangledown\" : \"▾\",\n    \"blacktriangleleft\" : \"◂\",\n    \"twoheadrightarrow\" : \"↠\",\n    \"leftrightharpoons\" : \"⇋\",\n    \"rightleftharpoons\" : \"⇌\",\n    \"textreferencemark\" : \"※\",\n    \"circlearrowright\" : \"↻\",\n    \"rightrightarrows\" : \"⇉\",\n    \"vartriangleright\" : \"⊳\",\n    \"textordmasculine\" : \"º\",\n    \"textvisiblespace\" : \"␣\",\n    \"twoheadleftarrow\" : \"↞\",\n    \"downharpoonright\" : \"⇂\",\n    \"ntrianglerighteq\" : \"⋭\",\n    \"rightharpoondown\" : \"⇁\",\n    \"textperthousand\" : \"‰\",\n    \"leftrightarrows\" : \"⇆\",\n    \"textmusicalnote\" : \"♪\",\n    \"nleftrightarrow\" : \"↮\",\n    \"rightleftarrows\" : \"⇄\",\n    \"bigtriangledown\" : \"▽\",\n    \"textordfeminine\" : \"ª\",\n    \"ntrianglelefteq\" : \"⋬\",\n    \"rightthreetimes\" : \"⋌\",\n    \"trianglerighteq\" : \"⊵\",\n    \"vartriangleleft\" : \"⊲\",\n    \"rightsquigarrow\" : \"⇝\",\n    \"downharpoonleft\" : \"⇃\",\n    \"curvearrowright\" : \"↷\",\n    \"circlearrowleft\" : \"↺\",\n    \"leftharpoondown\" : \"↽\",\n    \"nLeftrightarrow\" : \"⇎\",\n    \"curvearrowleft\" : \"↶\",\n    \"guilsinglright\" : \"›\",\n    \"leftthreetimes\" : \"⋋\",\n    \"leftrightarrow\" : \"↔\",\n    \"rightharpoonup\" : \"⇀\",\n    \"guillemotright\" : \"»\",\n    \"downdownarrows\" : \"⇊\",\n    \"hookrightarrow\" : \"↪\",\n    \"dashrightarrow\" : \"⇢\",\n    \"leftleftarrows\" : \"⇇\",\n    \"trianglelefteq\" : \"⊴\",\n    \"ntriangleright\" : \"⋫\",\n    \"doublebarwedge\" : \"⌆\",\n    \"upharpoonright\" : \"↾\",\n    \"rightarrowtail\" : \"↣\",\n    \"looparrowright\" : \"↬\",\n    \"Leftrightarrow\" : \"⇔\",\n    \"sphericalangle\" : \"∢\",\n    \"divideontimes\" : \"⋇\",\n    \"measuredangle\" : \"∡\",\n    \"blacktriangle\" : \"▴\",\n    \"ntriangleleft\" : \"⋪\",\n    \"mathchar1356\" : \"⁁\",\n    \"texttrademark\" : \"™\",\n    \"mathchar2208\" : \"⌖\",\n    \"triangleright\" : \"▹\",\n    \"leftarrowtail\" : \"↢\",\n    \"guilsinglleft\" : \"‹\",\n    \"upharpoonleft\" : \"↿\",\n    \"mathbb{gamma}\" : \"ℽ\",\n    \"fallingdotseq\" : \"≒\",\n    \"looparrowleft\" : \"↫\",\n    \"textbrokenbar\" : \"¦\",\n    \"hookleftarrow\" : \"↩\",\n    \"smallsetminus\" : \"﹨\",\n    \"dashleftarrow\" : \"⇠\",\n    \"guillemotleft\" : \"«\",\n    \"leftharpoonup\" : \"↼\",\n    \"mathbb{Gamma}\" : \"ℾ\",\n    \"bigtriangleup\" : \"△\",\n    \"textcircledP\" : \"℗\",\n    \"risingdotseq\" : \"≓\",\n    \"triangleleft\" : \"◃\",\n    \"mathsterling\" : \"£\",\n    \"textcurrency\" : \"¤\",\n    \"triangledown\" : \"▿\",\n    \"blacklozenge\" : \"\",\n    \"sfrac{5}{6}\" : \"⅚\",\n    \"preccurlyeq\" : \"≼\",\n    \"Rrightarrow\" : \"⇛\",\n    \"circledcirc\" : \"⊚\",\n    \"nRightarrow\" : \"⇏\",\n    \"sfrac{3}{8}\" : \"⅜\",\n    \"sfrac{1}{3}\" : \"⅓\",\n    \"sfrac{2}{5}\" : \"⅖\",\n    \"vartriangle\" : \"▵\",\n    \"Updownarrow\" : \"⇕\",\n    \"nrightarrow\" : \"↛\",\n    \"sfrac{1}{2}\" : \"½\",\n    \"sfrac{3}{5}\" : \"⅗\",\n    \"succcurlyeq\" : \"≽\",\n    \"sfrac{4}{5}\" : \"⅘\",\n    \"diamondsuit\" : \"♦\",\n    \"sfrac{1}{6}\" : \"⅙\",\n    \"curlyeqsucc\" : \"⋟\",\n    \"blacksquare\" : \"▪\",\n    \"curlyeqprec\" : \"⋞\",\n    \"sfrac{1}{8}\" : \"⅛\",\n    \"sfrac{7}{8}\" : \"⅞\",\n    \"sfrac{1}{5}\" : \"⅕\",\n    \"sfrac{2}{3}\" : \"⅔\",\n    \"updownarrow\" : \"↕\",\n    \"backepsilon\" : \"∍\",\n    \"circleddash\" : \"⊝\",\n    \"eqslantless\" : \"⋜\",\n    \"sfrac{3}{4}\" : \"¾\",\n    \"sfrac{5}{8}\" : \"⅝\",\n    \"sfrac{1}{4}\" : \"¼\",\n    \"mathbb{Pi}\" : \"ℿ\",\n    \"mathcal{M}\" : \"ℳ\",\n    \"mathcal{o}\t\" : \"ℴ\",\n    \"mathcal{O}\t\" : \"𝒪\",\n    \"nsupseteqq\" : \"⊉\",\n    \"mathcal{B}\" : \"ℬ\",\n    \"textrecipe\" : \"℞\",\n    \"nsubseteqq\" : \"⊈\",\n    \"subsetneqq\" : \"⊊\",\n    \"mathcal{I}\" : \"ℑ\",\n    \"upuparrows\" : \"⇈\",\n    \"mathcal{e}\" : \"ℯ\",\n    \"mathcal{L}\" : \"ℒ\",\n    \"nleftarrow\" : \"↚\",\n    \"mathcal{H}\" : \"ℋ\",\n    \"mathcal{E}\" : \"ℰ\",\n    \"eqslantgtr\" : \"⋝\",\n    \"curlywedge\" : \"⋏\",\n    \"varepsilon\" : \"ε\",\n    \"supsetneqq\" : \"⊋\",\n    \"rightarrow\" : \"→\",\n    \"mathcal{R}\" : \"ℛ\",\n    \"sqsubseteq\" : \"⊑\",\n    \"mathcal{g}\" : \"ℊ\",\n    \"sqsupseteq\" : \"⊒\",\n    \"complement\" : \"∁\",\n    \"Rightarrow\" : \"⇒\",\n    \"gtreqqless\" : \"⋛\",\n    \"lesseqqgtr\" : \"⋚\",\n    \"circledast\" : \"⊛\",\n    \"nLeftarrow\" : \"⇍\",\n    \"Lleftarrow\" : \"⇚\",\n    \"varnothing\" : \"∅\",\n    \"mathcal{N}\" : \"𝒩\",\n    \"Leftarrow\" : \"⇐\",\n    \"gvertneqq\" : \"≩\",\n    \"mathbb{C}\" : \"ℂ\",\n    \"supsetneq\" : \"⊋\",\n    \"leftarrow\" : \"←\",\n    \"nleqslant\" : \"≰\",\n    \"mathbb{Q}\" : \"ℚ\",\n    \"mathbb{Z}\" : \"ℤ\",\n    \"llbracket\" : \"〚\",\n    \"mathbb{H}\" : \"ℍ\",\n    \"spadesuit\" : \"♠\",\n    \"mathit{o}\" : \"ℴ\",\n    \"mathbb{P}\" : \"ℙ\",\n    \"rrbracket\" : \"〛\",\n    \"supseteqq\" : \"⊇\",\n    \"copyright\" : \"©\",\n    \"textsc{k}\" : \"ĸ\",\n    \"gtreqless\" : \"⋛\",\n    \"mathbb{j}\" : \"ⅉ\",\n    \"pitchfork\" : \"⋔\",\n    \"estimated\" : \"℮\",\n    \"ngeqslant\" : \"≱\",\n    \"mathbb{e}\" : \"ⅇ\",\n    \"therefore\" : \"∴\",\n    \"triangleq\" : \"≜\",\n    \"varpropto\" : \"∝\",\n    \"subsetneq\" : \"⊊\",\n    \"heartsuit\" : \"♥\",\n    \"mathbb{d}\" : \"ⅆ\",\n    \"lvertneqq\" : \"≨\",\n    \"checkmark\" : \"✓\",\n    \"nparallel\" : \"∦\",\n    \"mathbb{R}\" : \"ℝ\",\n    \"lesseqgtr\" : \"⋚\",\n    \"downarrow\" : \"↓\",\n    \"mathbb{D}\" : \"ⅅ\",\n    \"mathbb{i}\" : \"ⅈ\",\n    \"backsimeq\" : \"⋍\",\n    \"mathbb{N}\" : \"ℕ\",\n    \"Downarrow\" : \"⇓\",\n    \"subseteqq\" : \"⊆\",\n    \"setminus\" : \"∖\",\n    \"succnsim\" : \"⋩\",\n    \"doteqdot\" : \"≑\",\n    \"clubsuit\" : \"♣\",\n    \"emptyset\" : \"∅\",\n    \"sqsupset\" : \"⊐\",\n    \"fbox{~~}\" : \"▭\",\n    \"curlyvee\" : \"⋎\",\n    \"varkappa\" : \"ϰ\",\n    \"llcorner\" : \"⌞\",\n    \"varsigma\" : \"ς\",\n    \"approxeq\" : \"≊\",\n    \"backcong\" : \"≌\",\n    \"supseteq\" : \"⊇\",\n    \"circledS\" : \"Ⓢ\",\n    \"circledR\" : \"®\",\n    \"textcent\" : \"¢\",\n    \"urcorner\" : \"⌝\",\n    \"lrcorner\" : \"⌟\",\n    \"boxminus\" : \"⊟\",\n    \"texteuro\" : \"€\",\n    \"vartheta\" : \"ϑ\",\n    \"barwedge\" : \"⊼\",\n    \"ding{86}\" : \"✶\",\n    \"sqsubset\" : \"⊏\",\n    \"subseteq\" : \"⊆\",\n    \"intercal\" : \"⊺\",\n    \"ding{73}\" : \"☆\",\n    \"ulcorner\" : \"⌜\",\n    \"recorder\" : \"⌕\",\n    \"precnsim\" : \"⋨\",\n    \"parallel\" : \"∥\",\n    \"boxtimes\" : \"⊠\",\n    \"ding{55}\" : \"✗\",\n    \"multimap\" : \"⊸\",\n    \"maltese\" : \"✠\",\n    \"nearrow\" : \"↗\",\n    \"swarrow\" : \"↙\",\n    \"lozenge\" : \"◊\",\n    \"sqrt[3]\" : \"∛\",\n    \"succsim\" : \"≿\",\n    \"dotplus\" : \"∔\",\n    \"tilde{}\" : \"~\",\n    \"check{}\" : \"ˇ\",\n    \"lessgtr\" : \"≶\",\n    \"Upsilon\" : \"ϒ\",\n    \"Cdprime\" : \"Ъ\",\n    \"gtrless\" : \"≷\",\n    \"backsim\" : \"∽\",\n    \"nexists\" : \"∄\",\n    \"searrow\" : \"↘\",\n    \"lessdot\" : \"⋖\",\n    \"boxplus\" : \"⊞\",\n    \"upsilon\" : \"υ\",\n    \"epsilon\" : \"ε\",\n    \"diamond\" : \"⋄\",\n    \"bigstar\" : \"★\",\n    \"ddagger\" : \"‡\",\n    \"cdprime\" : \"ъ\",\n    \"Uparrow\" : \"⇑\",\n    \"sqrt[4]\" : \"∜\",\n    \"between\" : \"≬\",\n    \"sqangle\" : \"∟\",\n    \"digamma\" : \"Ϝ\",\n    \"uparrow\" : \"↑\",\n    \"nwarrow\" : \"↖\",\n    \"precsim\" : \"≾\",\n    \"breve{}\" : \"˘\",\n    \"because\" : \"∵\",\n    \"bigcirc\" : \"◯\",\n    \"acute{}\" : \"´\",\n    \"grave{}\" : \"`\",\n    \"lesssim\" : \"≲\",\n    \"partial\" : \"∂\",\n    \"natural\" : \"♮\",\n    \"supset\" : \"⊃\",\n    \"hstrok\" : \"ħ\",\n    \"Tstrok\" : \"Ŧ\",\n    \"coprod\" : \"∐\",\n    \"models\" : \"⊧\",\n    \"otimes\" : \"⊗\",\n    \"degree\" : \"°\",\n    \"gtrdot\" : \"⋗\",\n    \"preceq\" : \"≼\",\n    \"Lambda\" : \"Λ\",\n    \"lambda\" : \"λ\",\n    \"cprime\" : \"ь\",\n    \"varrho\" : \"ϱ\",\n    \"Bumpeq\" : \"≎\",\n    \"hybull\" : \"⁃\",\n    \"lmidot\" : \"ŀ\",\n    \"nvdash\" : \"⊬\",\n    \"lbrace\" : \"{\",\n    \"bullet\" : \"•\",\n    \"varphi\" : \"φ\",\n    \"bumpeq\" : \"≏\",\n    \"ddot{}\" : \"¨\",\n    \"Lmidot\" : \"Ŀ\",\n    \"Cprime\" : \"Ь\",\n    \"female\" : \"♀\",\n    \"rtimes\" : \"⋊\",\n    \"gtrsim\" : \"≳\",\n    \"mapsto\" : \"↦\",\n    \"daleth\" : \"ℸ\",\n    \"square\" : \"■\",\n    \"nVDash\" : \"⊯\",\n    \"rangle\" : \"⟩\",\n    \"tstrok\" : \"ŧ\",\n    \"oslash\" : \"⊘\",\n    \"ltimes\" : \"⋉\",\n    \"lfloor\" : \"⌊\",\n    \"marker\" : \"▮\",\n    \"Subset\" : \"⋐\",\n    \"Vvdash\" : \"⊪\",\n    \"propto\" : \"∝\",\n    \"Hstrok\" : \"Ħ\",\n    \"dlcrop\" : \"⌍\",\n    \"forall\" : \"∀\",\n    \"nVdash\" : \"⊮\",\n    \"Supset\" : \"⋑\",\n    \"langle\" : \"⟨\",\n    \"ominus\" : \"⊖\",\n    \"rfloor\" : \"⌋\",\n    \"circeq\" : \"≗\",\n    \"eqcirc\" : \"≖\",\n    \"drcrop\" : \"⌌\",\n    \"veebar\" : \"⊻\",\n    \"ulcrop\" : \"⌏\",\n    \"nvDash\" : \"⊭\",\n    \"urcrop\" : \"⌎\",\n    \"exists\" : \"∃\",\n    \"approx\" : \"≈\",\n    \"dagger\" : \"†\",\n    \"boxdot\" : \"⊡\",\n    \"succeq\" : \"≽\",\n    \"bowtie\" : \"⋈\",\n    \"subset\" : \"⊂\",\n    \"notin\" : \"∉\",\n    \"Sigma\" : \"Σ\",\n    \"Omega\" : \"Ω\",\n    \"nabla\" : \"∇\",\n    \"colon\" : \":\",\n    \"boxHu\" : \"╧\",\n    \"boxHd\" : \"╤\",\n    \"aleph\" : \"ℵ\",\n    \"gnsim\" : \"⋧\",\n    \"boxHU\" : \"╩\",\n    \"boxHD\" : \"╦\",\n    \"equiv\" : \"≡\",\n    \"lneqq\" : \"≨\",\n    \"alpha\" : \"α\",\n    \"amalg\" : \"∐\",\n    \"boxhU\" : \"╨\",\n    \"boxhD\" : \"╥\",\n    \"uplus\" : \"⊎\",\n    \"boxhu\" : \"┴\",\n    \"kappa\" : \"κ\",\n    \"sigma\" : \"σ\",\n    \"boxDL\" : \"╗\",\n    \"Theta\" : \"Θ\",\n    \"Vdash\" : \"⊩\",\n    \"boxDR\" : \"╔\",\n    \"boxDl\" : \"╖\",\n    \"sqcap\" : \"⊓\",\n    \"boxDr\" : \"╓\",\n    \"bar{}\" : \"¯\",\n    \"dashv\" : \"⊣\",\n    \"vDash\" : \"⊨\",\n    \"boxdl\" : \"┐\",\n    \"boxVl\" : \"╢\",\n    \"boxVh\" : \"╫\",\n    \"boxVr\" : \"╟\",\n    \"boxdr\" : \"┌\",\n    \"boxdL\" : \"╕\",\n    \"boxVL\" : \"╣\",\n    \"boxVH\" : \"╬\",\n    \"boxVR\" : \"╠\",\n    \"boxdR\" : \"╒\",\n    \"theta\" : \"θ\",\n    \"lhblk\" : \"▄\",\n    \"uhblk\" : \"▀\",\n    \"ldotp\" : \".\",\n    \"ldots\" : \"…\",\n    \"boxvL\" : \"╡\",\n    \"boxvH\" : \"╪\",\n    \"boxvR\" : \"╞\",\n    \"boxvl\" : \"┤\",\n    \"boxvh\" : \"┼\",\n    \"boxvr\" : \"├\",\n    \"Delta\" : \"Δ\",\n    \"boxUR\" : \"╚\",\n    \"boxUL\" : \"╝\",\n    \"oplus\" : \"⊕\",\n    \"boxUr\" : \"╙\",\n    \"boxUl\" : \"╜\",\n    \"doteq\" : \"≐\",\n    \"happy\" : \"㋡\",\n    \"varpi\" : \"ϖ\",\n    \"smile\" : \"☺\",\n    \"boxul\" : \"┘\",\n    \"simeq\" : \"≃\",\n    \"boxuR\" : \"╘\",\n    \"boxuL\" : \"╛\",\n    \"boxhd\" : \"┬\",\n    \"gimel\" : \"ℷ\",\n    \"Gamma\" : \"Γ\",\n    \"lnsim\" : \"⋦\",\n    \"sqcup\" : \"⊔\",\n    \"omega\" : \"ω\",\n    \"sharp\" : \"♯\",\n    \"times\" : \"×\",\n    \"block\" : \"█\",\n    \"hat{}\" : \"^\",\n    \"wedge\" : \"∧\",\n    \"vdash\" : \"⊢\",\n    \"angle\" : \"∠\",\n    \"infty\" : \"∞\",\n    \"gamma\" : \"γ\",\n    \"asymp\" : \"≍\",\n    \"rceil\" : \"⌉\",\n    \"dot{}\" : \"˙\",\n    \"lceil\" : \"⌈\",\n    \"delta\" : \"δ\",\n    \"gneqq\" : \"≩\",\n    \"frown\" : \"⌢\",\n    \"phone\" : \"☎\",\n    \"vdots\" : \"⋮\",\n    \"boxr\" : \"└\",\n    \"k{i}\" : \"į\",\n    \"`{I}\" : \"Ì\",\n    \"perp\" : \"⊥\",\n    \"\\\"{o}\" : \"ö\",\n    \"={I}\" : \"Ī\",\n    \"`{a}\" : \"à\",\n    \"v{T}\" : \"Ť\",\n    \"surd\" : \"√\",\n    \"H{O}\" : \"Ő\",\n    \"vert\" : \"|\",\n    \"k{I}\" : \"Į\",\n    \"\\\"{y}\" : \"ÿ\",\n    \"\\\"{O}\" : \"Ö\",\n    \"u{u}\" : \"ў\",\n    \"u{G}\" : \"Ğ\",\n    \".{E}\" : \"Ė\",\n    \".{z}\" : \"ż\",\n    \"v{t}\" : \"ť\",\n    \"prec\" : \"≺\",\n    \"H{o}\" : \"ő\",\n    \"mldr\" : \"…\",\n    \"cong\" : \"≅\",\n    \".{e}\" : \"ė\",\n    \"star\" : \"*\",\n    \".{Z}\" : \"Ż\",\n    \"geqq\" : \"≧\",\n    \"cdot\" : \"⋅\",\n    \"cdots\" : \"…\",\n    \"`{U}\" : \"Ù\",\n    \"v{L}\" : \"Ľ\",\n    \"c{s}\" : \"ş\",\n    \"~{A}\" : \"Ã\",\n    \"Vert\" : \"‖\",\n    \"k{e}\" : \"ę\",\n    \"lnot\" : \"¬\",\n    \"leqq\" : \"≦\",\n    \"beta\" : \"β\",\n    \"beth\" : \"ℶ\",\n    \"~{n}\" : \"ñ\",\n    \"u{i}\" : \"й\",\n    \"c{S}\" : \"Ş\",\n    \"c{N}\" : \"Ņ\",\n    \"H{u}\" : \"ű\",\n    \"v{n}\" : \"ň\",\n    \"={U}\" : \"Ū\",\n    \"~{O}\" : \"Õ\",\n    \"v{E}\" : \"Ě\",\n    \"H{U}\" : \"Ű\",\n    \"v{N}\" : \"Ň\",\n    \"prod\" : \"∏\",\n    \"v{s}\" : \"š\",\n    \"\\\"{U}\" : \"Ü\",\n    \"c{n}\" : \"ņ\",\n    \"k{U}\" : \"Ų\",\n    \"c{R}\" : \"Ŗ\",\n    \"~{o}\" : \"õ\",\n    \"v{e}\" : \"ě\",\n    \"v{S}\" : \"Š\",\n    \"u{A}\" : \"Ă\",\n    \"circ\" : \"∘\",\n    \"\\\"{u}\" : \"ü\",\n    \"flat\" : \"♭\",\n    \"v{z}\" : \"ž\",\n    \"r{U}\" : \"Ů\",\n    \"`{O}\" : \"Ò\",\n    \"={u}\" : \"ū\",\n    \"oint\" : \"∮\",\n    \"c{K}\" : \"Ķ\",\n    \"k{u}\" : \"ų\",\n    \"not<\" : \"≮\",\n    \"not>\" : \"≯\",\n    \"`{o}\" : \"ò\",\n    \"\\\"{I}\" : \"Ï\",\n    \"v{D}\" : \"Ď\",\n    \".{G}\" : \"Ġ\",\n    \"r{u}\" : \"ů\",\n    \"not=\" : \"≠\",\n    \"`{u}\" : \"ù\",\n    \"v{c}\" : \"č\",\n    \"c{k}\" : \"ķ\",\n    \".{g}\" : \"ġ\",\n    \"odot\" : \"⊙\",\n    \"`{e}\" : \"э\",\n    \"c{T}\" : \"Ţ\",\n    \"v{d}\" : \"ď\",\n    \"\\\"{e}\" : \"ё\",\n    \"v{R}\" : \"Ř\",\n    \"k{a}\" : \"ą\",\n    \"nldr\" : \"‥\",\n    \"`{A}\" : \"À\",\n    \"~{N}\" : \"Ñ\",\n    \"nmid\" : \"∤\",\n    \".{C}\" : \"Ċ\",\n    \"zeta\" : \"ζ\",\n    \"~{u}\" : \"ũ\",\n    \"`{E}\" : \"Э\",\n    \"~{a}\" : \"ã\",\n    \"c{t}\" : \"ţ\",\n    \"={o}\" : \"ō\",\n    \"v{r}\" : \"ř\",\n    \"={A}\" : \"Ā\",\n    \".{c}\" : \"ċ\",\n    \"~{U}\" : \"Ũ\",\n    \"k{A}\" : \"Ą\",\n    \"\\\"{a}\" : \"ä\",\n    \"u{U}\" : \"Ў\",\n    \"iota\" : \"ι\",\n    \"={O}\" : \"Ō\",\n    \"c{C}\" : \"Ç\",\n    \"gneq\" : \"≩\",\n    \"boxH\" : \"═\",\n    \"hbar\" : \"ℏ\",\n    \"\\\"{A}\" : \"Ä\",\n    \"boxv\" : \"│\",\n    \"boxh\" : \"─\",\n    \"male\" : \"♂\",\n    \"sqrt\" : \"√\",\n    \"succ\" : \"≻\",\n    \"c{c}\" : \"ç\",\n    \"v{l}\" : \"ľ\",\n    \"u{a}\" : \"ă\",\n    \"v{Z}\" : \"Ž\",\n    \"c{G}\" : \"Ģ\",\n    \"v{C}\" : \"Č\",\n    \"lneq\" : \"≨\",\n    \"{E}\" : \"Ё\",\n    \"={a}\" : \"ā\",\n    \"c{l}\" : \"ļ\",\n    \"={E}\" : \"Ē\",\n    \"boxV\" : \"║\",\n    \"u{g}\" : \"ğ\",\n    \"u{I}\" : \"Й\",\n    \"c{L}\" : \"Ļ\",\n    \"k{E}\" : \"Ę\",\n    \".{I}\" : \"İ\",\n    \"~{I}\" : \"Ĩ\",\n    \"c{r}\" : \"ŗ\",\n    \"{Y}\" : \"Ÿ\",\n    \"={e}\" : \"ē\",\n    \"leq\" : \"≤\",\n    \"Cup\" : \"⋓\",\n    \"Psi\" : \"Ψ\",\n    \"neq\" : \"≠\",\n    \"k{}\" : \"˛\",\n    \"={}\" : \"‾\",\n    \"H{}\" : \"˝\",\n    \"cup\" : \"∪\",\n    \"geq\" : \"≥\",\n    \"mho\" : \"℧\",\n    \"Dzh\" : \"Џ\",\n    \"cap\" : \"∩\",\n    \"bot\" : \"⊥\",\n    \"psi\" : \"ψ\",\n    \"chi\" : \"χ\",\n    \"c{}\" : \"¸\",\n    \"Phi\" : \"Φ\",\n    \"ast\" : \"*\",\n    \"ell\" : \"ℓ\",\n    \"top\" : \"⊤\",\n    \"lll\" : \"⋘\",\n    \"tau\" : \"τ\",\n    \"Cap\" : \"⋒\",\n    \"sad\" : \"☹\",\n    \"iff\" : \"⇔\",\n    \"eta\" : \"η\",\n    \"eth\" : \"ð\",\n    \"d{\" : \"\ṭ\",\n    \"rho\" : \"ρ\",\n    \"dzh\" : \"џ\",\n    \"div\" : \"÷\",\n    \"phi\" : \"ϕ\",\n    \"Rsh\" : \"↱\",\n    \"vee\" : \"∨\",\n    \"b{}\" : \"ˍ\",\n    \"t{\" : \"\t͡\",\n    \"int\" : \"∫\",\n    \"sim\" : \"∼\",\n    \"r{}\" : \"˚\",\n    \"Lsh\" : \"↰\",\n    \"yen\" : \"¥\",\n    \"ggg\" : \"⋙\",\n    \"mid\" : \"∣\",\n    \"sum\" : \"∑\",\n    \"neg\" : \"¬\",\n    \"Dz\" : \"Ѕ\",\n    \"Re\" : \"ℜ\",\n    \"oe\" : \"œ\",\n    \"DH\" : \"Ð\",\n    \"ll\" : \"≪\",\n    \"ng\" : \"ŋ\",\n    \"wr\" : \"≀\",\n    \"wp\" : \"℘\",\n    \"=I\" : \"І\",\n    \":)\" : \"☺\",\n    \":(\" : \"☹\",\n    \"AE\" : \"Æ\",\n    \"AA\" : \"Å\",\n    \"ss\" : \"ß\",\n    \"dz\" : \"ѕ\",\n    \"ae\" : \"æ\",\n    \"aa\" : \"å\",\n    \"th\" : \"þ\",\n    \"to\" : \"→\",\n    \"Pi\" : \"Π\",\n    \"mp\" : \"∓\",\n    \"Im\" : \"ℑ\",\n    \"pm\" : \"±\",\n    \"pi\" : \"π\",\n    \"\\\"I\" : \"Ї\",\n    \"in\" : \"∈\",\n    \"ni\" : \"∋\",\n    \"ne\" : \"≠\",\n    \"TH\" : \"Þ\",\n    \"Xi\" : \"Ξ\",\n    \"nu\" : \"ν\",\n    \"NG\" : \"Ŋ\",\n    \":G\" : \"㋡\",\n    \"xi\" : \"ξ\",\n    \"OE\" : \"Œ\",\n    \"gg\" : \"≫\",\n    \"DJ\" : \"Đ\",\n    \"=e\" : \"є\",\n    \"=E\" : \"Є\",\n    \"mu\" : \"μ\",\n    \"dj\" : \"đ\",\n    // \"&\" : \"&\",\n    // \"$\" : \"$\",\n    // \"%\" : \"%\",\n    // \"#\" : \"#\",\n    // \"-\" : \"­\",\n    \"S\" : \"§\",\n    \"P\" : \"¶\",\n    \"O\" : \"Ø\",\n    \"L\" : \"Ł\",\n    // \"}\" : \"}\",\n    \"o\" : \"ø\",\n    \"l\" : \"ł\",\n    \"h\" : \"ℎ\",\n    \"i\" : \"ℹ\",\n    // \"-\" : \"−\",\n    \"'{Y}\" : \"Ý\",\n    \"'{y}\" : \"ý\",\n    \"'{L}\" : \"Ĺ\",\n    \"'{e}\" : \"é\",\n    \"'{l}\" : \"ĺ\",\n    \"'{s}\" : \"ś\",\n    \"'{z}\" : \"ź\",\n    \"'{E}\" : \"É\",\n    \"'{S}\" : \"Ś\",\n    \"'{Z}\" : \"Ź\",\n    \"'{R}\" : \"Ŕ\",\n    \"'{A}\" : \"Á\",\n    \"'{N}\" : \"Ń\",\n    \"'{I}\" : \"Í\",\n    \"'{n}\" : \"ń\",\n    \"'{c}\" : \"ć\",\n    \"'{u}\" : \"ú\",\n    \"'{C}\" : \"Ć\",\n    \"'{o}\" : \"ó\",\n    \"'{a}\" : \"á\",\n    \"'{O}\" : \"Ó\",\n    \"'{g}\" : \"ǵ\",\n    \"'{r}\" : \"ŕ\",\n    \"'{U}\" : \"Ú\",\n    \"'G\" : \"Ѓ\",\n    \"'C\" : \"Ћ\",\n    \"'K\" : \"Ќ\",\n    \"'k\" : \"ќ\",\n    \"'c\" : \"ћ\",\n    \"'g\" : \"ѓ\",\n}\n\n\nexport function str_latex_to_unicode(str : string){\n    str = str;\n    for (let key in latex_greek){\n        str = str.replaceAll(key, (latex_greek as any)[key]);\n    }\n    for (let key in latex_symbols){\n        str = str.replaceAll('\\\\'+key, (latex_symbols as any)[key]);\n    }\n    return str;\n}\nexport function str_to_mathematical_italic(str : string) {\n    return [...str_latex_to_unicode(str)]\n        .map(c => (unicode_mathematical_italic as any)[c] || c).join('');\n}\nexport function str_to_normal_from_mathematical_italic(str : string) {\n    return [...str]\n        .map(c => reversed_unicode_mathematical_italic[c] || c).join('');\n}\n","import { Diagram, DiagramType, DiagramStyle, TextData, DEFAULT_FONTSIZE } from \"./diagram.js\";\nimport { tab_color, get_color } from \"./color_palette.js\";\nimport { to_degree, expand_directional_value } from \"./utils.js\";\nimport { str_to_mathematical_italic, str_to_normal_from_mathematical_italic } from './unicode_utils.js'\nimport { TAG } from \"./tag_names.js\";\n\n// TODO : add guard for the dictionary key\n// since the implementation is using `for (let stylename in style)` without checking\n// if the correct key is in the dictionary, it can lead to unintended behavior\n// for example, `font-size` could be defined in default_text_diagram_style\n// and will shadow the `font-size` in default_diagram_style\n\nexport const default_diagram_style : DiagramStyle = {\n    \"fill\"             : \"none\",\n    \"stroke\"           : \"black\",\n    \"stroke-width\"     : \"1\",\n    \"stroke-linecap\"   : \"butt\",\n    \"stroke-dasharray\" : \"none\",\n    \"stroke-linejoin\"  : \"round\",\n    \"vector-effect\"    : \"non-scaling-stroke\",\n    \"opacity\"          : \"1\",\n}\nexport const _init_default_diagram_style : DiagramStyle = {...default_diagram_style}\n\nexport const default_text_diagram_style : DiagramStyle = {\n    \"fill\"             : \"black\",\n    \"stroke\"           : \"none\",\n    \"stroke-width\"     : \"1\",\n    \"stroke-linecap\"   : \"butt\",\n    \"stroke-dasharray\" : \"none\",\n    \"stroke-linejoin\"  : \"round\",\n    \"vector-effect\"    : \"non-scaling-stroke\",\n    \"opacity\"          : \"1\",\n}\nexport const _init_default_text_diagram_style : DiagramStyle = {...default_text_diagram_style}\n\nexport const default_textdata : TextData = {\n    \"text\"             : \"\",\n    \"font-family\"      : \"Latin Modern Math, sans-serif\",\n    \"font-size\"        : DEFAULT_FONTSIZE,\n    \"font-weight\"      : \"normal\",\n    \"text-anchor\"      : \"middle\",\n    \"dy\"               : \"0.25em\",\n    \"angle\"            : \"0\",\n    \"font-style\"       : \"normal\",\n    \"font-scale\"       : \"auto\",\n}\nexport const _init_default_textdata : TextData = {...default_textdata}\n\nexport function reset_default_styles() : void {\n    for (let s in default_diagram_style) \n        (default_diagram_style as any)[s] = (_init_default_diagram_style as any)[s];\n    for (let s in default_text_diagram_style)\n        (default_text_diagram_style as any)[s] = (_init_default_text_diagram_style as any)[s];\n    for (let s in default_textdata)\n        (default_textdata as any)[s] = (_init_default_textdata as any)[s];\n}\n\nfunction draw_polygon(svgelement : SVGSVGElement, diagram : Diagram, svgtag? : string) : void {\n    // get properties\n    let style = {...default_diagram_style, ...diagram.style}; // use default if not defined\n    style.fill = get_color(style.fill as string, tab_color);\n    style.stroke = get_color(style.stroke as string, tab_color);\n\n    // draw svg\n    let polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    for (let stylename in style) {\n        polygon.style[stylename as any] = (style as any)[stylename as any];\n    }\n    if (svgtag != undefined) polygon.setAttribute(\"_dg_tag\", svgtag);\n    // polygon.style.fill = color_fill;\n    // polygon.style.stroke = color_stroke;\n    // use tab_color color palette\n\n    svgelement.appendChild(polygon);\n    if (diagram.path != undefined) {\n        for (let i = 0; i < diagram.path.points.length; i++) {\n            let p = diagram.path.points[i];\n            var point = svgelement.createSVGPoint();\n            point.x =  p.x;\n            point.y = -p.y;\n            polygon.points.appendItem(point);\n        }\n    }\n}\n\n\nfunction draw_curve(svgelement : SVGSVGElement, diagram : Diagram, svgtag? : string) : void {\n    // get properties\n    let style = {...default_diagram_style, ...diagram.style}; // use default if not defined\n    style.fill = \"none\";\n    style.stroke = get_color(style.stroke as string, tab_color);\n\n    // draw svg\n    let polyline = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\");\n    for (let stylename in style) {\n        polyline.style[stylename as any] = (style as any)[stylename as any];\n    }\n    if (svgtag != undefined) polyline.setAttribute(\"_dg_tag\", svgtag);\n\n    svgelement.appendChild(polyline);\n    if (diagram.path != undefined) {\n        for (let i = 0; i < diagram.path.points.length; i++) {\n            let p = diagram.path.points[i];\n            var point = svgelement.createSVGPoint();\n            point.x =  p.x;\n            point.y = -p.y;\n            polyline.points.appendItem(point);\n        }\n    }\n}\n\n\nfunction is_dataURL(url : string) : boolean {\n    // Regular expression to check for data URL\n    const dataUrlPattern = /^data:image\\/(png|jpeg|jpg|gif|svg\\+xml);base64,/;\n    return dataUrlPattern.test(url);\n}\n\nconst _IMAGE_DATAURL_CACHE_MAP = new Map<string, string|undefined>();\n\n/**\n * Convert image href to data url\n * This is necessary so that the image diagram can be downloaded as png\n */\nfunction set_image_href_dataURL(img : SVGImageElement, src : string) : void{\n    // if it is already a dataURL, just set it\n    if (is_dataURL(src)) {\n        img.setAttribute(\"href\", src);\n        img.setAttribute(\"xlink:href\", src);\n        return;\n    }\n    \n    // if it's already cached, just set it\n    if (_IMAGE_DATAURL_CACHE_MAP.has(src)){\n        const dataURL = _IMAGE_DATAURL_CACHE_MAP.get(src)!;\n        if (!dataURL) return; \n        // dataURL can be undefined, indicating it's still loading or\n        // the image is not found\n        img.setAttribute(\"href\", dataURL);\n        img.setAttribute(\"xlink:href\", dataURL);\n        return;\n    }\n    \n    // _IMAGE_DATAURL_CACHE_MAP.set(src, undefined);\n    let canvas    = document.createElement(\"canvas\");\n    let ctx       = canvas.getContext('2d');\n\n    let base_image = new Image();\n    base_image.crossOrigin = \"anonymous\";\n    base_image.onload = () => {\n        canvas.height = base_image.height;\n        canvas.width  = base_image.width;\n        ctx?.drawImage(base_image, 0, 0);\n\n        // NOTE : we need to set both href and xlink:href for compatibility reason\n        // most browser already deprecate xlink:href because of SVG 2.0\n        // but other browser and image viewer/editor still only support xlink:href\n        // might be removed in the future\n        const dataURL = canvas.toDataURL(\"image/png\");\n        img.setAttribute(\"href\", dataURL);\n        img.setAttribute(\"xlink:href\", dataURL);\n        _IMAGE_DATAURL_CACHE_MAP.set(src, dataURL);\n        canvas.remove();\n    }\n    base_image.src = src;\n\n}\n\n/**\n * if `embed_image` is `true`, the image will be embedded as dataURL\n * this allow the image to be downloaded as SVG with the image embedded\n */\nfunction draw_image(svgelement : SVGSVGElement, diagram : Diagram, embed_image : boolean, svgtag? : string) : void {\n    let image = document.createElementNS(\"http://www.w3.org/2000/svg\", \"image\");\n    image.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n    if (diagram.imgdata.src == undefined) return;\n    // make sure path is defined and have 4 points\n    if (diagram.path == undefined) return;\n    if (diagram.path.points.length != 4) return;\n\n    // it's calculated like this to be able to apply linear transformation\n    // path: bottom-left, bottom-right, top-right, top-left\n    // width  : 0-1\n    // height : 1-2\n    let width  = diagram.path.points[1].sub(diagram.path.points[0]).length();\n    let height = diagram.path.points[2].sub(diagram.path.points[1]).length();\n    \n    // calculate the linear transformation matrix\n    // [ a c ]\n    // [ b d ]\n    let ex = diagram.path.points[1].sub(diagram.path.points[0]).normalize();\n    let ey = diagram.path.points[3].sub(diagram.path.points[0]).normalize();\n    let a =  ex.x; let b = -ex.y;\n    let c = -ey.x; let d =  ey.y;\n\n    let xpos = diagram.path.points[3].x;\n    let ypos = -diagram.path.points[3].y;\n\n    if (embed_image) {\n        set_image_href_dataURL(image, diagram.imgdata.src);\n    } else {\n        image.setAttribute(\"href\", diagram.imgdata.src);\n    }\n    image.setAttribute(\"width\", width.toString());\n    image.setAttribute(\"height\", height.toString());\n    image.setAttribute(\"transform\", `matrix(${a} ${b} ${c} ${d} ${xpos} ${ypos})`);\n    image.setAttribute(\"preserveAspectRatio\", \"none\");\n    if (svgtag != undefined) image.setAttribute(\"_dg_tag\", svgtag);\n\n    svgelement.appendChild(image);\n}\n\n/**\n * Collect all DiagramType.Text in the diagram\n * @param diagram the outer diagram\n * @returns a list of DiagramType.Text\n*/\nfunction collect_text(diagram : Diagram, type : DiagramType.Text | DiagramType.MultilineText) : Diagram[] {\n    if (diagram.type == type) {\n        return [diagram];\n    } else if (diagram.type == DiagramType.Diagram) {\n        let result : Diagram[] = [];\n        for (let d of diagram.children) {\n            result = result.concat(collect_text(d, type));\n        }\n        return result;\n    } else {\n        return [];\n    }\n}\n\n/** Calculate the scaling factor for the text based on the reference svg element */\nexport function calculate_text_scale(referencesvgelement : SVGSVGElement, padding? : [number, number, number, number]) : number {\n    const pad = expand_directional_value(padding ?? 0)\n    let bbox = referencesvgelement.getBBox();\n    let refsvgelement_width = referencesvgelement.width.baseVal.value - pad[1] - pad[3];\n    let refsvgelement_height = referencesvgelement.height.baseVal.value - pad[0] - pad[2];\n    return Math.max(bbox.width / refsvgelement_width, bbox.height / refsvgelement_height)\n}\n\n/**\n * @param svgelement the svg element to draw to\n * @param diagrams the list of text diagrams to draw\n * @param calculated_scale the calculated scale for the text\n */\nfunction draw_texts(svgelement : SVGSVGElement, diagrams : Diagram[], \n    calculated_scale : number, svgtag? : string) : void {\n    for (let diagram of diagrams) {\n        let style = {...default_text_diagram_style, ...diagram.style}; // use default if not defined\n        style.fill = get_color(style.fill as string, tab_color);\n        style.stroke = get_color(style.stroke as string, tab_color);\n\n        let textdata = {...default_textdata, ...diagram.textdata}; // use default if not defined\n        if (diagram.path == undefined) { throw new Error(\"Text must have a path\"); }\n        // draw svg of text\n        let text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        // text.setAttribute(\"x\", diagram.path.points[0].x.toString());\n        // text.setAttribute(\"y\", (-diagram.path.points[0].y).toString());\n        let xpos = diagram.path.points[0].x;\n        let ypos = -diagram.path.points[0].y;\n        let angle_deg = to_degree(parseFloat(textdata[\"angle\"] as string));\n\n        let scale = textdata[\"font-scale\"] == \"auto\" ? \n            calculated_scale : parseFloat(textdata[\"font-scale\"] as string);\n        let font_size = parseFloat(textdata[\"font-size\"] as string) * scale;\n\n        // set font styles (font-family, font-size, font-weight)\n        text.setAttribute(\"font-family\", textdata[\"font-family\"] as string);\n        text.setAttribute(\"font-style\", textdata[\"font-style\"] as string);\n        text.setAttribute(\"font-size\", font_size.toString());\n        text.setAttribute(\"font-weight\", textdata[\"font-weight\"] as string);\n        text.setAttribute(\"text-anchor\", textdata[\"text-anchor\"] as string);\n        text.setAttribute(\"dy\", textdata[\"dy\"] as string);\n        // text.setAttribute(\"dominant-baseline\", textdata[\"dominant-baseline\"] as string);\n        text.setAttribute(\"transform\", `translate(${xpos} ${ypos}) rotate(${angle_deg}) `);\n        if (svgtag != undefined) text.setAttribute(\"_dg_tag\", svgtag);\n\n        // custom attribute for tex display\n        text.setAttribute(\"_x\", xpos.toString());\n        text.setAttribute(\"_y\", ypos.toString());\n        text.setAttribute(\"_angle\", angle_deg.toString());\n        \n        for (let stylename in style) {\n            text.style[stylename as any] = (style as any)[stylename as any];\n        }\n\n        // set the content of the text\n        let text_content = textdata[\"text\"];\n        if (diagram.tags.includes(TAG.TEXTVAR) && !is_texstr(text_content)) \n            text_content = str_to_mathematical_italic(text_content);\n        text.innerHTML = text_content;\n\n        // add to svgelement\n        svgelement.appendChild(text);\n    }\n}\n\n/**\n * @param svgelement the svg element to draw to\n * @param diagrams the list of text diagrams to draw\n * @param calculated_scale the calculated scale for the text\n */\nfunction draw_multiline_texts(svgelement : SVGSVGElement, diagrams : Diagram[], \n    calculated_scale : number, svgtag? : string) : void {\n    for (let diagram of diagrams) {\n    //     let style = {...default_text_diagram_style, ...diagram.style}; // use default if not defined\n    //     style.fill = get_color(style.fill as string, tab_color);\n    //     style.stroke = get_color(style.stroke as string, tab_color);\n    //\n    //     let textdata = {...default_textdata, ...diagram.textdata}; // use default if not defined\n        if (diagram.path == undefined) { throw new Error(\"Text must have a path\"); }\n        // draw svg of text\n        let textsvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        let xpos = diagram.path.points[0].x;\n        let ypos = -diagram.path.points[0].y;\n        // let angle_deg = to_degree(parseFloat(textdata[\"angle\"] as string));\n        let angle_deg = 0;\n\n\n        // use default if not defined\n        let textdata = {...default_textdata, ...{dy:\"0\", \"text-anchor\":\"start\"}, ...diagram.textdata}; \n        let diagram_font_size = textdata[\"font-size\"];\n\n\n        if (diagram.multilinedata?.content == undefined) { throw new Error(\"MultilineText must have multilinedata\"); }\n        // let current_line : number = 0;\n        let dg_scale_factor = diagram.multilinedata[\"scale-factor\"] ?? 1;\n        let is_firstline : boolean = true;\n        let is_in_front  : boolean = true;\n        let newline_dy   : string  = \"1em\";\n        for (let tspandata of diagram.multilinedata.content) {\n\n            if (tspandata.text == \"\\n\") { \n                is_in_front = true; \n                newline_dy = tspandata.style['dy'] ?? \"1em\";\n                continue; \n            }\n\n            // create tspan for each tspandata\n            let tspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n\n            let not_setting_dy = (tspandata.style['dy'] == undefined)\n            let tspanstyle = {\n                ...default_text_diagram_style, \n                ...textdata,\n                ...{dy : \"0\", dx : \"0\"}, \n                ...{\"font-size\" : diagram_font_size},\n                ...tspandata.style\n            };\n\n            if (is_in_front) {\n                tspan.setAttribute(\"x\", \"0\");\n                let textdata_dy = textdata[\"dy\"] as string ?? \"0\";\n                if (not_setting_dy) tspanstyle.dy = is_firstline ? textdata_dy : newline_dy;\n                is_in_front = false;\n            }\n\n            let scale = tspanstyle[\"font-scale\"] == \"auto\" ? \n                calculated_scale : parseFloat(tspanstyle[\"font-scale\"] as string);\n            let font_size = parseFloat(tspanstyle[\"font-size\"] as string) * scale * dg_scale_factor;\n\n            if (tspanstyle[\"tag\"]) tspan.setAttribute(\"_dg_tag\", tspanstyle[\"tag\"] as string);\n\n            tspan.style.whiteSpace = \"pre\";\n            // if we do style.whiteSpace in `textsvg`, it doesnt work in Apple's webkit\n            tspan.setAttribute(\"dx\", tspanstyle.dx as string);\n            tspan.setAttribute(\"dy\", tspanstyle.dy as string);\n            tspan.setAttribute(\"font-style\", tspanstyle[\"font-style\"] as string);\n            tspan.setAttribute(\"font-family\", tspanstyle[\"font-family\"] as string);\n            // tspan.setAttribute(\"font-size\", tspanstyle[\"font-size\"] as string);\n            tspan.setAttribute(\"font-size\", font_size.toString());\n            tspan.setAttribute(\"font-weight\", tspanstyle[\"font-weight\"] as string);\n            // tspan.setAttribute(\"text-anchor\", tspanstyle[\"text-anchor\"] as string);\n            tspan.style[\"fill\"] = get_color(tspanstyle.fill as string, tab_color);\n            tspan.style[\"stroke\"] = get_color(tspanstyle.stroke as string, tab_color);\n            tspan.style[\"opacity\"] = tspanstyle.opacity as string;\n\n            let text = tspandata.text;\n            if (tspanstyle[\"textvar\"]) text = str_to_mathematical_italic(text);\n            tspan.innerHTML = text;\n            textsvg.appendChild(tspan);\n\n            is_firstline = false;\n        }\n\n        //\n        // let scale = textdata[\"font-scale\"] == \"auto\" ? \n        //     calculated_scale : parseFloat(textdata[\"font-scale\"] as string);\n        // let font_size = parseFloat(textdata[\"font-size\"] as string) * scale;\n        //\n        // // set font styles (font-family, font-size, font-weight)\n        // text.setAttribute(\"font-family\", textdata[\"font-family\"] as string);\n        // text.setAttribute(\"font-size\", font_size.toString());\n        // text.setAttribute(\"font-weight\", textdata[\"font-weight\"] as string);\n        // text.setAttribute(\"text-anchor\", textdata[\"text-anchor\"] as string);\n        // // text.setAttribute(\"dominant-baseline\", textdata[\"dominant-baseline\"] as string);\n        textsvg.setAttribute(\"dy\", textdata[\"dy\"] as string);\n        textsvg.setAttribute(\"text-anchor\", textdata[\"text-anchor\"] as string);\n        textsvg.setAttribute(\"transform\", `translate(${xpos} ${ypos}) rotate(${angle_deg}) `);\n        if (svgtag != undefined) textsvg.setAttribute(\"_dg_tag\", svgtag);\n        //\n        // // custom attribute for tex display\n        // text.setAttribute(\"_x\", xpos.toString());\n        // text.setAttribute(\"_y\", ypos.toString());\n        // text.setAttribute(\"_angle\", angle_deg.toString());\n        // \n        // for (let stylename in style) {\n        //     text.style[stylename as any] = (style as any)[stylename as any];\n        // }\n        //\n        // // set the content of the text\n        // let text_content = textdata[\"text\"];\n        // if (diagram.tags.includes('textvar') && !is_texstr(text_content)) \n        //     text_content = str_to_mathematical_italic(text_content);\n        // text.innerHTML = text_content;\n        //\n        // // add to svgelement\n        svgelement.appendChild(textsvg);\n    }\n}\n\n/**\n * Get all svg elements with a specific tag\n * @param svgelement the svg element to search\n * @param tag the tag to search\n * @returns a list of svg elements with the tag\n */\nexport function get_tagged_svg_element(tag : string, svgelement : SVGElement) : SVGElement[] {\n    let result : SVGElement[] = [];\n    for (let i in svgelement.children) {\n        let child = svgelement.children[i];\n        if (!(child instanceof SVGElement)) continue;\n        if (child.getAttribute(\"_dg_tag\") == tag) {\n            result.push(child);\n        }\n        // recurse through all children\n        if (child.children?.length) {\n            result = result.concat(get_tagged_svg_element(tag, child));\n        }\n    }\n    return result;\n}\n\n/**\n * @param svgelement the svg element to draw to\n * @param diagram the diagram to draw\n * @param render_text whether to render text\n * @param embed_image (optional) whether to embed images\n * this allow the image to be downloaded as SVG with the image embedded\n * @param text_scaling_factor (optional) the scaling factor for text\n * @param svgtag (optional) the tag to add to the svg element\n */\nexport function f_draw_to_svg(svgelement : SVGSVGElement, diagram : Diagram, render_text : boolean = true, embed_image : boolean = false,\n    text_scaling_factor? : number, svgtag? : string) : void {\n    \n    if (diagram.type == DiagramType.Polygon) {\n        draw_polygon(svgelement, diagram, svgtag);\n    } else if (diagram.type == DiagramType.Curve){\n        draw_curve(svgelement, diagram, svgtag);\n    } else if (diagram.type == DiagramType.Text || diagram.type == DiagramType.MultilineText){\n        // do nothing\n    } else if (diagram.type == DiagramType.Image){\n        draw_image(svgelement, diagram, embed_image, svgtag);\n    } else if (diagram.type == DiagramType.Diagram){\n        for (let d of diagram.children) {\n            f_draw_to_svg(svgelement, d, false, embed_image, undefined, svgtag);\n        }\n    } else {\n        console.warn(\"Unreachable, unknown diagram type : \" + diagram.type);\n    }\n\n    // draw text last to make the scaling works\n    // because the text is scaled based on the bounding box of the svgelement\n    if (render_text) {\n        if (text_scaling_factor == undefined){\n            text_scaling_factor = calculate_text_scale(svgelement);\n        }\n        let text_diagrams      : Diagram[] = collect_text(diagram, DiagramType.Text);\n        let multiline_diagrams : Diagram[] = collect_text(diagram, DiagramType.MultilineText);\n        draw_texts(svgelement, text_diagrams, text_scaling_factor ?? 1, svgtag);\n        draw_multiline_texts(svgelement, multiline_diagrams, text_scaling_factor ?? 1, svgtag);\n    }\n    \n}\n\n/**\n * WARNING: DEPRECATED\n * use `draw_to_svg_element` instead\n *\n * Draw a diagram to an svg element\n * @param outer_svgelement the outer svg element to draw to\n * @param diagram the diagram to draw\n * @param set_html_attribute whether to set the html attribute of the outer_svgelement\n * @param render_text whether to render text\n * @param clear_svg whether to clear the svg before drawing\n */\nexport function draw_to_svg(outer_svgelement : SVGSVGElement, diagram : Diagram,\n    set_html_attribute : boolean = true, render_text : boolean = true, clear_svg : boolean = true) : void {\n    let options : draw_to_svg_options = {\n        set_html_attribute : set_html_attribute,\n        render_text : render_text,\n        clear_svg : clear_svg,\n    };\n    draw_to_svg_element(outer_svgelement, diagram, options);\n}\n\nexport interface draw_to_svg_options {\n    set_html_attribute? : boolean,\n    render_text? : boolean,\n    clear_svg? : boolean,\n    embed_image? : boolean,\n    background_color? : string,\n    padding? : number | number[],\n    text_scaling_reference_svg? : SVGSVGElement,\n    text_scaling_reference_padding? : number | number[],\n}\n\n// TODO: replace draw_to_svg with the current draw_to_svg_element in the next major version\n\n/**\n * Draw a diagram to an svg element\n * @param outer_svgelement the outer svg element to draw to\n * @param diagram the diagram to draw\n * @param options the options for drawing\n * ```typescript\n * options : {\n *    set_html_attribute? : boolean (true),\n *    render_text? : boolean (true),\n *    clear_svg? : boolean (true),\n *    embed_image? : boolean (false),\n *    background_color? : string (undefined),\n *    padding? : number | number[] (10),\n *    text_scaling_reference_svg? : SVGSVGElement (undefined),\n *    text_scaling_reference_padding? : number | number[] (undefined),\n * }\n * ````\n * define `text_scaling_reference_svg` and `text_scaling_reference_padding` to scale text based on another svg element\n */\nexport function draw_to_svg_element(outer_svgelement : SVGSVGElement, diagram : Diagram, options : draw_to_svg_options = {}) : void {\n    const set_html_attribute = options.set_html_attribute ?? true;\n    const render_text = options.render_text ?? true;\n    const clear_svg = options.clear_svg ?? true;\n    const embed_image = options.embed_image ?? false;\n    \n    let svgelement : SVGSVGElement | undefined = undefined;\n    // check if outer_svgelement has a child with meta=diagram_svg\n    for (let i in outer_svgelement.children) {\n        let child = outer_svgelement.children[i];\n        if (child instanceof SVGSVGElement && child.getAttribute(\"meta\") == \"diagram_svg\") {\n            svgelement = child;\n            break;\n        }\n    }\n\n    if (svgelement == undefined) {\n        // if svgelemet doesn't exist yet, create it\n        // create an inner svg element\n        svgelement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svgelement.setAttribute(\"meta\", \"diagram_svg\")\n        svgelement.setAttribute(\"width\", \"100%\");\n        svgelement.setAttribute(\"height\", \"100%\");\n        outer_svgelement.appendChild(svgelement);\n    }\n\n    let text_scaling_factor : number | undefined = undefined;\n    if (options.text_scaling_reference_svg) {\n        options.text_scaling_reference_padding = options.text_scaling_reference_padding ?? options.padding ?? 10;\n        options.text_scaling_reference_padding = expand_directional_value(options.text_scaling_reference_padding);\n        text_scaling_factor = calculate_text_scale(\n            options.text_scaling_reference_svg,\n            options.text_scaling_reference_padding as [number, number, number, number]\n        );\n    }\n    \n    // TODO : for performance, do smart clearing of svg, and not just clear everything\n    if (clear_svg) svgelement.innerHTML = \"\";\n\n    f_draw_to_svg(svgelement, diagram, render_text, embed_image, text_scaling_factor);\n\n    if (set_html_attribute) {\n        const pad_px = expand_directional_value(options.padding ?? 10);\n        // set viewbox to the bounding box\n        let bbox = svgelement.getBBox();\n        // add padding of 10px to the bounding box (if the graph is small, it'll mess it up)\n        // scale 10px based on the width and height of the svg\n        let svg_width = svgelement.width.baseVal.value - pad_px[1] - pad_px[3];\n        let svg_height = svgelement.height.baseVal.value - pad_px[0] - pad_px[2];\n        let scale = Math.max(bbox.width / svg_width, bbox.height / svg_height)\n        let pad = pad_px.map(p => p*scale);\n        // [top, right, bottom, left]\n        bbox.x -= pad[3];\n        bbox.y -= pad[0];\n        bbox.width += pad[1] + pad[3];\n        bbox.height += pad[0] + pad[2];\n        svgelement.setAttribute(\"viewBox\", `${bbox.x} ${bbox.y} ${bbox.width} ${bbox.height}`);\n        // set preserveAspectRatio to xMidYMid meet\n        svgelement.setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\n        outer_svgelement.style.overflow = \"visible\";\n    }\n    \n    if (options.background_color) {\n        let bbox = svgelement.getBBox();\n        // if svgelement has viewBox set, use it instead of getBBox\n        if (svgelement.viewBox.baseVal.width !== 0) bbox = svgelement.viewBox.baseVal;\n        \n        // draw a rectangle as the background\n        let rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n        rect.setAttribute(\"x\", bbox.x.toString());\n        rect.setAttribute(\"y\", bbox.y.toString());\n        rect.setAttribute(\"width\", bbox.width.toString());\n        rect.setAttribute(\"height\", bbox.height.toString());\n        rect.style.fill = get_color(options.background_color as string, tab_color);\n        rect.style.stroke = \"none\";\n        \n        // prepend\n        svgelement.insertBefore(rect, svgelement.firstChild);\n    }\n}\n\nfunction is_texstr(s : string) : boolean {\n    return s.startsWith(\"$\") && s.endsWith(\"$\");\n}\nfunction is_texdisplaystr(s : string) : boolean {\n    return s.startsWith(\"$$\") && s.endsWith(\"$$\");\n}\nfunction strip_texstr(s : string) : string {\n    if (is_texdisplaystr(s)) return s.substring(2, s.length-2);\n    if (is_texstr(s)) return s.substring(1, s.length-1);\n    return s;\n}\n\ntype texhandler_config = {\n    display : boolean,\n    // fontsize : number,\n}\ntype texhadler_function = (texstr : string, config : texhandler_config) => string; // return SVG string\n\n/**\n * Recursively handle tex in svg\n * @param svg the svg element to handle\n * @param texhandler the tex handler function\n */\nexport function handle_tex_in_svg(svg : SVGElement, texhandler : texhadler_function) : void {\n    // recurse through all children of svg until we find text\n    // then replace the text with the svg returned by texhandler\n    for (let i = 0; i < svg.children.length; i++) {\n        let child = svg.children[i];\n        if (child instanceof SVGTextElement) {\n            let str = child.innerHTML;\n            if (!is_texstr(str)) continue;\n\n            let fontsizestr = child.getAttribute('font-size');\n            if (fontsizestr == null) continue;\n            let fontsize = parseFloat(fontsizestr);\n\n            let svgstr = texhandler(strip_texstr(str), {\n                display : is_texdisplaystr(str),\n                // fontsize : parseFloat(fontsize),\n            });\n\n            let xstr = child.getAttribute('_x');\n            let ystr = child.getAttribute('_y');\n            // let angstr = child.getAttribute('_angle');\n            if (xstr == null || ystr == null) continue;\n\n            let textanchor = child.getAttribute('text-anchor');\n            let dy = child.getAttribute('dy');\n            if (textanchor == null || dy == null) continue;\n\n            child.outerHTML = svgstr;\n            child = svg.children[i]; // update child\n\n            // HACK: scaling for mathjax tex2svg, for other option think about it later\n            let widthexstr = child.getAttribute('width');   // ###ex\n            if (widthexstr == null) continue;\n            let widthex = parseFloat(widthexstr.substring(0, widthexstr.length-2));\n            let heightexstr = child.getAttribute('height'); // ###ex\n            if (heightexstr == null) continue;\n            let heightex = parseFloat(heightexstr.substring(0, heightexstr.length-2));\n\n            const magic_number = 2;\n            let width = widthex * fontsize / magic_number;\n            let height = heightex * fontsize / magic_number;\n\n            let xval = parseFloat(xstr);\n            let yval = parseFloat(ystr);\n            switch (textanchor) {\n                case \"start\": break; // left\n                case \"middle\":       // center\n                    xval -= width/2; break;\n                case \"end\":          // right\n                    xval -= width; break;\n            }\n            switch (dy) {\n                case \"0.75em\": break; // top\n                case \"0.25em\":                  // center\n                    yval -= height/2; break;\n                case \"-0.25em\":         // bottom\n                    yval -= height; break;\n            }\n\n            child.setAttribute('width', width.toString());\n            child.setAttribute('height', height.toString());\n            child.setAttribute('x', xval.toString());\n            child.setAttribute('y', yval.toString());\n        } else if (child instanceof SVGElement) {\n            handle_tex_in_svg(child, texhandler);\n        }\n    }\n}\n\n/**\n * Download the svg as svg file\n * @param outer_svgelement the outer svg element to download\n */\nexport function download_svg_as_svg(outer_svgelement : SVGSVGElement) : void {\n    let inner_svgelement = outer_svgelement.querySelector(\"svg[meta=diagram_svg]\") as SVGSVGElement | null;\n    if (inner_svgelement == null) { console.warn(\"Cannot find svg element\"); return; }\n    let locator_svgelement = outer_svgelement.querySelector(\"svg[meta=control_svg]\") as SVGSVGElement | null;\n\n    let svgelement = inner_svgelement;\n    // concat locator_svgelement to the copy of inner_svgelement\n    if (locator_svgelement != null) {  \n        let copy_inner_svgelement = inner_svgelement.cloneNode(true) as SVGSVGElement;\n        for (let i in locator_svgelement.children) {\n            let child = locator_svgelement.children[i];\n            if (!(child instanceof SVGSVGElement)) continue;\n            copy_inner_svgelement.appendChild(child.cloneNode(true));\n        }\n        svgelement = copy_inner_svgelement;\n    }\n\n    // get svg string\n    let svg_string = new XMLSerializer().serializeToString(svgelement);\n    let blob = new Blob([svg_string], {type: \"image/svg+xml\"});\n    let url = URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"diagramatics.svg\";\n    a.click();\n}\n\n/**\n * Download the svg as png file\n * @param outer_svgelement the outer svg element to download\n */\nexport function download_svg_as_png(outer_svgelement : SVGSVGElement) {\n    let inner_svgelement = outer_svgelement.querySelector(\"svg[meta=diagram_svg]\") as SVGSVGElement | null;\n    if (inner_svgelement == null) { console.warn(\"Cannot find svg element\"); return; }\n    let svgelem = outer_svgelement;\n\n    let svg_string = new XMLSerializer().serializeToString(svgelem);\n    let svg_blob = new Blob([svg_string], {type: \"image/svg+xml\"});\n\n    const DOMURL = window.URL || window.webkitURL || window;\n    const url = DOMURL.createObjectURL(svg_blob);\n\n    const image = new Image();\n    image.width = svgelem.width.baseVal.value;\n    image.height = svgelem.height.baseVal.value;\n    image.src = url;\n    image.onload = function() {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const ctx = canvas.getContext(\"2d\");\n        ctx?.drawImage(image, 0, 0);\n        DOMURL.revokeObjectURL(url);\n\n        const imgURI = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        const a = document.createElement(\"a\");\n        a.href = imgURI;\n        a.download = \"diagramatics.png\";\n        a.click();\n    }\n}\n","import { Diagram, polygon, line, curve, text, diagram_combine } from './diagram.js';\nimport { Vector2, V2 } from './vector.js';\nimport { to_radian } from './utils.js';\nimport { TAG } from './tag_names.js';\n\n// function helpers to create common shapes\n\n/**\n * Create rectange centered at origin\n * @param width width of the rectangle\n * @param height height of the rectangle\n * @returns a Diagram object\n */\nexport function rectangle(width : number, height : number) : Diagram {\n    let points = [\n        V2(-width/2,-height/2), V2( width/2,-height/2), \n        V2( width/2, height/2), V2(-width/2, height/2)\n    ];\n    return polygon(points);\n}\n\n/**\n * Create rectange with a given bottom left corner and top right corner\n * @param bottomleft bottom left corner of the rectangle\n * @param topright top right corner of the rectangle\n * @returns a Diagram object\n */\nexport function rectangle_corner(bottomleft : Vector2, topright : Vector2) : Diagram {\n    let points = [\n        bottomleft, V2(topright.x, bottomleft.y),\n        topright, V2(bottomleft.x, topright.y),\n    ];\n    return polygon(points);\n}\n\n/**\n * Create square centered at origin\n * @param side side length of the square\n * @returns a Diagram object\n */\nexport function square(side : number = 1) : Diagram {\n    return rectangle(side, side);\n}\n\n/**\n * Create regular polygon centered at origin with a given radius\n * @param n number of sides\n * @param radius radius of the polygon\n * @returns a Diagram object\n * \\* if you want to create a regular polygon with a given side length, use regular_polygon_side\n */\nexport function regular_polygon(n : number, radius : number = 1) : Diagram {\n    let points : Vector2[] = [];\n    for (let i = 0; i < n; i++) {\n        points.push(V2(0,radius).rotate(i*2*Math.PI/n));\n    }\n    return polygon(points);\n}\n\n/**\n * Create regular polygon centered at origin with a given side length\n * @param n number of sides\n * @param sidelength side length of the polygon\n * @returns a Diagram object\n * \\* if you want to create a regular polygon with a given radius, use regular_polygon\n */\nexport function regular_polygon_side(n : number, sidelength : number = 1) : Diagram {\n    let radius = sidelength/(2*Math.sin(Math.PI/n));\n    return regular_polygon(n, radius);\n}\n\n/**\n * Create circle centered at origin\n * *currently implemented as a regular polygon with 50 sides*\n * @param radius radius of the circle\n * @returns a Diagram object\n */\nexport function circle(radius : number = 1) : Diagram {\n    return regular_polygon(50, radius).append_tags(TAG.CIRCLE);\n}\n\n/**\n * Create an arc centered at origin\n * @param radius radius of the arc\n * @param angle angle of the arc\n * @returns a Diagram object\n */\nexport function arc(radius : number = 1, angle : number = to_radian(360)) : Diagram {\n    let n = 100;\n    let points : Vector2[] = [];\n    for (let i = 0; i < n; i++) {\n        points.push(V2(radius,0).rotate(i*angle/(n-1)));\n    }\n    return curve(points);\n}\n\n/**\n * Create an arrow from origin to a given point\n * @param v the end point of the arrow\n * @param headsize size of the arrow head\n * @returns a Diagram object\n */\nexport function arrow(v : Vector2, headsize : number = 1) : Diagram {\n    let line_diagram = line(V2(0,0), v).append_tags(TAG.ARROW_LINE);\n    let raw_triangle = polygon([V2(0,0), V2(-headsize, headsize/2), V2(-headsize, -headsize/2)]);\n    let head_triangle = raw_triangle.rotate(v.angle()).position(v).append_tags(TAG.ARROW_HEAD);\n    return diagram_combine(line_diagram, head_triangle);\n}\n\n/**\n * Create an arrow from a given point to another given point\n * @param start the start point of the arrow\n * @param end the end point of the arrow\n * @param headsize size of the arrow head\n * @returns a Diagram object\n */\nexport function arrow1(start : Vector2, end : Vector2, headsize : number = 1) : Diagram {\n    return arrow(end.sub(start), headsize).position(start);\n}\n\n/**\n * Create a two-sided arrow from a given point to another given point\n * @param start the start point of the arrow\n * @param end the end point of the arrow\n * @param headsize size of the arrow head\n * @returns a Diagram object\n */\nexport function arrow2(start : Vector2, end : Vector2, headsize : number = 1) : Diagram {\n    let line_diagram = line(start, end).append_tags(TAG.ARROW_LINE);\n    let direction    = end.sub(start);\n    let raw_triangle = polygon([V2(0,0), V2(-headsize, headsize/2), V2(-headsize, -headsize/2)]);\n    let head_triangle  = raw_triangle.rotate(direction.angle()).position(end).append_tags(TAG.ARROW_HEAD);\n    let head_triangle2 = raw_triangle.rotate(direction.angle()+Math.PI).position(start).append_tags(TAG.ARROW_HEAD);\n    return diagram_combine(line_diagram, head_triangle, head_triangle2);\n}\n\n/**\n * Create a text object with mathematical italic font\n * @param str text to be displayed\n * @returns a Diagram object\n */\nexport function textvar(str : string) : Diagram {\n    return text(str).append_tags(TAG.TEXTVAR);\n}\n","import { Diagram, polygon, line, diagram_combine, curve } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { linspace } from '../utils.js';\nimport { arrow1 } from '../shapes.js';\nimport { TAG } from '../tag_names.js';\n\n// ============================= utilities\n/**\n * Get the radius of a circle\n * @param circle a circle Diagram\n * @returns radius of the circle\n */\nexport function circle_radius(circle : Diagram) : number {\n    let tags = circle.tags;\n    if (!tags.includes(TAG.CIRCLE)) return -1;\n\n    let center = circle.get_anchor('center-center');\n    if (circle.path == undefined) return -1;\n    let p0 = circle.path.points[0];\n    return center.sub(p0).length();\n}\n\n/**\n * Get the tangent points of a circle from a point\n * @param point a point\n * @param circle a circle Diagram\n */\nexport function circle_tangent_point_from_point(point : Vector2, circle : Diagram) : [Vector2, Vector2] {\n    let radius = circle_radius(circle);\n    if (radius == -1) return [V2(0,0), V2(0,0)];\n    let center = circle.get_anchor('center-center');\n\n    // https://en.wikipedia.org/wiki/Tangent_lines_to_circles\n    \n    let r = radius;\n    let d0_2 = center.sub(point).length_sq();\n    let r_2 = r*r;\n\n    let v0 = point.sub(center);\n    let sLeft  = r_2 / d0_2;\n    let vLeft  = v0.scale(sLeft);\n    let sRight = r * Math.sqrt(d0_2 - r_2) / d0_2;\n    let vRight = V2(-v0.y, v0.x).scale(sRight);\n    let P1 = vLeft.add(vRight).add(center);\n    let P2 = vLeft.sub(vRight).add(center);\n    return [P1, P2];\n}\n\n/**\n * Get the points of a line\n * @param l a line Diagram\n * @returns the two points of the line\n */\nexport function line_points(l : Diagram) : [Vector2, Vector2] {\n    let tags = l.tags;\n    if (!tags.includes(TAG.LINE)) return [V2(0,0), V2(0,0)];\n    if (l.path == undefined) return [V2(0,0), V2(0,0)];\n\n    let p0 = l.path.points[0];\n    let p1 = l.path.points[1];\n    return [p0, p1];\n}\n\n/**\n * Get the intersection of a line with a horizontal line at y = yi\n * @param l a line Diagram\n * @param yi y value of the horizontal line\n * @returns the intersection point\n */\nexport function line_intersection_y(l : Diagram, yi : number) : Vector2 {\n    let [a, b] = line_points(l);\n    let xi = a.x + (b.x - a.x) * (yi - a.y) / (b.y - a.y);\n    return V2(xi, yi);\n}\n\n/**\n * Get the intersection of a line with a vertical line at x = xi\n * @param l a line Diagram\n * @param xi x value of the vertical line\n * @returns the intersection point\n */\nexport function line_intersection_x(l : Diagram, xi : number) : Vector2 {\n    let [a, b] = line_points(l);\n    let yi = a.y + (b.y - a.y) * (xi - a.x) / (b.x - a.x);\n    return V2(xi, yi);\n}\n\n/**\n * Get the intersection of two lines\n * @param l1 a line Diagram\n * @param l2 a line Diagram\n * @returns the intersection point\n * if the lines are parallel, return V2(Infinity, Infinity)\n */\nexport function line_intersection(l1 : Diagram, l2 : Diagram) : Vector2 {\n    if (!l1.tags.includes(TAG.LINE) || !l2.tags.includes(TAG.LINE)) return V2(Infinity, Infinity);\n    let [a1, b1] = line_points(l1);\n    let [a2, b2] = line_points(l2);\n\n    let x1 = a1.x; let y1 = a1.y; let x2 = b1.x; let y2 = b1.y;\n    let x3 = a2.x; let y3 = a2.y; let x4 = b2.x; let y4 = b2.y;\n\n    let d = (x1-x2)*(y3-y4) - (y1-y2)*(x3-x4);\n    if (d == 0) return V2(Infinity, Infinity);\n    let x = ((x1*y2 - y1*x2)*(x3-x4) - (x1-x2)*(x3*y4 - y3*x4))/d;\n    let y = ((x1*y2 - y1*x2)*(y3-y4) - (y1-y2)*(x3*y4 - y3*x4))/d;\n    return V2(x, y);\n}\n\n\n\n// ============================= shapes\n\n/**\n * Extend a line by a length on both ends\n * @param l a line Diagram\n * @param len1 length to extend on the first end\n * @param len2 length to extend on the second end\n * @returns a new line Diagram\n */\nexport function line_extend(l : Diagram, len1 : number, len2 : number) : Diagram {\n    let tags = l.tags;\n    if (!tags.includes(TAG.LINE)) return l;\n    if (l.path == undefined) return l;\n\n    let p0 = l.path.points[0];\n    let p1 = l.path.points[1];\n    let v = p1.sub(p0).normalize();\n    let p0_new = p0.sub(v.scale(len1));\n    let p1_new = p1.add(v.scale(len2));\n\n    let newl = l.copy();\n    if (newl.path == undefined) return l; // to surpress typescript error\n    newl.path.points = [p0_new, p1_new];\n    return newl;\n}\n\n/**\n * Get the size of a diagram\n * @param diagram a diagram\n * @returns the width and height of the diagram\n */\nexport function size(diagram : Diagram) : [number, number] {\n    let bb = diagram.bounding_box();\n    return [bb[1].x - bb[0].x, bb[1].y - bb[0].y];\n}\n","import { Diagram, diagram_combine, empty } from './diagram.js';\nimport { V2 } from './vector.js';\nimport { size } from './shapes/shapes_geometry.js';\n\nexport type VerticalAlignment   = 'top'  | 'center' | 'bottom';\nexport type HorizontalAlignment = 'left' | 'center' | 'right';\n\n/**\n * Align diagrams vertically\n * @param diagrams diagrams to be aligned\n * @param alignment vertical alignment of the diagrams\n * alignment can be 'top', 'center', or 'bottom'\n * @returns array of aligned diagrams\n */\nexport function align_vertical(diagrams : Diagram[], alignment : VerticalAlignment = 'center') : Diagram {\n    // align all the diagrams following the first diagram\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    if (alignment == 'top'){\n        let top_y = newdiagrams[0].get_anchor(\"top-left\").y;\n        // return diagrams.map(d => d.translate(V2(0, top_y - d.get_anchor(\"top-left\").y)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(0, top_y - newdiagrams[i].get_anchor(\"top-left\").y));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else if (alignment == 'center'){\n        let center_y = newdiagrams[0].get_anchor(\"center-left\").y;\n        // return diagrams.map(d => d.translate(V2(0, center_y - d.get_anchor(\"center-left\").y)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(0, center_y - newdiagrams[i].get_anchor(\"center-left\").y));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else if (alignment == 'bottom'){\n        let bottom_y = newdiagrams[0].get_anchor(\"bottom-left\").y;\n        // return diagrams.map(d => d.translate(V2(0, bottom_y - d.get_anchor(\"bottom-left\").y)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(0, bottom_y - newdiagrams[i].get_anchor(\"bottom-left\").y));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else {\n        throw new Error(\"Unknown vertical alignment : \" + alignment);\n    }\n}\n\n/**\n * Align diagrams horizontally\n * @param diagrams diagrams to be aligned\n * @param alignment horizontal alignment of the diagrams\n * alignment can be 'left', 'center', or 'right'\n * @returns array of aligned diagrams\n */\nexport function align_horizontal(diagrams : Diagram[], alignment : HorizontalAlignment = 'center') : Diagram {\n\n    // align all the diagrams following the first diagram\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    if (alignment == 'left'){\n        let left_x = newdiagrams[0].get_anchor(\"top-left\").x;\n        // return newdiagrams.map(d => d.translate(V2(left_x - d.get_anchor(\"top-left\").x, 0)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(left_x - newdiagrams[i].get_anchor(\"top-left\").x, 0));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else if (alignment == 'center'){\n        let center_x = newdiagrams[0].get_anchor(\"top-center\").x;\n        // return newdiagrams.map(d => d.translate(V2(center_x - d.get_anchor(\"top-center\").x, 0)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(center_x - newdiagrams[i].get_anchor(\"top-center\").x, 0));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else if (alignment == 'right'){\n        let right_x = newdiagrams[0].get_anchor(\"top-right\").x;\n        // return newdiagrams.map(d => d.translate(V2(right_x - d.get_anchor(\"top-right\").x, 0)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(right_x - newdiagrams[i].get_anchor(\"top-right\").x, 0));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else {\n        throw new Error(\"Unknown horizontal alignment : \" + alignment);\n    }\n}\n\n/**\n * Distribute diagrams horizontally\n * @param diagrams diagrams to be distributed\n * @param space space between the diagrams (default = 0)\n * @returns array of distributed diagrams\n */\nexport function distribute_horizontal(diagrams : Diagram[], space : number = 0) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    let distributed_diagrams : Diagram[] = [newdiagrams[0]];\n    for (let i = 1; i < newdiagrams.length; i++) {\n        let prev_diagram = distributed_diagrams[i-1];\n        let this_diagram = newdiagrams[i];\n        let prev_right = prev_diagram.get_anchor(\"top-right\").x;\n        let this_left  = this_diagram.get_anchor(\"top-left\").x;\n        let dx = prev_right - this_left + space;\n        distributed_diagrams.push(this_diagram.translate(V2(dx, 0)));\n    }\n    return diagram_combine(...distributed_diagrams);\n}\n\n/**\n * Distribute diagrams vertically\n * @param diagrams diagrams to be distributed\n * @param space space between the diagrams (default = 0)\n * @returns array of distributed diagrams\n */\nexport function distribute_vertical(diagrams : Diagram[], space : number = 0) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    let distributed_diagrams : Diagram[] = [newdiagrams[0]];\n    for (let i = 1; i < newdiagrams.length; i++) {\n        let prev_diagram = distributed_diagrams[i-1];\n        let this_diagram = newdiagrams[i];\n        let prev_bottom = prev_diagram.get_anchor(\"bottom-left\").y;\n        let this_top    = this_diagram.get_anchor(\"top-left\").y;\n        let dy = prev_bottom - this_top - space;\n        distributed_diagrams.push(this_diagram.translate(V2(0, dy)));\n    }\n    return diagram_combine(...distributed_diagrams);\n}\n\n/**\n * Distribute diagrams horizontally and align\n * @param diagrams diagrams to be distributed\n * @param horizontal_space space between the diagrams (default = 0)\n * @param alignment vertical alignment of the diagrams\n * alignment can be 'top', 'center', or 'bottom'\n * @returns array of distributed and aligned diagrams\n */\nexport function distribute_horizontal_and_align(diagrams : Diagram[], horizontal_space : number = 0,\n    alignment : VerticalAlignment = 'center') : Diagram {\n    return distribute_horizontal(align_vertical(diagrams, alignment).children, horizontal_space);\n}\n\n/**\n * Distribute diagrams vertically and align\n * @param diagrams diagrams to be distributed\n * @param vertical_space space between the diagrams (default = 0)\n * @param alignment horizontal alignment of the diagrams\n * alignment can be 'left', 'center', or 'right'\n * @returns array of distributed and aligned diagrams\n */\nexport function distribute_vertical_and_align(diagrams : Diagram[], vertical_space : number = 0,\n    alignment : HorizontalAlignment = 'center') : Diagram {\n    return distribute_vertical(align_horizontal(diagrams, alignment).children, vertical_space);\n}\n\n/**\n * Distribute diagrams in a grid\n * @param diagrams diagrams to be distributed\n * @param column_count number of columns\n * @param vectical_space space between the diagrams vertically (default = 0)\n * @param horizontal_space space between the diagrams horizontally (default = 0)\n * NODE: the behaviour is updated in v1.3.0 \n * (now the returned diagram's children is the distributed diagrams instead of list of list of diagrams)\n */\nexport function distribute_grid_row(diagrams : Diagram[], column_count : number, \n    vectical_space : number = 0, horizontal_space : number = 0,\n) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    let row_count = Math.ceil(newdiagrams.length / column_count);\n    let rows : Diagram[][] = [];\n    for (let i = 0; i < row_count; i++) {\n        rows.push(newdiagrams.slice(i * column_count, (i+1) * column_count));\n    }\n    let distributed_rows = rows.map(row => distribute_horizontal(row, horizontal_space));\n    let distributed_diagrams = distribute_vertical(distributed_rows, vectical_space);\n\n    let grid_diagrams = []\n    for (let i = 0; i < distributed_diagrams.children.length; i++) {\n        for (let j = 0; j < distributed_diagrams.children[i].children.length; j++) {\n            grid_diagrams.push(distributed_diagrams.children[i].children[j]);\n        }\n    }\n    return diagram_combine(...grid_diagrams);\n}\n\n/**\n * Distribute diagrams in a variable width row\n * if there is a diagram that is wider than the container width, it will be placed in a separate row\n * @param diagrams diagrams to be distributed\n * @param container_width width of the container\n * @param vertical_space space between the diagrams vertically (default = 0)\n * @param horizontal_space space between the diagrams horizontally (default = 0)\n * @param vertical_alignment vertical alignment of the diagrams (default = 'center')\n * alignment can be 'top', 'center', or 'bottom'\n * @param horizontal_alignment horizontal alignment of the diagrams (default = 'left')\n * alignment can be 'left', 'center', or 'right'\n */\nexport function distribute_variable_row(diagrams: Diagram[], container_width : number, \n    vertical_space : number = 0, horizontal_space : number = 0, \n    vertical_alignment : VerticalAlignment = 'center', \n    horizontal_alignment : HorizontalAlignment = 'left'\n) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n\n    let rows : Diagram[] = [];\n    let current_row : Diagram[] = [];\n    let current_row_w = 0;\n\n    function add_diagrams_to_rows(arr : Diagram[]) {\n        let distributed_row_dg = distribute_horizontal_and_align(arr, horizontal_space, vertical_alignment);\n        rows.push(distributed_row_dg);\n        current_row = [];\n        current_row_w = 0;\n    }\n\n    for (let i = 0; i < diagrams.length; i++) {\n        let d = diagrams[i];\n        let w = size(d)[0];\n        if (w > container_width) {\n            if (current_row.length > 0) add_diagrams_to_rows(current_row);\n            current_row.push(d); add_diagrams_to_rows(current_row);\n            continue;\n        }\n\n        if (current_row_w + horizontal_space + w > container_width) add_diagrams_to_rows(current_row);\n\n        current_row.push(d);\n        current_row_w += w + horizontal_space;\n    }\n\n    if (current_row.length > 0) add_diagrams_to_rows(current_row);\n\n    // distribute vertically\n    let distributed_diagrams = distribute_vertical_and_align(rows, vertical_space, horizontal_alignment);\n\n    let row_diagrams = []\n    for (let i = 0; i < distributed_diagrams.children.length; i++) {\n        for (let j = 0; j < distributed_diagrams.children[i].children.length; j++) {\n            row_diagrams.push(distributed_diagrams.children[i].children[j]);\n        }\n    }\n    return diagram_combine(...row_diagrams);\n}\n","import { Diagram, DiagramType, diagram_combine, empty } from './diagram.js';\nimport { str_to_mathematical_italic } from './unicode_utils.js'\nimport { Vector2, V2 } from './vector.js';\nimport { get_color, tab_color } from './color_palette.js';\nimport { f_draw_to_svg, calculate_text_scale } from './draw_svg.js';\nimport { rectangle, rectangle_corner } from './shapes.js';\nimport { size } from './shapes/shapes_geometry.js';\nimport { HorizontalAlignment, VerticalAlignment, distribute_horizontal_and_align, distribute_variable_row, distribute_vertical_and_align } from './alignment.js';\nimport { range } from './utils.js';\n\nfunction format_number(val : number, prec : number) {\n    let fixed = val.toFixed(prec);\n    // remove trailing zeros\n    // and if the last character is a dot, remove it\n    return fixed.replace(/\\.?0+$/, \"\");\n}\nexport type formatFunction = (name : string, value : any, prec? : number) => string;\nconst defaultFormat_f : formatFunction = (name : string, val : any, prec? : number) => {\n    let val_str = (typeof val == 'number' && prec != undefined) ? format_number(val,prec) : val.toString();\n    return `${str_to_mathematical_italic(name)} = ${val_str}`;\n}\n\ntype setter_function_t = (_ : any) => void;\ntype inpVariables_t = {[key : string] : any};\ntype inpSetter_t    = {[key : string] : setter_function_t };\n\nenum control_svg_name {\n    locator   = \"control_svg\",\n    dnd       = \"dnd_svg\",\n    custom    = \"custom_int_svg\",\n    button    = \"button_svg\"\n}\n\n/**\n * Object that controls the interactivity of the diagram\n */\nexport class Interactive {\n    public inp_variables : inpVariables_t = {};\n    public inp_setter    : inpSetter_t = {};\n    public display_mode  : \"svg\" | \"canvas\" = \"svg\";\n\n    public diagram_svg : SVGSVGElement | undefined = undefined;\n    public locator_svg : SVGSVGElement | undefined = undefined;\n    public dnd_svg : SVGSVGElement | undefined = undefined;\n    public custom_svg : SVGSVGElement | undefined = undefined;\n    public button_svg : SVGSVGElement | undefined = undefined;\n\n    private locatorHandler? : LocatorHandler = undefined;\n    private dragAndDropHandler? : DragAndDropHandler = undefined;\n    private buttonHandler? : ButtonHandler = undefined;\n    // no support for canvas yet\n\n    public draw_function : (inp_object : inpVariables_t, setter_object? : inpSetter_t) => any \n        = (_) => {};\n    public display_precision : undefined | number = 5;\n    intervals : {[key : string] : any} = {};         \n    \n    public registeredEventListenerRemoveFunctions : (() => void)[] = [];\n\n    /**\n     * @param control_container_div the div that contains the control elements\n     * @param diagram_outer_svg the svg element that contains the diagram\n     * \\* _only needed if you want to use the locator_\n     * @param inp_object_ the object that contains the variables\n     * \\* _only needed if you want to use custom input object_\n     */\n    constructor(\n        public control_container_div : HTMLElement, \n        public diagram_outer_svg? : SVGSVGElement,\n        inp_object_? : {[key : string] : any}\n    ){\n        if (inp_object_ != undefined){ this.inp_variables = inp_object_; }\n    }\n\n    public draw() : void {\n        this.draw_function(this.inp_variables, this.inp_setter);\n        this.locatorHandler?.setViewBox();\n        this.dragAndDropHandler?.setViewBox();\n        set_viewbox(this.custom_svg, this.diagram_svg);\n        set_viewbox(this.button_svg, this.diagram_svg);\n        // TODO: also do this for the other control_svg\n    }\n\n    public set(variable_name : string, val : any) : void {\n        this.inp_setter[variable_name](val);\n    }\n    public get(variable_name : string) : any {\n        return this.inp_variables[variable_name];\n    }\n\n    public label(variable_name : string, value : any, display_format_func : formatFunction = defaultFormat_f){\n\n        let labeldiv = document.createElement('div');\n        labeldiv.classList.add(\"diagramatics-label\");\n        labeldiv.innerHTML = display_format_func(variable_name, value, this.display_precision);\n\n        this.inp_variables[variable_name] = value;\n\n        // setter ==========================\n        const setter = (val : any) => {\n            this.inp_variables[variable_name] = val;\n            labeldiv.innerHTML = display_format_func(variable_name, val, this.display_precision);\n        }\n        this.inp_setter[variable_name] = setter;\n\n        // ==============================\n        // add components to div\n        //\n        // <div class=\"diagramatics-label-container\">\n        //     <div class=\"diagramatics-label\"></div>\n        // </div>\n        \n        let container = document.createElement('div');\n        container.classList.add(\"diagramatics-label-container\");\n        container.appendChild(labeldiv);\n\n        this.control_container_div.appendChild(container);\n    }\n\n\n    /**\n     * WARNING: deprecated\n     * use `locator_initial_draw` instead\n     */\n    public locator_draw(){\n        this.locatorHandler?.setViewBox();\n    }\n    public locator_initial_draw(){\n        // TODO: generate the svg here\n        this.locatorHandler?.setViewBox();\n    }\n\n    /** \n     * alias for `dnd_initial_draw`\n     */\n    public drag_and_drop_initial_draw(){\n        this.dnd_initial_draw();\n    }\n    public dnd_initial_draw() {\n        this.dragAndDropHandler?.setViewBox();\n        this.dragAndDropHandler?.drawSvg();\n    }\n    \n    private registerEventListener(\n        element: EventTarget, \n        type: keyof GlobalEventHandlersEventMap, \n        callback: EventListenerOrEventListenerObject | null,\n        options? : boolean | AddEventListenerOptions,\n    ) {\n        element.addEventListener(type, callback, options);\n        const removeFunction = () => element.removeEventListener(type, callback);\n        this.registeredEventListenerRemoveFunctions.push(removeFunction);\n    }\n    \n    public removeRegisteredEventListener() {\n        this.registeredEventListenerRemoveFunctions.forEach(f => f());\n        this.registeredEventListenerRemoveFunctions = [];\n    }\n    \n\n    get_svg_element(metaname : string) : SVGSVGElement {\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        let diagram_svg : SVGSVGElement | undefined = undefined;\n        // check if this.diagram_outer_svg has a child with meta=control_svg\n        // if not, create one\n        let svg_element : SVGSVGElement | undefined = undefined;\n\n        for (let i in this.diagram_outer_svg.children) {\n            let child = this.diagram_outer_svg.children[i];\n            if (child instanceof SVGSVGElement && child.getAttribute(\"meta\") == metaname) {\n                svg_element = child;\n            }\n        }\n\n        if (svg_element == undefined) {\n            svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            svg_element.setAttribute(\"meta\", metaname);\n            svg_element.setAttribute(\"width\", \"100%\");\n            svg_element.setAttribute(\"height\", \"100%\");\n            if (metaname == control_svg_name.dnd) svg_element.style.overflow = \"visible\";\n            this.diagram_outer_svg.appendChild(svg_element);\n        }\n\n        return svg_element;\n    }\n\n    get_diagram_svg() : SVGSVGElement {\n        let diagram_svg = this.get_svg_element(\"diagram_svg\");\n        this.diagram_svg = diagram_svg;\n        return diagram_svg;\n    }\n\n    /**\n     * Create a locator\n     * Locator is a draggable object that contain 2D coordinate information\n     * @param variable_name name of the variable\n     * @param value initial value\n     * @param radius radius of the locator draggable object\n     * @param color color of the locator\n     * @param track_diagram if provided, the locator will snap to the closest point on the diagram\n     */\n    public locator(variable_name : string, value : Vector2, radius : number, color : string = 'blue', track_diagram? : Diagram, blink : boolean = true){\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        this.inp_variables[variable_name] = value;\n\n        let diagram_svg  = this.get_diagram_svg();\n        let control_svg  = this.get_svg_element(control_svg_name.locator);\n        this.locator_svg = control_svg;\n        // if this is the fist time this function is called, create a locatorHandler\n        if (this.locatorHandler == undefined) {\n            let locatorHandler = new LocatorHandler(control_svg, diagram_svg);\n            this.locatorHandler = locatorHandler;\n            this.registerEventListener(this.diagram_outer_svg, 'mousemove',  (evt:any) => { locatorHandler.drag(evt)});\n            this.registerEventListener(this.diagram_outer_svg, 'mouseup',    (evt:any) => { locatorHandler.endDrag(evt)});\n            this.registerEventListener(this.diagram_outer_svg, 'touchmove',  (evt:any) => { locatorHandler.drag(evt)});\n            this.registerEventListener(this.diagram_outer_svg, 'touchend',   (evt:any) => { locatorHandler.endDrag(evt)});\n            this.registerEventListener(this.diagram_outer_svg, 'touchcancel',(evt:any) => { locatorHandler.endDrag(evt)});\n        }\n\n\n        // ============== callback\n        const callback = (pos : Vector2, redraw : boolean = true) => {\n            this.inp_variables[variable_name] = pos;\n            if (redraw) this.draw();\n        }\n        this.locatorHandler.registerCallback(variable_name, callback);\n\n        // ============== Circle element\n\n        let locator_svg = LocatorHandler.create_locator_circle_pointer_svg(radius, value, color, blink);\n        if(blink){\n            // store the circle_outer into the LocatorHandler so that we can turn it off later\n            let blinking_outers = locator_svg.getElementsByClassName(\"diagramatics-locator-blink\");\n            for (let i = 0; i < blinking_outers.length; i++)\n                (this.locatorHandler as LocatorHandler).addBlinkingCircleOuter(blinking_outers[i])\n        }\n        this.registerEventListener(locator_svg, 'mousedown', (evt:any) => {\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\n        });\n        this.registerEventListener(locator_svg, 'touchstart', (evt:any) => {\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\n        });\n        control_svg.appendChild(locator_svg);\n\n        // =============== setter\n        let setter;\n        if (track_diagram) {\n            if (track_diagram.type != DiagramType.Polygon && track_diagram.type != DiagramType.Curve)\n                throw Error('Track diagram must be a polygon or curve');\n            if (track_diagram.path == undefined) throw Error(`diagram {diagtam.type} must have a path`);\n            let track = track_diagram.path.points;\n            setter = (pos : Vector2) => {\n                let coord = closest_point_from_points(pos, track);\n                locator_svg.setAttributeNS(null, \"x\", coord.x.toString());\n                locator_svg.setAttributeNS(null, \"y\", (-coord.y).toString());\n                return coord;\n            }\n        }\n        else{\n            setter = (pos : Vector2) => {\n                locator_svg.setAttributeNS(null, \"x\", pos.x.toString());\n                locator_svg.setAttributeNS(null, \"y\", (-pos.y).toString());\n                return pos;\n            }\n        }\n        this.locatorHandler.registerSetter(variable_name, setter);\n\n        // set initial position\n        let init_pos = setter(value);\n        callback(init_pos, false);\n    }\n\n\n    // TODO: in the next breaking changes update,\n    // merge this function with locator\n    /**\n     * Create a locator with custom diagram object\n     * @param variable_name name of the variable\n     * @param value initial value\n     * @param diagram diagram of the locator\n     * @param track_diagram if provided, the locator will snap to the closest point on the diagram\n     * @param blink if true, the locator will blink\n     */\n    public locator_custom(variable_name : string, value : Vector2, diagram : Diagram, track_diagram? : Diagram, blink : boolean = true){\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        this.inp_variables[variable_name] = value;\n\n        let diagram_svg  = this.get_diagram_svg();\n        let control_svg  = this.get_svg_element(control_svg_name.locator);\n        this.locator_svg = control_svg;\n        // if this is the fist time this function is called, create a locatorHandler\n        if (this.locatorHandler == undefined) {\n            let locatorHandler = new LocatorHandler(control_svg, diagram_svg);\n            this.locatorHandler = locatorHandler;\n            this.registerEventListener(this.diagram_outer_svg, 'mousemove',  (evt:any) => { locatorHandler.drag(evt); })\n            this.registerEventListener(this.diagram_outer_svg, 'mouseup',    (evt:any) => { locatorHandler.endDrag(evt); })\n            this.registerEventListener(this.diagram_outer_svg, 'touchmove',  (evt:any) => { locatorHandler.drag(evt); })\n            this.registerEventListener(this.diagram_outer_svg, 'touchend',   (evt:any) => { locatorHandler.endDrag(evt); })\n            this.registerEventListener(this.diagram_outer_svg, 'touchcancel',(evt:any) => { locatorHandler.endDrag(evt); })\n        }\n\n\n        // ============== callback\n        const callback = (pos : Vector2, redraw : boolean = true) => {\n            this.inp_variables[variable_name] = pos;\n            if (redraw) this.draw();\n        }\n        this.locatorHandler.registerCallback(variable_name, callback);\n\n        // ============== Circle element\n\n        let locator_svg = this.locatorHandler!.create_locator_diagram_svg(diagram, blink);\n        this.registerEventListener(locator_svg, 'mousedown', (evt:any) => {\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\n        });\n        this.registerEventListener(locator_svg, 'touchstart', (evt:any) => {\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\n        });\n        control_svg.appendChild(locator_svg);\n\n        // =============== setter\n        let setter;\n        if (track_diagram) {\n            if (track_diagram.type != DiagramType.Polygon && track_diagram.type != DiagramType.Curve)\n                throw Error('Track diagram must be a polygon or curve');\n            if (track_diagram.path == undefined) throw Error(`diagram {diagtam.type} must have a path`);\n            let track = track_diagram.path.points;\n            setter = (pos : Vector2) => {\n                let coord = closest_point_from_points(pos, track);\n                locator_svg.setAttributeNS(null, \"x\", coord.x.toString());\n                locator_svg.setAttributeNS(null, \"y\", (-coord.y).toString());\n                return coord;\n            }\n        }\n        else{\n            setter = (pos : Vector2) => {\n                locator_svg.setAttributeNS(null, \"x\", pos.x.toString());\n                locator_svg.setAttributeNS(null, \"y\", (-pos.y).toString());\n                return pos;\n            }\n        }\n        this.locatorHandler.registerSetter(variable_name, setter);\n\n        // set initial position\n        let init_pos = setter(value);\n        callback(init_pos, false);\n    }\n\n    /**\n     * Create a slider\n     * @param variable_name name of the variable\n     * @param min minimum value\n     * @param max maximum value\n     * @param value initial value\n     * @param step step size\n     * @param time time of the animation in milliseconds\n     * @param display_format_func function to format the display of the value\n    */\n    public slider(variable_name : string, min : number = 0, max : number = 100, value : number = 50, step : number = -1, \n        time : number = 1.5, display_format_func : formatFunction = defaultFormat_f){\n        // if the step is -1, then it is automatically calculated\n        if (step == -1){ step = (max - min) / 100; }\n\n        // initialize the variable\n        this.inp_variables[variable_name] = value;\n\n        // =========== label =============\n        let labeldiv = document.createElement('div');\n        labeldiv.classList.add(\"diagramatics-label\");\n        labeldiv.innerHTML = display_format_func(variable_name, value, this.display_precision);\n\n        // =========== slider ===========\n\n        // create the callback function\n        const callback = (val : number, redraw : boolean = true) => {\n            this.inp_variables[variable_name] = val;\n            labeldiv.innerHTML = display_format_func(variable_name, val, this.display_precision);\n            if (redraw) this.draw();\n        }\n        let slider = create_slider(callback, min, max, value, step);\n\n        // ================ setter\n        const setter = (val : number) => {\n            slider.value = val.toString();\n            callback(val, false);\n        }\n\n        this.inp_setter[variable_name] = setter;\n\n        // =========== playbutton ========\n        let nstep = (max - min) / step;\n        const interval_time = 1000 * time / nstep;\n\n        let playbutton = document.createElement('button');\n        let symboldiv  = document.createElement('div');\n        symboldiv.classList.add(\"diagramatics-slider-playbutton-symbol\");\n        playbutton.appendChild(symboldiv);\n        playbutton.classList.add(\"diagramatics-slider-playbutton\");\n        playbutton.onclick = () => {\n            if (this.intervals[variable_name] == undefined){\n                // if is not playing\n                playbutton.classList.add(\"paused\");\n                this.intervals[variable_name] = setInterval(() => {\n                    let val = parseFloat(slider.value);\n                    val += step;\n                    // wrap around\n                    val = ((val - min) % (max - min)) + min;\n                    \n                    slider.value = val.toString();\n                    callback(val);\n                }, interval_time);\n            } else {\n                // if is playing\n                playbutton.classList.remove(\"paused\");\n                clearInterval(this.intervals[variable_name]);\n                this.intervals[variable_name] = undefined;\n            }\n        }\n\n        // ==============================\n        // add components to div\n        //\n        // <div class=\"diagramatics-slider-leftcontainer\">\n        //     <br>\n        //     <button class=\"diagramatics-slider-playbutton\"></button>\n        // </div>\n        // <div class=\"diagramatics-slider-rightcontainer\">\n        //     <div class=\"diagramatics-label\"></div>\n        //     <input type=\"range\"class=\"diagramatics-slider\">\n        // </div>\n        //\n        let leftcontainer = document.createElement('div');\n        leftcontainer.classList.add(\"diagramatics-slider-leftcontainer\");\n        leftcontainer.appendChild(document.createElement('br'));\n        leftcontainer.appendChild(playbutton);\n\n        let rightcontainer = document.createElement('div');\n        rightcontainer.classList.add(\"diagramatics-slider-rightcontainer\");\n        rightcontainer.appendChild(labeldiv);\n        rightcontainer.appendChild(slider);\n\n        let container = document.createElement('div');\n        container.classList.add(\"diagramatics-slider-container\");\n        container.appendChild(leftcontainer);\n        container.appendChild(rightcontainer);\n\n        this.control_container_div.appendChild(container);\n    }\n\n    private init_drag_and_drop() {\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        let diagram_svg = this.get_diagram_svg();\n        let dnd_svg     = this.get_svg_element(control_svg_name.dnd);\n        this.dnd_svg    = dnd_svg;\n\n        // if this is the fist time this function is called, create a dragAndDropHandler\n        if (this.dragAndDropHandler == undefined) {\n            let dragAndDropHandler = new DragAndDropHandler(dnd_svg, diagram_svg);\n            this.dragAndDropHandler = dragAndDropHandler;\n            // this.registerEventListener(this.diagram_outer_svg, 'mousemove',  (evt:any) => {dragAndDropHandler.drag(evt);});\n            this.registerEventListener(document, 'mousemove',  (evt:any) => {dragAndDropHandler.drag(evt);});\n            this.registerEventListener(document, 'mouseup',    (evt:any) => {dragAndDropHandler.endDrag(evt);});\n            this.registerEventListener(document, 'touchmove',  (evt:any) => {dragAndDropHandler.drag(evt);});\n            this.registerEventListener(document, 'touchend',   (evt:any) => {dragAndDropHandler.endDrag(evt);});\n            this.registerEventListener(document, 'touchcancel',(evt:any) => {dragAndDropHandler.endDrag(evt);});\n        }\n    }\n\n    /**\n     * Create a drag and drop container\n     * @param name name of the container\n     * @param diagram diagram of the container\n     * @param capacity capacity of the container (default is 1)\n     * @param config configuration of the container positioning\n     * the configuration is an object with the following format:\n     * `{type:\"horizontal-uniform\"}`, `{type:\"vertical-uniform\"}`, `{type:\"grid\", value:[number, number]}`\n     * `{type:\"horizontal\", padding:number}`, `{type:\"vertical\", padding:number}`\n     * `{type:\"flex-row\", padding:number, vertical_alignment:VerticalAlignment, horizontal_alignment:HorizontalAlignment}`\n    */\n    public dnd_container(name : string, diagram : Diagram, capacity? : number, config? : dnd_container_positioning) {\n        this.init_drag_and_drop();\n        this.dragAndDropHandler?.add_container(name, diagram, capacity, config);\n    }\n\n    // TODO: in the next breaking changes update,\n    // merge this function with dnd_draggable_to_container\n    /**\n     * Create a drag and drop draggable that is positioned into an existing container\n     * @param name name of the draggable\n     * @param diagram diagram of the draggable\n     * @param container_name name of the container\n     * @param callback callback function when the draggable is moved\n     */\n    public dnd_draggable_to_container(name : string, diagram : Diagram, container_name : string, callback? : (name:string, container:string) => any) {\n        this.init_drag_and_drop();\n        if (this.dragAndDropHandler == undefined) throw Error(\"dragAndDropHandler in Interactive class is undefined\");\n\n        this.inp_variables[name] = diagram.origin;\n        this.dragAndDropHandler.add_draggable_to_container(name, diagram, container_name);\n\n        const dnd_callback = (pos : Vector2, redraw : boolean = true) => {\n            this.inp_variables[name] = pos;\n            if (callback) callback(name, container_name);\n            if (redraw) this.draw();\n        }\n        this.dragAndDropHandler.registerCallback(name, dnd_callback);\n    }\n    \n    /**\n     * Create a drag and drop draggable\n     * @param name name of the draggable\n     * @param diagram diagram of the draggable\n     * @param container_diagram diagram of the container, if not provided, a container will be created automatically\n     * @param callback callback function when the draggable is moved\n    */\n    public dnd_draggable(name : string, diagram : Diagram, container_diagram? : Diagram, callback? : (name:string, pos:Vector2) => any) {\n        this.init_drag_and_drop();\n        if (this.dragAndDropHandler == undefined) throw Error(\"dragAndDropHandler in Interactive class is undefined\");\n\n        this.inp_variables[name] = diagram.origin;\n        this.dragAndDropHandler.add_draggable_with_container(name, diagram, container_diagram);\n\n        const dnd_callback = (pos : Vector2, redraw : boolean = true) => {\n            this.inp_variables[name] = pos;\n            if (callback) callback(name, pos);\n            if (redraw) this.draw();\n        }\n        this.dragAndDropHandler.registerCallback(name, dnd_callback);\n    }\n\n    /**\n     * Register a callback function when a draggable is dropped outside of a container\n     * @param callback callback function\n     */\n    public dnd_register_drop_outside_callback(callback : (name : string) => any) {\n        this.dragAndDropHandler?.register_dropped_outside_callback(callback);\n    }\n\n    /**\n     * Move a draggable to a container\n     * @param name name of the draggable\n     * @param container_name name of the container\n     */\n    public dnd_move_to_container(name : string, container_name : string) {\n        this.dragAndDropHandler?.try_move_draggable_to_container(name, container_name);\n    }\n\n    /**\n     * Get the data of the drag and drop objects with the format:\n     * `{container:string, content:string[]}[]`\n    */\n    public get_dnd_data() : DragAndDropData {\n        return this.dragAndDropHandler?.getData() ?? [];\n    }\n\n    /**\n     * Set the data of the drag and drop objects with the format:\n     * `{container:string, content:string[]}[]`\n     */\n    public set_dnd_data(data : DragAndDropData) : void {\n        this.dragAndDropHandler?.setData(data);\n    }\n    \n    /**\n    * Get the content size of a container\n    */\n    public  get_dnd_container_content_size(container_name : string) : [number,number] {\n       if (!this.dragAndDropHandler) return [NaN,NaN];\n       return this.dragAndDropHandler.get_container_content_size(container_name);\n    }\n    \n    /**\n     * Set whether the content of the container should be sorted or not\n     */\n    public set_dnd_content_sort(sort_content : boolean) : void {\n        if (!this.dragAndDropHandler) return;\n        this.dragAndDropHandler.sort_content = sort_content;\n    }\n    \n    public remove_dnd_draggable(name : string) {\n        this.dragAndDropHandler?.remove_draggable(name);\n    }\n\n    /**\n     * Create a custom interactive object\n     * @param id id of the object\n     * @param classlist list of classes of the object\n     * @param diagram diagram of the object\n     * @returns the svg element of the object\n     */\n    public custom_object(id : string, classlist: string[], diagram : Diagram) : SVGSVGElement {\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        let diagram_svg = this.get_diagram_svg();\n        let control_svg = this.get_svg_element(control_svg_name.custom);\n\n        let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        f_draw_to_svg(svg, diagram, true, false, calculate_text_scale(diagram_svg));\n        svg.setAttribute(\"overflow\", \"visible\");\n        svg.setAttribute(\"class\", classlist.join(\" \"));\n        svg.setAttribute(\"id\",id);\n\n        control_svg.appendChild(svg);\n        this.custom_svg = control_svg;\n        return svg;\n    }\n\n    private init_button() {\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        let diagram_svg = this.get_diagram_svg();\n        let button_svg  = this.get_svg_element(control_svg_name.button);\n        this.button_svg = button_svg;\n\n        // if this is the fist time this function is called, create a dragAndDropHandler\n        if (this.buttonHandler == undefined) {\n            let buttonHandler = new ButtonHandler(button_svg, diagram_svg);\n            this.buttonHandler = buttonHandler;\n        }\n    }\n\n    /**\n     * Create a toggle button\n     * @param name name of the button\n     * @param diagram_on diagram of the button when it is on\n     * @param diagram_off diagram of the button when it is off\n     * @param state initial state of the button\n     * @param callback callback function when the button state is changed\n    */\n    public button_toggle(name : string, diagram_on : Diagram, diagram_off : Diagram, state : boolean = false,\n        callback? : (name : string, state : boolean) => any\n    ){\n        this.init_button();\n        if (this.buttonHandler == undefined) throw Error(\"buttonHandler in Interactive class is undefined\");\n\n        this.inp_variables[name] = state;\n\n        let main_callback;\n        if (callback){\n            main_callback = (state : boolean, redraw : boolean = true) => { \n                this.inp_variables[name] = state \n                callback(name, state);\n                if (redraw) this.draw();\n            }\n        } else {\n            main_callback = (state : boolean, redraw : boolean = true) => { \n                this.inp_variables[name] = state \n                if (redraw) this.draw();\n            }\n\n        }\n\n        let setter = this.buttonHandler.try_add_toggle(name, diagram_on, diagram_off, state, main_callback);\n        this.inp_setter[name] = setter;\n    }\n\n    /**\n     * Create a click button\n     * @param name name of the button\n     * @param diagram diagram of the button\n     * @param diagram_pressed diagram of the button when it is pressed\n     * @param callback callback function when the button is clicked\n    */\n    public button_click(name : string, diagram : Diagram, diagram_pressed : Diagram, callback : () => any){\n        this.init_button();\n        if (this.buttonHandler == undefined) throw Error(\"buttonHandler in Interactive class is undefined\");\n\n        let n_callback = () => { callback(); this.draw(); }\n        this.buttonHandler.try_add_click(name, diagram, diagram_pressed, n_callback);\n    }\n}\n\n// ========== functions\n//\n\nfunction set_viewbox(taget : SVGSVGElement | undefined, source : SVGSVGElement | undefined) {\n    if (taget == undefined) return;\n    if (source == undefined) return;\n    taget.setAttribute(\"viewBox\", source.getAttribute(\"viewBox\") as string);\n    taget.setAttribute(\"preserveAspectRatio\", source.getAttribute(\"preserveAspectRatio\") as string);\n}\n\n\nfunction create_slider(callback : (val : number) => any, min : number = 0, max : number = 100, value : number = 50, step : number) : HTMLInputElement {\n    // create a slider\n    let slider = document.createElement(\"input\");\n    slider.type = \"range\";\n    slider.min = min.toString();\n    slider.max = max.toString();\n    slider.value = value.toString();\n    slider.step = step.toString();\n    slider.oninput = () => {\n        let val = slider.value;\n        callback(parseFloat(val));\n    }\n    // add class to slider\n    slider.classList.add(\"diagramatics-slider\");\n    return slider;\n}\n\n// function create_locator() : SVGCircleElement {\n// }\n//\nfunction closest_point_from_points(p : Vector2, points : Vector2[]) : Vector2 {\n    if (points.length == 0) return p;\n    let closest_d2 = Infinity;\n    let closest_p = points[0];\n    for (let i = 0; i < points.length; i++) {\n        let d2 = points[i].sub(p).length_sq();\n        if (d2 < closest_d2) {\n            closest_d2 = d2;\n            closest_p = points[i];\n        }\n    }\n    return closest_p;\n}\n\n// helper to calculate CTM in firefox\n// there's a well known bug in firefox about `getScreenCTM()`\nfunction firefox_calcCTM(svgelem : SVGSVGElement) : DOMMatrix {\n    let ctm = svgelem.getScreenCTM() as DOMMatrix;\n    // get screen width and height of the element\n    let screenWidth  = svgelem.width.baseVal.value;\n    let screenHeight = svgelem.height.baseVal.value;\n    let viewBox      = svgelem.viewBox.baseVal;\n    let scalex       = screenWidth/viewBox.width;\n    let scaley       = screenHeight/viewBox.height;\n    let scale        = Math.min(scalex, scaley);\n\n    // let translateX = (screenWidth/2  + ctm.e) - (viewBox.width/2  + viewBox.x) * scale;\n    // let translateY = (screenHeight/2 + ctm.f) - (viewBox.height/2 + viewBox.y) * scale;\n    let translateX = (screenWidth/2 ) - (viewBox.width/2  + viewBox.x) * scale;\n    let translateY = (screenHeight/2) - (viewBox.height/2 + viewBox.y) * scale;\n    return DOMMatrix.fromMatrix(ctm).translate(translateX, translateY).scale(scale);\n}\n\ntype LocatorEvent = TouchEvent | Touch | MouseEvent\ntype DnDEvent = TouchEvent | Touch | MouseEvent\n\n/**\n * Convert client position to SVG position\n * @param clientPos the client position\n * @param svgelem the svg element\n */\nexport function clientPos_to_svgPos(clientPos : {x : number, y : number}, svgelem : SVGSVGElement) : \n{x : number, y : number} {\n    // var CTM = this.control_svg.getScreenCTM() as DOMMatrix;\n    // NOTE: there's a well known bug in firefox about `getScreenCTM()`\n    // check if the browser is firefox\n    let CTM : DOMMatrix;\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n        CTM = firefox_calcCTM(svgelem);\n    } else {\n        CTM = svgelem.getScreenCTM() as DOMMatrix;\n    }\n    // console.log(CTM);\n    \n    return {\n        x : (clientPos.x - CTM.e) / CTM.a,\n        y : - (clientPos.y - CTM.f) / CTM.d\n    }\n}\n\nfunction getMousePosition(evt : LocatorEvent, svgelem : SVGSVGElement) : {x : number, y : number} {\n    // firefox doesn't support `TouchEvent`, we need to check for it\n    if (window.TouchEvent && evt instanceof TouchEvent) { evt = evt.touches[0]; }\n    let clientPos = {\n        x : (evt as Touch | MouseEvent).clientX,\n        y : (evt as Touch | MouseEvent).clientY\n    }\n    return clientPos_to_svgPos(clientPos, svgelem);\n}\n\n/**\n * Get the SVG coordinate from the event (MouseEvent or TouchEvent)\n * @param evt the event\n * @param svgelem the svg element\n * @returns the SVG coordinate\n */\nexport function get_SVGPos_from_event(evt : LocatorEvent, svgelem : SVGSVGElement) : {x : number, y : number} {\n    return getMousePosition(evt, svgelem);\n}\n\nclass LocatorHandler {\n\n    selectedElement  : SVGElement | null = null;\n    selectedVariable : string | null = null;\n    callbacks : {[key : string] : (pos : Vector2) => any} = {};\n    setter    : {[key : string] : (pos : Vector2) => any} = {};\n    // store blinking circle_outer so that we can turn it off\n    blinking_circle_outers : Element[] = [];\n    first_touch_callback : Function | null = null;\n\n    constructor(public control_svg : SVGSVGElement, public diagram_svg : SVGSVGElement){\n    }\n\n    startDrag(_ : LocatorEvent, variable_name : string, selectedElement : SVGElement) {\n        this.selectedElement  = selectedElement;\n        this.selectedVariable = variable_name;\n        this.handleBlinking();\n    }\n    drag(evt : LocatorEvent) {\n        if (this.selectedElement == undefined) return;\n        if (this.selectedVariable == undefined) return;\n\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\n\n        let coord = getMousePosition(evt, this.control_svg);\n\n        let pos = V2(coord.x, coord.y);\n        // check if setter for this.selectedVariable exists\n        // if it does, call it\n        if (this.setter[this.selectedVariable] != undefined) {\n            pos = this.setter[this.selectedVariable](pos);\n        }\n\n        // check if callback for this.selectedVariable exists\n        // if it does, call it\n        if (this.selectedVariable == null) return;\n        if (this.callbacks[this.selectedVariable] != undefined) {\n            this.callbacks[this.selectedVariable](pos);\n        }\n        this.setViewBox();\n\n    }\n    setViewBox() {\n        // set viewBox and preserveAspectRatio of control_svg to be the same as diagram_svg\n        this.control_svg.setAttribute(\"viewBox\", this.diagram_svg.getAttribute(\"viewBox\") as string);\n        this.control_svg.setAttribute(\"preserveAspectRatio\", this.diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\n    }\n    endDrag(_ : LocatorEvent) {\n        this.selectedElement = null;\n        this.selectedVariable = null;\n    }\n\n    registerCallback(name : string, callback : (pos : Vector2) => any){\n        this.callbacks[name] = callback;\n    }\n    registerSetter(name : string, setter : (pos : Vector2) => any){\n        this.setter[name] = setter;\n    }\n    addBlinkingCircleOuter(circle_outer : Element){\n        this.blinking_circle_outers.push(circle_outer);\n    }\n    handleBlinking(){\n        // turn off all blinking_circle_outers after the first touch\n        if (this.blinking_circle_outers.length == 0) return;\n        for (let i = 0; i < this.blinking_circle_outers.length; i++) {\n            this.blinking_circle_outers[i].classList.remove(\"diagramatics-locator-blink\");\n        }\n        this.blinking_circle_outers = [];\n        if (this.first_touch_callback != null) this.first_touch_callback();\n    }\n\n    create_locator_diagram_svg(diagram : Diagram, blink : boolean) : SVGSVGElement {\n        let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        f_draw_to_svg(svg, diagram.position(V2(0,0)), true, false, calculate_text_scale(this.diagram_svg));\n        svg.style.cursor = \"pointer\";\n        svg.setAttribute(\"overflow\", \"visible\");\n        if (blink) {\n            svg.classList.add(\"diagramatics-locator-blink\");\n            this.addBlinkingCircleOuter(svg);\n        }\n        return svg;\n    }\n\n    static create_locator_circle_pointer_svg(radius : number, value : Vector2, color : string, blink : boolean) : SVGSVGElement {\n        let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // set svg overflow to visible\n        svg.setAttribute(\"overflow\", \"visible\");\n        // set cursor to be pointer when hovering\n        svg.style.cursor = \"pointer\";\n\n        let circle_outer = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        let circle_inner = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n\n        let inner_radius    = radius * 0.4;\n\n        circle_outer.setAttribute(\"r\", radius.toString());\n        circle_outer.setAttribute(\"fill\", get_color(color, tab_color));\n        circle_outer.setAttribute(\"fill-opacity\", \"0.3137\");\n        circle_outer.setAttribute(\"stroke\", \"none\");\n        circle_outer.classList.add(\"diagramatics-locator-outer\");\n        if (blink) circle_outer.classList.add(\"diagramatics-locator-blink\");\n\n        circle_inner.setAttribute(\"r\", inner_radius.toString());\n        circle_inner.setAttribute(\"fill\", get_color(color, tab_color));\n        circle_inner.setAttribute(\"stroke\", \"none\");\n        circle_inner.classList.add(\"diagramatics-locator-inner\");\n\n        svg.appendChild(circle_outer);\n        svg.appendChild(circle_inner);\n        svg.setAttribute(\"x\", value.x.toString());\n        svg.setAttribute(\"y\", (-value.y).toString());\n        return svg;\n    }\n\n}\n\ntype DragAndDropContainerData = {\n    name : string,\n    position : Vector2,\n    svgelement? : SVGElement,\n    diagram : Diagram,\n    content : string[],\n    capacity : number,\n    config : dnd_container_positioning,\n}\ntype DragAndDropDraggableData = {\n    name : string,\n    position : Vector2,\n    svgelement? : SVGElement,\n    diagram : Diagram,\n    diagram_size : [number, number],\n    container : string,\n}\ntype DragAndDropData = {container:string, content:string[]}[]\n\nenum dnd_type {\n    container = \"diagramatics-dnd-container\",\n    draggable = \"diagramatics-dnd-draggable\",\n    ghost     = \"diagramatics-dnd-draggable-ghost\"\n}\n\n//TODO: add more\ntype dnd_container_positioning =\n    {type:\"horizontal-uniform\"} |\n    {type:\"vertical-uniform\"} |\n    {type:\"horizontal\", padding:number} |\n    {type:\"vertical\", padding:number} |\n    {type:\"flex-row\", padding:number, vertical_alignment?:VerticalAlignment, horizontal_alignment?:HorizontalAlignment} |\n    {type:\"grid\", value:[number, number]}\n\nclass DragAndDropHandler {\n    containers : {[key : string] : DragAndDropContainerData} = {};\n    draggables : {[key : string] : DragAndDropDraggableData} = {};\n    callbacks : {[key : string] : (pos : Vector2) => any} = {};\n    hoveredContainerName : string | null = null;\n    draggedElementName : string | null = null;\n    draggedElementGhost : SVGElement | null = null;\n    dropped_outside_callback : ((name : string) => any) | null = null;\n    sort_content : boolean = false;\n    dom_to_id_map : WeakMap<HTMLElement|SVGElement, string>;\n\n    constructor(public dnd_svg : SVGSVGElement, public diagram_svg : SVGSVGElement){\n        this.dom_to_id_map = new WeakMap();\n    }\n\n    public add_container(name : string, diagram : Diagram\n        , capacity? : number , position_config? : dnd_container_positioning\n    ) {\n        if (this.containers[name] != undefined) {\n            this.replace_container_svg(name, diagram, capacity, position_config);\n            return;\n        }\n\n        this.containers[name] = {\n            name, diagram, \n            position : diagram.origin, \n            content : [], \n            config : position_config ?? {type:\"horizontal-uniform\"},\n            capacity : capacity ?? 1\n        };\n    }\n\n    generate_position_map(diagram : Diagram, config : dnd_container_positioning, capacity : number, content : string[]) \n    : Vector2[] {\n        let bbox = diagram.bounding_box();\n        let p_center = diagram.origin;\n        switch (config.type){\n            case \"horizontal-uniform\": {\n                let width = bbox[1].x - bbox[0].x;\n                let dx = width / capacity;\n                let x0 = bbox[0].x + dx / 2;\n                let y  = p_center.y;\n                return range(0, capacity).map(i => V2(x0 + dx*i, y));\n            }\n            case \"vertical-uniform\": {\n                //NOTE: top to bottom\n                let height = bbox[1].y - bbox[0].y;\n                let dy = height / capacity;\n                let x  = p_center.x;\n                let y0 = bbox[1].y - dy / 2;\n                return range(0, capacity).map(i => V2(x, y0 - dy*i));\n            }\n            case \"grid\" : {\n                let [nx,ny] = config.value;\n                let height = bbox[1].y - bbox[0].y;\n                let width  = bbox[1].x - bbox[0].x;\n                let dx = width / nx;\n                let dy = height / ny;\n                let x0 = bbox[0].x + dx / 2;\n                let y0 = bbox[1].y - dy / 2;\n                return range(0, capacity).map(i => {\n                    let x = x0 + dx * (i % nx);\n                    let y = y0 - dy * Math.floor(i / nx);\n                    return V2(x, y);\n                });\n            }\n            case \"vertical\" : {\n                const sizelist = content.map((name) => this.draggables[name]?.diagram_size ?? [0,0]);\n                const size_rects = sizelist.map(([w,h]) => rectangle(w,h).mut());\n                const distributed = distribute_vertical_and_align(size_rects, config.padding).mut()\n                    .move_origin('top-center').position(diagram.get_anchor('top-center'))\n                    .translate(V2(0,-config.padding));\n                return distributed.children.map(d => d.origin);\n            }\n            case \"horizontal\" : {\n                const sizelist = content.map((name) => this.draggables[name]?.diagram_size ?? [0,0]);\n                const size_rects = sizelist.map(([w,h]) => rectangle(w,h).mut());\n                const distributed = distribute_horizontal_and_align(size_rects, config.padding).mut()\n                    .move_origin('center-left').position(diagram.get_anchor('center-left'))\n                    .translate(V2(config.padding,0));\n                return distributed.children.map(d => d.origin);\n            }\n            case \"flex-row\" : {\n                const pad = config.padding ?? 0;\n                const container_width = bbox[1].x - bbox[0].x - 2*pad;\n                const sizelist = content.map((name) => this.draggables[name]?.diagram_size ?? [0,0]);\n                const size_rects = sizelist.map(([w,h]) => rectangle(w,h).mut());\n                let distributed = distribute_variable_row(\n                    size_rects, container_width, pad, pad,\n                    config.vertical_alignment, config.horizontal_alignment\n                ).mut()\n                switch (config.horizontal_alignment){\n                    case 'center' :{\n                        distributed = distributed\n                            .move_origin('top-center').position(V2(p_center.x, bbox[1].y-pad));\n                    } break;\n                    case 'right' : {\n                        distributed = distributed\n                            .move_origin('top-right').position(V2(bbox[1].x-pad, bbox[1].y-pad));\n                    } break;\n                    case 'center':\n                    default: {\n                        distributed = distributed\n                            .move_origin('top-left').position(V2(bbox[0].x+pad, bbox[1].y-pad));\n                    }\n                }\n                return distributed.children.map(d => d.origin);\n            }\n            default : {\n                return [];\n            }\n        }\n    }\n    \n    get_container_content_size(container_name : string) : [number,number] {\n        const container = this.containers[container_name];\n        if (container == undefined) return [NaN, NaN];\n        const pad = (container.config as any).padding ?? 0;\n        const content_diagrams = container.content.map(name => this.draggables[name]?.diagram ?? empty());\n        const [width, height] = size(diagram_combine(...content_diagrams));\n        return [width + 2*pad, height + 2*pad];\n    }\n    \n    private replace_draggable_svg(name : string, diagram : Diagram) {\n        let draggable = this.draggables[name];\n        if (draggable == undefined) return;\n        draggable.svgelement?.remove();\n        draggable.diagram = diagram;\n        draggable.diagram_size = size(diagram);\n        this.add_draggable_svg(name, diagram);\n        this.reposition_container_content(draggable.container)\n    }\n    private replace_container_svg(name : string, diagram : Diagram, capacity? : number, config? : dnd_container_positioning) {\n        let container = this.containers[name];\n        if (container == undefined) return;\n        container.svgelement?.remove();\n        container.diagram = diagram;\n        if (capacity) container.capacity = capacity;\n        if (config) container.config = config;\n        this.add_container_svg(name, diagram);\n        this.reposition_container_content(name);\n    }\n\n    public add_draggable_to_container(name : string, diagram : Diagram, container_name : string) {\n        if (this.draggables[name] != undefined) {\n            this.replace_draggable_svg(name, diagram);\n            this.move_draggable_to_container(name, container_name);\n            return;\n        }\n\n        const diagram_size = size(diagram);\n        this.draggables[name] = {name, diagram : diagram.mut() , diagram_size, position : diagram.origin, container : container_name};\n        this.containers[container_name].content.push(name);\n    }\n\n    public add_draggable_with_container(name : string, diagram : Diagram, container_diagram? : Diagram) {\n        if (this.draggables[name] != undefined) {\n            this.replace_draggable_svg(name, diagram);\n            return;\n        }\n        // add a container as initial container for the draggable\n        let initial_container_name = `_container0_${name}`;\n\n        if (container_diagram == undefined)\n            container_diagram = this.diagram_container_from_draggable(diagram);\n        this.add_container(initial_container_name, container_diagram);\n\n        const diagram_size = size(diagram);\n        this.containers[initial_container_name].content.push(name);\n        this.draggables[name] = {name, diagram : diagram.mut() , diagram_size, position : diagram.origin, container : initial_container_name};\n    }\n    \n    public remove_draggable(name : string) : void {\n        for (let container_name in this.containers) {\n            const container = this.containers[container_name];\n            container.content = container.content.filter(e => e != name);\n        }\n        this.draggables[name].svgelement?.remove();\n        delete this.draggables[name];\n    }\n\n    registerCallback(name : string, callback : (pos : Vector2) => any){\n        this.callbacks[name] = callback;\n    }\n\n    register_dropped_outside_callback(callback : (name : string) => any){\n        this.dropped_outside_callback = callback;\n    }\n\n    setViewBox() {\n        // set viewBox and preserveAspectRatio of control_svg to be the same as diagram_svg\n        this.dnd_svg.setAttribute(\"viewBox\", this.diagram_svg.getAttribute(\"viewBox\") as string);\n        this.dnd_svg.setAttribute(\"preserveAspectRatio\", this.diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\n    }\n    drawSvg(){\n        for (let name in this.containers){\n            if (this.containers[name].svgelement) continue;\n            this.add_container_svg(name, this.containers[name].diagram);\n        }\n        for (let name in this.draggables){\n            if (this.draggables[name].svgelement) continue;\n            this.add_draggable_svg(name, this.draggables[name].diagram);\n        }\n        for (let name in this.containers)\n            this.reposition_container_content(name);\n    }\n\n    getData() : DragAndDropData {\n        let data : DragAndDropData = []\n        for (let name in this.containers){\n            data.push({container : name, content : this.containers[name].content});\n        }\n        return data;\n    }\n\n    setData(data : DragAndDropData) {\n        try {\n            for (let containerdata of data) {\n                for (let content of containerdata.content) {\n                    this.try_move_draggable_to_container(content, containerdata.container);\n                }\n            }\n        } catch (_e) {\n            console.error(\"the data is not valid\");\n        }\n    }\n\n    diagram_container_from_draggable(diagram : Diagram) : Diagram {\n        let rect = rectangle_corner(...diagram.bounding_box()).move_origin(diagram.origin);\n        return rect.strokedasharray([5]);\n    }\n\n    add_container_svg(name : string, diagram: Diagram) {\n        let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        f_draw_to_svg(svg, diagram.position(V2(0,0)), \n            false, false, calculate_text_scale(this.diagram_svg), dnd_type.container);\n        let position = diagram.origin;\n        svg.setAttribute(\"overflow\", \"visible\");\n        svg.setAttribute(\"x\", position.x.toString());\n        svg.setAttribute(\"y\", (-position.y).toString());\n        svg.setAttribute(\"class\", dnd_type.container);\n        this.dnd_svg.prepend(svg);\n\n        this.containers[name].svgelement = svg;\n        this.dom_to_id_map.set(svg, name);\n    }\n\n    add_draggable_svg(name : string, diagram : Diagram) {\n        let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        f_draw_to_svg(svg, diagram.position(V2(0,0)), true, false, calculate_text_scale(this.diagram_svg), dnd_type.draggable);\n        let position = diagram.origin;\n        svg.setAttribute(\"overflow\", \"visible\");\n        svg.setAttribute(\"x\", position.x.toString());\n        svg.setAttribute(\"y\", (-position.y).toString());\n        svg.setAttribute(\"class\", dnd_type.draggable);\n        svg.setAttribute(\"draggable\", \"true\");\n\n        svg.onmousedown = (evt) => {\n            this.draggedElementName = name;\n            this.startDrag(evt);\n        }\n        svg.ontouchstart = (evt) => {\n            this.draggedElementName = name;\n            this.startDrag(evt);\n        }\n\n        this.dnd_svg.append(svg);\n        this.draggables[name].svgelement = svg;\n        this.dom_to_id_map.set(svg, name);\n    }\n\n    reposition_container_content(container_name : string){\n        let container = this.containers[container_name];\n        if (container == undefined) return;\n        \n        if (this.sort_content) container.content.sort()\n        const position_map = this.generate_position_map(container.diagram, container.config, container.capacity, container.content);\n\n        for (let i = 0; i < container.content.length; i++) {\n            let draggable = this.draggables[container.content[i]];\n            let pos = position_map[i] ?? container.diagram.origin;\n            draggable.diagram = draggable.diagram.position(pos);\n            draggable.position = pos;\n            draggable.svgelement?.setAttribute(\"x\", pos.x.toString());\n            draggable.svgelement?.setAttribute(\"y\", (-pos.y).toString());\n        }\n    }\n    remove_draggable_from_container(draggable_name : string, container_name : string) {\n        this.containers[container_name].content = \n            this.containers[container_name].content.filter((name) => name != draggable_name);\n    }\n    move_draggable_to_container(draggable_name : string, container_name : string) {\n        let draggable = this.draggables[draggable_name];\n\n        // ignore if the draggable is already in the container\n        if (draggable.container == container_name) return;\n\n        let container = this.containers[container_name];\n        let original_container_name = draggable.container;\n\n        this.remove_draggable_from_container(draggable_name, original_container_name);\n        draggable.container = container_name;\n        container.content.push(draggable_name);\n\n        this.reposition_container_content(container_name);\n        this.reposition_container_content(original_container_name);\n\n        let draggedElement = this.draggables[draggable_name];\n        this.callbacks[draggedElement.name](draggedElement.position);\n    }\n\n    try_move_draggable_to_container(draggable_name : string, container_name : string) {\n        let draggable = this.draggables[draggable_name];\n        let container = this.containers[container_name];\n        if (container.content.length + 1 <= container.capacity) {\n            this.move_draggable_to_container(draggable_name, container_name);\n        } else if (container.capacity == 1){\n            // only swap if the container has only 1 capacity\n            // swap\n            let original_container_name = draggable.container;\n            let other_draggable_name = container.content[0];\n            this.move_draggable_to_container(other_draggable_name, original_container_name);\n            this.move_draggable_to_container(draggable_name, container_name);\n        }\n    }\n\n    startDrag(evt : DnDEvent) {\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\n        this.hoveredContainerName = null;\n\n        // reset container hovered class\n        this.reset_hovered_class();\n        // delete orphaned ghost\n        let ghosts = this.dnd_svg.getElementsByClassName(dnd_type.ghost);\n        for (let i = 0; i < ghosts.length; i++) ghosts[i].remove();\n        \n        // create a clone of the dragged element\n        if (this.draggedElementName == null) return;\n        let draggable = this.draggables[this.draggedElementName];\n        if (draggable.svgelement == undefined) return;\n        draggable.svgelement.classList.add(\"picked\");\n        this.draggedElementGhost = draggable.svgelement.cloneNode(true) as SVGElement;\n        // set pointer-events : none\n        this.draggedElementGhost.style.pointerEvents = \"none\";\n        this.draggedElementGhost.setAttribute(\"opacity\", \"0.5\");\n        this.draggedElementGhost.setAttribute(\"class\", dnd_type.ghost);\n        this.dnd_svg.append(this.draggedElementGhost);\n    }\n\n    get_dnd_element_data_from_evt(evt : DnDEvent) : {name : string, type : string} | null {\n        let element : HTMLElement | null = null;\n        if (window.TouchEvent && evt instanceof TouchEvent) { \n            let evt_touch = evt.touches[0];\n            element = document.elementFromPoint(evt_touch.clientX, evt_touch.clientY) as HTMLElement;\n        } else {\n            const evt_ = evt as MouseEvent\n            element = document.elementFromPoint(evt_.clientX, evt_.clientY) as HTMLElement;\n        }\n        if (element == null) return null;\n\n        if (element.localName == \"tspan\") element = element.parentElement;\n        if (element == null) return null;\n        \n        let dg_tag = element.getAttribute(\"_dg_tag\"); if (dg_tag == null) return null;\n\n        if (dg_tag == dnd_type.container) {\n            let parent = element.parentElement; if (parent == null) return null;\n            let name = this.dom_to_id_map.get(parent); if (name == null) return null;\n            return {name, type : dnd_type.container};\n        }\n        if (dg_tag == dnd_type.draggable) {\n            let parent = element.parentElement; if (parent == null) return null;\n            let name = this.dom_to_id_map.get(parent);  if (name == null) return null;\n            return {name, type : dnd_type.draggable};\n        }\n        return null;\n    }\n\n    drag(evt : DnDEvent) {\n        if (this.draggedElementName == null) return;\n        if (this.draggedElementGhost == null) return;\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\n\n        this.reset_hovered_class();\n        let element_data = this.get_dnd_element_data_from_evt(evt);\n        if (element_data == null) {\n            this.hoveredContainerName = null;\n        } else if (element_data.type == dnd_type.container) {\n            this.hoveredContainerName = element_data.name;\n            this.containers[element_data.name].svgelement?.classList.add(\"hovered\");\n        } else if (element_data.type == dnd_type.draggable) {\n            this.hoveredContainerName = this.draggables[element_data.name]?.container;\n            this.draggables[element_data.name].svgelement?.classList.add(\"hovered\");\n            // this.containers[this.hoveredContainerName]?.svgelement?.classList.add(\"hovered\");\n        }\n\n        let coord = getMousePosition(evt, this.dnd_svg);\n        this.draggedElementGhost.setAttribute(\"x\", coord.x.toString());\n        this.draggedElementGhost.setAttribute(\"y\", (-coord.y).toString());\n    }\n\n    endDrag(_evt : DnDEvent) {\n        if (this.hoveredContainerName != null && this.draggedElementName != null){\n            this.try_move_draggable_to_container(this.draggedElementName, this.hoveredContainerName);\n        }\n\n        // if dropped outside of any container\n        if (this.hoveredContainerName == null && this.draggedElementName != null \n            && this.dropped_outside_callback != null){\n            this.dropped_outside_callback(this.draggedElementName);\n        }\n\n        this.draggedElementName = null;\n        this.hoveredContainerName = null;\n        this.reset_hovered_class();\n        this.reset_picked_class();\n\n        if (this.draggedElementGhost != null){\n            this.draggedElementGhost.remove();\n            this.draggedElementGhost = null;\n        }\n    }\n\n    reset_hovered_class(){\n        for (let name in this.containers) {\n            this.containers[name].svgelement?.classList.remove(\"hovered\");\n        }\n        for (let name in this.draggables) {\n            this.draggables[name].svgelement?.classList.remove(\"hovered\");\n        }\n    }\n\n    reset_picked_class(){\n        for (let name in this.draggables) {\n            this.draggables[name].svgelement?.classList.remove(\"picked\");\n        }\n    }\n}\n\nclass ButtonHandler {\n    // callbacks : {[key : string] : (state : boolean) => any} = {};\n    states : {[key : string] : boolean} = {};\n    svg_element : {[key : string] : [SVGSVGElement,SVGSVGElement]} = {};\n    touchdownName : string | null = null;\n\n    constructor(public button_svg : SVGSVGElement, public diagram_svg : SVGSVGElement){\n    }\n\n    /** add a new toggle button if it doesn't exist, otherwise, update diagrams and callback */\n    try_add_toggle(name : string, diagram_on : Diagram, diagram_off : Diagram, state : boolean, callback : (state : boolean, redraw? : boolean) => any) : setter_function_t {\n        if (this.svg_element[name] != undefined) {\n            // delete the old button\n            let [old_svg_on, old_svg_off] = this.svg_element[name];\n            old_svg_on.remove();\n            old_svg_off.remove();\n        }\n        return this.add_toggle(name, diagram_on, diagram_off, state, callback);\n    }\n\n    add_toggle(name : string, diagram_on : Diagram, diagram_off : Diagram, state : boolean, callback : (state : boolean, redraw? : boolean) => any) : setter_function_t {\n        let svg_off = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        f_draw_to_svg(svg_off, diagram_off, true, false, calculate_text_scale(this.diagram_svg));\n        svg_off.setAttribute(\"overflow\", \"visible\");\n        svg_off.style.cursor = \"pointer\";\n\n        let svg_on = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        f_draw_to_svg(svg_on, diagram_on, true, false, calculate_text_scale(this.diagram_svg));\n        svg_on.setAttribute(\"overflow\", \"visible\");\n        svg_on.style.cursor = \"pointer\";\n\n        this.button_svg.appendChild(svg_off);\n        this.button_svg.appendChild(svg_on);\n        this.svg_element[name] = [svg_on, svg_off];\n\n        this.states[name] = state;\n\n        const set_display = (state : boolean) => {\n            svg_on.setAttribute(\"display\", state ? \"block\" : \"none\");\n            svg_off.setAttribute(\"display\", state ? \"none\" : \"block\");\n        }\n        set_display(this.states[name]);\n\n        const update_state = (state : boolean, redraw : boolean = true) => {\n            this.states[name] = state;\n            callback(this.states[name], redraw);\n            set_display(this.states[name]);\n        }\n\n        svg_on.onclick = (e) => { \n            e.preventDefault();\n            update_state(false); \n        };\n        svg_off.onclick = (e) => { \n            e.preventDefault();\n            update_state(true); \n        };\n        svg_on.ontouchstart = (e) => { \n            e.preventDefault();\n            this.touchdownName = name; \n        };\n        svg_off.ontouchstart = (e) => { \n            e.preventDefault();\n            this.touchdownName = name; \n        };\n\n        svg_on.ontouchend = () => { \n            if (this.touchdownName == name) update_state(false); \n            this.touchdownName = null;\n        };\n        svg_off.ontouchend = () => { \n            if (this.touchdownName == name) update_state(true); \n            this.touchdownName = null;\n        };\n\n        const setter = (state : boolean) => { update_state(state, false); }\n        return setter;\n    }\n\n    /** add a new click button if it doesn't exist, otherwise, update diagrams and callback */\n    try_add_click(name : string, diagram : Diagram, diagram_pressed : Diagram, callback : () => any){\n        if (this.svg_element[name] != undefined) {\n            // delete the old button\n            let [old_svg_normal, old_svg_pressed] = this.svg_element[name];\n            old_svg_normal.remove();\n            old_svg_pressed.remove();\n        }\n        this.add_click(name, diagram, diagram_pressed, callback);\n    }\n\n    // TODO: handle touch input moving out of the button\n    add_click(name : string, diagram : Diagram, diagram_pressed : Diagram, callback : () => any){\n        let svg_normal = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        f_draw_to_svg(svg_normal, diagram, true, false, calculate_text_scale(this.diagram_svg));\n        svg_normal.setAttribute(\"overflow\", \"visible\");\n        svg_normal.style.cursor = \"pointer\";\n\n        let svg_pressed = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        f_draw_to_svg(svg_pressed, diagram_pressed, true, false, calculate_text_scale(this.diagram_svg));\n        svg_pressed.setAttribute(\"overflow\", \"visible\");\n        svg_pressed.style.cursor = \"pointer\";\n\n        this.button_svg.appendChild(svg_normal);\n        this.button_svg.appendChild(svg_pressed);\n        this.svg_element[name] = [svg_normal, svg_pressed];\n\n        const set_display = (pressed : boolean) => {\n            svg_pressed.setAttribute(\"display\", pressed ? \"block\" : \"none\");\n            svg_normal.setAttribute(\"display\", pressed ? \"none\" : \"block\");\n        }\n        set_display(false);\n\n        svg_normal.onmousedown = (e) => {\n            e.preventDefault();\n            this.touchdownName = name;\n            set_display(true);\n        }\n        svg_normal.onmouseup = (e) => {\n            e.preventDefault();\n            this.touchdownName = null;\n        }\n        svg_pressed.onmouseleave = (_e) => { set_display(false); }\n        svg_pressed.onmousedown = (e) => {\n            e.preventDefault();\n            this.touchdownName = name;\n        }\n        svg_pressed.onmouseup = (_e) => {\n            if (this.touchdownName == name) callback();\n            this.touchdownName = null;\n            set_display(false);\n        }\n\n        svg_normal.ontouchstart = (e) => { \n            e.preventDefault();\n            this.touchdownName = name; \n            set_display(true);\n        };\n        svg_normal.ontouchend = (_e) => {\n            if (this.touchdownName == name) callback();\n            this.touchdownName = null;\n            set_display(false);\n        }\n        svg_pressed.ontouchstart = (e) => { \n            e.preventDefault();\n            this.touchdownName = name; \n            set_display(true);\n        };\n        svg_pressed.ontouchend = (_e) => {\n            if (this.touchdownName == name) callback();\n            this.touchdownName = null;\n            set_display(false);\n        }\n            \n            \n    }\n        \n}\n","import { Path, Diagram, DiagramType, diagram_combine, } from './diagram.js';\nimport { Vector2, V2, Vdir} from './vector.js';\nimport { linspace, linspace_exc, range } from './utils.js';\nimport { array_repeat } from './utils.js'\nimport { arrow1 } from './shapes.js';\nimport { TAG } from './tag_names.js';\n\ntype modifierFunction = (d : Diagram) => Diagram\n\n/**\n * convert a function that modifies a path of a diagram to a function that modifies a diagram\n * if the diagram is a polygon or curve, the function is applied directly to the diagram\n * if the diagram is a diagram, the function is recursively applied to all children\n * if the diagram is empty or text, the function is not applied\n * @param func function that modifies a path of a diagram\n*/\nfunction function_handle_path_type(func : modifierFunction) : modifierFunction {\n    function modified_func(d : Diagram) : Diagram {\n        if (d.type == DiagramType.Polygon || d.type == DiagramType.Curve ) {\n            // apply directly\n            return func(d);\n        } else if (d.type == DiagramType.Diagram) {\n            // recursively apply to all children\n            d.children = d.children.map(c => modified_func(c));\n            return d;\n        } else if (d.type == DiagramType.Text || d.type == DiagramType.MultilineText) {\n            // do nothing\n            return d;\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + d.type);\n        }\n    }\n    return modified_func;\n}\n\n\n/**\n * Resample a diagram so that it has `n` points\n * @param n number of points\n * @returns function that modifies a diagram\n */\nexport function resample(n : number) : modifierFunction{\n    // TODO : this function uses Diagram.parametric_point,\n    // which might be slow for large n\n    // for performance reason, we might want to implement it directly by calculating\n    // the points of the path here\n    function func(d : Diagram) : Diagram {\n        if (d.path == undefined) return d;\n        let ts = (d.type == DiagramType.Curve) ? linspace(0, 1, n) : linspace_exc(0, 1, n);\n        let new_points = ts.map(t => d.parametric_point(t));\n        d.path = new Path(new_points);\n        return d;\n    }\n    return function_handle_path_type(func);\n}\n\n/**\n * Subdivide each segment of a diagram into n segments\n * @param n number of segments to subdivide each segment into\n * @returns function that modifies a diagram\n */\nexport function subdivide(n : number = 100) : modifierFunction {\n    function func(d : Diagram) : Diagram {\n        if (d.path == undefined) return d;\n\n        let new_points : Vector2[] = [];\n        for (let i = 0; i < d.path.points.length; i++){\n            let curr_i = i;\n            let next_i = (curr_i + 1) % d.path.points.length;\n            let curr_p = d.path.points[i];\n            let next_p = d.path.points[next_i];\n\n            let xs = linspace(curr_p.x, next_p.x, n+1);\n            let ys = linspace(curr_p.y, next_p.y, n+1);\n            let subdivide_points = xs.map((x,i) => V2(x, ys[i]));\n            // ignore the last point\n            subdivide_points.pop();\n            new_points = new_points.concat(subdivide_points);\n        }\n\n        d.path = new Path(new_points);\n        return d;\n    }\n    return function_handle_path_type(func);\n}\n\n/**\n * Get a slice of a diagram from `t_start` to `t_end`\n * @param t_start starting point of the slice\n * @param t_end ending point of the slice\n * @param n number of points in the slice\n * @returns function that modifies a diagram\n */\nexport function slicepath(t_start : number, t_end : number, n : number = 100) : modifierFunction {\n    if (t_start > t_end) [t_start, t_end] = [t_end, t_start];\n    if (t_start < 0) t_start = 0;\n    if (t_end > 1) t_end = 1;\n\n    let n_total = Math.floor(n / (t_end - t_start));\n    function func(d : Diagram) : Diagram {\n        if (d.path == undefined) return d;\n        let dnew = d.apply(resample(n_total));\n        if (dnew.path == undefined) return d;\n        // take slice of the path\n        let new_points = dnew.path.points.slice(\n            Math.floor(t_start * n_total),\n            Math.floor(t_end * n_total) + 1\n        );\n        dnew.path = new Path(new_points);\n        return dnew;\n    }\n    return function_handle_path_type(func);\n}\n\n\nfunction get_round_corner_arc_points(radius : number, points : [Vector2,Vector2,Vector2], count : number) : Vector2[] {\n    let [p1, p2, p3] = points;\n\n    let v1 = p1.sub(p2).normalize();\n    let v3 = p3.sub(p2).normalize();\n    let corner_angle = Math.abs((v1.angle() - v3.angle()) % Math.PI);\n    let s_dist  = radius/Math.tan(corner_angle/2);\n\n    // s_dist can only be as long as half the distance to the closest point\n    let d1 = p1.sub(p2).length();\n    let d3 = p3.sub(p2).length();\n    // recalculate\n    s_dist = Math.min(s_dist, d1/2, d3/2);\n    radius = s_dist * Math.tan(corner_angle/2);\n\n    let pa = p2.add(v1.scale(s_dist));\n    let pb = p2.add(v3.scale(s_dist));\n    let distc = Math.sqrt(radius*radius + s_dist*s_dist);\n    let pc = p2.add(\n        v1.add(v3).normalize().scale(distc)\n    );\n\n    let angle_a = pa.sub(pc).angle();\n    let angle_b = pb.sub(pc).angle();\n    // if we just use angle_a and angle_b as is, the arc might be drawn in the wrong direction\n    // find out which direction is the correct one\n    // check whether angle_a is closer to angle_b, angle_b + 2π, or angle_b - 2π\n    let angle_b_plus  = angle_b + 2*Math.PI;\n    let angle_b_minus = angle_b - 2*Math.PI;\n    let angle_a_b       = Math.abs(angle_a - angle_b);\n    let angle_a_b_plus  = Math.abs(angle_a - angle_b_plus);\n    let angle_a_b_minus = Math.abs(angle_a - angle_b_minus);\n    if (angle_a_b_plus < angle_a_b)  angle_b = angle_b_plus;\n    if (angle_a_b_minus < angle_a_b) angle_b = angle_b_minus;\n\n    let arc_points = linspace(angle_a, angle_b, count).map(a => pc.add(Vdir(a).scale(radius)));\n    return arc_points;\n}\n\n/**\n * Create a function that modifies a diagram by rounding the corners of a polygon or curve\n * @param radius radius of the corner\n * @param point_indices indices of the points to be rounded\n * @returns function that modifies a diagram\n *\n * @example\n * ```javascript\n * let s = square(5).apply(mod.round_corner(2, [0,2]))\n * ```\n */\nexport function round_corner(radius : number | number[] =  1, point_indices? : number[], count : number = 40) : modifierFunction {\n    // if radius is a number, create an array of length one\n    if (typeof radius == \"number\") radius = [radius];\n\n    // create a function that modify the path of a diagram, (only works for polygon and curve)\n    // later we will convert it to a function that modifies any diagram using function_handle_path_type\n    function func(d : Diagram) : Diagram {\n        if (d.path == undefined) return d;\n        let diagram_point_indices = range(0, d.path.points.length);\n        if (point_indices == undefined) point_indices = diagram_point_indices;\n\n        // filter only the points that are in diagram_point_indices\n        point_indices = point_indices.filter(i => diagram_point_indices.includes(i));\n        // repeat the radius array to match the number of points\n        radius = array_repeat(radius as number[], point_indices.length);\n\n        let new_points : Vector2[] = [];\n        for (let i = 0; i < d.path.points.length; i++){\n            let curr_i = i;\n            if (!point_indices.includes(curr_i)) {\n                new_points.push(d.path.points[i]);\n                continue;\n            }\n            let prev_i = (curr_i - 1 + d.path.points.length) % d.path.points.length;\n            let next_i = (curr_i + 1) % d.path.points.length;\n            let prev_p = d.path.points[prev_i];\n            let curr_p = d.path.points[i];\n            let next_p = d.path.points[next_i];\n            let arc_points = get_round_corner_arc_points(\n                radius[point_indices.indexOf(curr_i)], [prev_p, curr_p, next_p], count);\n            new_points = new_points.concat(arc_points);\n        }\n\n        d.path = new Path(new_points);\n        return d;\n    }\n    return function_handle_path_type(func);\n}\n\n\n/**\n * Add an arrow to the end of a curve\n * Make sure the diagram this modifier is applied to is a curve\n * @param headsize size of the arrow head\n * @param flip flip the arrow position\n */\nexport function add_arrow(headsize : number, flip = false) : modifierFunction {\n    function func(c : Diagram) : Diagram {\n        if (c.path == undefined) return c;\n        let p1 = flip ? c.path.points[0] : c.path.points[c.path.points.length - 1];\n        let p0 = flip ? c.path.points[1] : c.path.points[c.path.points.length - 2];\n        let arrow = arrow1(p0, p1, headsize);\n        return diagram_combine(c, arrow).clone_style_from(c);\n    }\n    return function_handle_path_type(func);\n}\n\nfunction arrowhead_angle(d : Diagram) : number {\n    if (!d.contain_tag(TAG.ARROW_HEAD)) return NaN;\n    let points = d.path?.points\n    if (points == undefined) return NaN;\n    if (points.length != 3) return NaN;\n    let v_tip   = points[0];\n    let v_base1 = points[1];\n    let v_base2 = points[2];\n    let v_base  = v_base1.add(v_base2).scale(0.5)\n    let v_dir   = v_tip.sub(v_base);\n    return v_dir.angle();\n}\n\n/**\n* Replace arrowhead inside a diagram with another diagram\n* @param new_arrowhead diagram to replace the arrowhead with\n* The arrow will be rotated automatically,\n* The default direction is to the right (+x) with the tip at the origin\n*/\nexport function arrowhead_replace(new_arrowhead : Diagram) : modifierFunction {\n    return function func(d : Diagram) : Diagram {\n        return d.apply_to_tagged_recursive(TAG.ARROW_HEAD, (arrowhead : Diagram) => {\n            let angle = arrowhead_angle(arrowhead);\n            return new_arrowhead.copy().rotate(angle).position(arrowhead.origin);\n        })\n    }\n}\n","import { Diagram, line, curve, diagram_combine } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { linspace, range_inc } from '../utils.js';\nimport { arrow1, arrow2, textvar } from '../shapes.js'\nimport { TAG } from '../tag_names.js';\n\n/**\n * Options for axes\n * Since axes, plot, etc. are separate objects.\n * Axes options is used so that it's easier to have consistent\n * setting for multiple objects.\n */\nexport type axes_options = {\n    xrange    : [number, number],\n    yrange    : [number, number],\n    bbox?     : [Vector2, Vector2],\n    xticks?   : number[],\n    yticks?   : number[],\n    n_sample? : number,\n    ticksize  : number,\n    headsize  : number,\n    tick_label_offset? : number,\n}\n\nexport let default_axes_options : axes_options = {\n    // bbox   : [V2(-100,-100), V2(100,100)],\n    bbox     : undefined,\n    xrange   : [-2, 2],\n    yrange   : [-2, 2],\n    xticks   : undefined,\n    yticks   : undefined,\n    n_sample : 100,\n    ticksize : 0.1,\n    headsize : 0.05,\n    tick_label_offset : 0,\n}\n\nexport function axes_transform(axes_options? : Partial<axes_options>) : (v : Vector2) => Vector2 {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let [lowerleft, upperright] = opt.bbox;\n    let [xmin, xmax] = opt.xrange;\n    let [ymin, ymax] = opt.yrange;\n\n    return function(v : Vector2) : Vector2 {\n        let x = lowerleft.x + (v.x-xmin)/(xmax-xmin)*(upperright.x-lowerleft.x);\n        let y = lowerleft.y + (v.y-ymin)/(ymax-ymin)*(upperright.y-lowerleft.y);\n        return V2(x,y);\n    }\n}\nexport let ax = axes_transform\n\n\n/**\n * Draw xy axes without ticks\n * @param axes_options options for the axes\n * example: opt = {\n *    bbox   : [V2(-100,-100), V2(100,100)],\n * }\n * @returns a Diagram object\n */\nexport function axes_empty(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let [lowerleft, upperright] = opt.bbox;\n    // get the intersection point\n    let xorigin = lowerleft.x + (upperright.x-lowerleft.x)/(opt.xrange[1]-opt.xrange[0])*(0-opt.xrange[0]);\n    let yorigin = lowerleft.y + (upperright.y-lowerleft.y)/(opt.yrange[1]-opt.yrange[0])*(0-opt.yrange[0]);\n\n    let xaxis = arrow2(V2(lowerleft.x,yorigin), V2(upperright.x,yorigin), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    let yaxis = arrow2(V2(xorigin,lowerleft.y), V2(xorigin,upperright.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    return diagram_combine(xaxis, yaxis).stroke('gray').fill('gray');\n    // return xaxis;\n}\n\n/**\n * Draw xy corner axes without ticks\n * @param axes_options options for the axes\n * example: opt = {\n *    bbox   : [V2(-100,-100), V2(100,100)],\n * }\n * @returns a Diagram object\n */\nexport function axes_corner_empty(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let [lowerleft, upperright] = opt.bbox;\n    // get the intersection point\n\n    let xaxis = arrow1(lowerleft, V2(upperright.x,lowerleft.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    let yaxis = arrow1(lowerleft, V2(lowerleft.x,upperright.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    return diagram_combine(xaxis, yaxis).stroke('gray').fill('gray');\n    // return xaxis;\n}\n\n/**\n * Draw xy corner axes without ticks and with break mark in x axis\n * @param axes_options options for the axes\n */\nexport function axes_corner_empty_xbreak(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let [lowerleft, upperright] = opt.bbox;\n    // get the intersection point\n\n    let xbreak_ysize_ = opt.ticksize * 2;\n\n    if (opt.xticks == undefined) {\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], false);\n        opt.xticks = opt.xticks.filter(x => x > opt.xrange[0] && x < opt.xrange[1]);\n    }\n    let xbreak_xsize = (opt.xticks![1] - opt.xticks![0])/2;\n    let xbreak_xpos  = opt.xticks![0] - xbreak_xsize;\n    let trans_f = axes_transform(opt);\n\n    // suffix _ means in the transformed coordinate\n    let xbreak_pleft_  = trans_f(V2(xbreak_xpos - xbreak_xsize/2,0));\n    let xbreak_pright_ = trans_f(V2(xbreak_xpos + xbreak_xsize/2,0));\n    let xbreak_xsize_  = xbreak_pright_.x - xbreak_pleft_.x;\n    let xbreak_pbottom_= xbreak_pleft_.add(V2(xbreak_xsize_*1/3, -xbreak_ysize_/2));\n    let xbreak_ptop_   = xbreak_pleft_.add(V2(xbreak_xsize_*2/3, xbreak_ysize_/2));\n    let xbreak_curve   = curve([xbreak_pleft_, xbreak_pbottom_, xbreak_ptop_, xbreak_pright_]);\n\n    let xaxis_left = line(lowerleft, xbreak_pleft_);\n    let xaxis_right = arrow1(xbreak_pright_, V2(upperright.x,lowerleft.y), opt.headsize);\n    let xaxis = diagram_combine(xaxis_left, xbreak_curve, xaxis_right).append_tags(TAG.GRAPH_AXIS);\n    let yaxis = arrow1(lowerleft, V2(lowerleft.x,upperright.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    return diagram_combine(xaxis, yaxis).stroke('gray').fill('gray');\n}\n\n/**\n * Create a single tick mark in the x axis\n * @param x x coordinate of the tick mark\n * @param y y coordinate of the tick mark\n * @param height height of the tick mark\n */\nexport function xtickmark_empty(x : number, y : number, axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let height = opt.ticksize;\n    let pos = axes_transform(opt)(V2(x,y));\n    return line(V2(pos.x,pos.y+height/2), V2(pos.x,pos.y-height/2))\n        .stroke('gray').append_tags(TAG.GRAPH_TICK);\n}\n\nexport function xtickmark(x : number, y : number, str : string, axes_options? : Partial<axes_options>) : Diagram {\n    let tick = xtickmark_empty(x, y, axes_options);\n    let label = textvar(str).move_origin_text(\"top-center\").translate(tick.get_anchor(\"bottom-center\"))\n                .translate(V2(0, -(axes_options?.tick_label_offset || 0)))\n                .textfill('gray').append_tags(TAG.GRAPH_TICK_LABEL);\n    return diagram_combine(tick, label);\n}\n\n/**\n * Create a single tick mark in the y axis\n * @param y y coordinate of the tick mark\n * @param x x coordinate of the tick mark\n * @param height height of the tick mark\n */\nexport function ytickmark_empty(y : number, x : number, axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let height = opt.ticksize;\n    let pos = axes_transform(opt)(V2(x,y));\n    return line(V2(pos.x+height/2,pos.y), V2(pos.x-height/2,pos.y))\n        .stroke('gray').append_tags(TAG.GRAPH_TICK);\n}\nexport function ytickmark(y : number, x : number, str : string, axes_options? : Partial<axes_options>) : Diagram {\n    let tick = ytickmark_empty(y, x, axes_options);\n    let label = textvar(str).move_origin_text(\"center-right\").translate(tick.get_anchor(\"center-left\"))\n                .translate(V2(-(axes_options?.tick_label_offset || 0), 0))\n                .textfill('gray').append_tags(TAG.GRAPH_TICK_LABEL);\n    return diagram_combine(tick, label);\n}\n\n// ======= BEGIN utility to calculate ticks\n\nfunction get_tick_interval(min : number, max : number) : number {\n    let range = max-min;\n    let range_order = Math.floor(Math.log10(range));\n    let interval_to_try = [0.1, 0.15, 0.2, 0.5, 1.0].map(x => x*Math.pow(10,range_order));\n    let tick_counts = interval_to_try.map(x => Math.floor(range/x));\n    // choose the interval so that the number of ticks is between the biggest one but less than 10\n    for (let i = 0; i < tick_counts.length; i++) {\n        if (tick_counts[i] <= 10) {\n            return interval_to_try[i];\n        }\n    }\n    return interval_to_try.slice(-1)[0];\n}\n\nfunction get_tick_numbers_range(min : number, max : number) : number[] {\n    let interval = get_tick_interval(min, max);\n    // round min and max to the nearest interval\n    let new_min = Math.round(min/interval)*interval;\n    let new_max = Math.round(max/interval)*interval;\n    let new_count = Math.round((new_max-new_min)/interval);\n    let l = range_inc(0, new_count).map(x => new_min + x*interval);\n    // round l to the nearest interval\n    let interval_prec = -Math.floor(Math.log10(interval)-1);\n    if (interval_prec >= 0) l = l.map(x => parseFloat(x.toFixed(interval_prec)));\n    return l;\n}\nfunction get_tick_numbers_aroundzero(neg : number, pos : number, nozero : boolean = true) : number[] {\n    if (neg > 0) throw new Error('neg must be negative');\n    if (pos < 0) throw new Error('pos must be positive');\n    let magnitude = Math.max(-neg, pos);\n    let interval = get_tick_interval(-magnitude, magnitude);\n\n    // round min and max to the nearest interval\n    let new_min = Math.ceil(neg/interval)*interval;\n    let new_max = Math.floor(pos/interval)*interval;\n    let new_count = Math.floor((new_max-new_min)/interval);\n\n    let l = linspace(new_min, new_max, new_count+1);\n    // round l to the nearest interval\n    let interval_prec = -Math.floor(Math.log10(interval));\n    if (interval_prec >= 0) l = l.map(x => parseFloat(x.toFixed(interval_prec)));\n\n    if (nozero){\n        return l.filter(x => x != 0);\n    }else{\n        return l;\n    }\n}\nexport function get_tick_numbers(min : number, max : number, exclude_zero : boolean = true) : number[] {\n    if (exclude_zero && min < 0 && max > 0) {\n        return get_tick_numbers_aroundzero(min, max);\n    } else {\n        return get_tick_numbers_range(min, max);\n    }\n}\n\n// ======= END utility to calculate ticks\n\nexport function xticks(axes_options : Partial<axes_options>, y : number = 0, empty = false) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.xticks == undefined) {\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], y == 0);\n    }\n\n    // remove ticks outside of the range\n    // opt.xticks = opt.xticks.filter(x => x >= opt.xrange[0] && x <= opt.xrange[1]);\n    opt.xticks = opt.xticks.filter(x => x > opt.xrange[0] && x < opt.xrange[1]);\n\n    let xticks_diagrams = empty ? \n        opt.xticks.map(x => xtickmark_empty(x, y, opt)) :\n        opt.xticks.map(x => xtickmark(x, y, x.toString(), opt));\n    return diagram_combine(...xticks_diagrams);\n}\nexport function yticks(axes_options : Partial<axes_options>, x : number = 0, empty = false) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.yticks == undefined) {\n        opt.yticks = get_tick_numbers(opt.yrange[0], opt.yrange[1], x == 0);\n    }\n\n    // remove ticks outside of the range\n    // opt.yticks = opt.yticks.filter(y => y >= opt.yrange[0] && y <= opt.yrange[1]);\n    opt.yticks = opt.yticks.filter(y => y > opt.yrange[0] && y < opt.yrange[1]);\n\n    let yticks_diagrams = empty ? \n        opt.yticks.map(y => ytickmark_empty(y, x, opt)) :\n        opt.yticks.map(y => ytickmark(y, x, y.toString(), opt));\n    return diagram_combine(...yticks_diagrams);\n}\n\n\n/**\n * Draw xy corner axes with ticks\n * @param axes_options options for the axes\n */\nexport function xycorneraxes(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let xmin = opt.xrange[0];\n    let ymin = opt.yrange[0];\n    return diagram_combine(axes_corner_empty(opt), xticks(opt, ymin), yticks(opt, xmin));\n}\n\n/**\n * Draw xy corner axes with ticks and break mark in x axis\n * @param axes_options options for the axes\n */\nexport function xycorneraxes_xbreak(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let xmin = opt.xrange[0];\n    let ymin = opt.yrange[0];\n    return diagram_combine(axes_corner_empty_xbreak(opt), xticks(opt, ymin), yticks(opt, xmin));\n}\n\n\n/**\n * Draw xy axes with ticks\n * @param axes_options options for the axes\n */\nexport function xyaxes(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    return diagram_combine(axes_empty(opt), xticks(opt), yticks(opt));\n}\n\n/**\n * Draw x axis with ticks\n * @param axes_options options for the axis\n */\nexport function xaxis(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let ax_origin = axes_transform(opt)(V2(0,0));\n    let xaxis = arrow2(V2(opt.bbox[0].x, ax_origin.y), V2(opt.bbox[1].x, ax_origin.y), opt.headsize)\n        .append_tags(TAG.GRAPH_AXIS);\n    let xtickmarks = xticks(opt, 0);\n    return diagram_combine(xaxis, xtickmarks);\n}\n\n/**\n * Draw y axis with ticks\n * @param axes_options options for the axis\n */\nexport function yaxis(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let ax_origin = axes_transform(opt)(V2(0,0));\n    let yaxis = arrow2(V2(ax_origin.x, opt.bbox[0].y), V2(ax_origin.x, opt.bbox[1].y), opt.headsize)\n        .append_tags(TAG.GRAPH_AXIS);\n    let ytickmarks = yticks(opt, 0);\n    return diagram_combine(yaxis, ytickmarks);\n}\n\nexport function ygrid(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.xticks == undefined) {\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], false);\n    }\n\n    let ygrid_diagrams = opt.xticks.map(x => \n        line(V2(x,opt.yrange[0]), V2(x,opt.yrange[1])).transform(axes_transform(opt)).stroke('gray')\n    );\n    return diagram_combine(...ygrid_diagrams).append_tags(TAG.GRAPH_GRID);\n}\n\nexport function xgrid(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.yticks == undefined) {\n        opt.yticks = get_tick_numbers(opt.yrange[0], opt.yrange[1], false);\n    }\n\n    let xgrid_diagrams = opt.yticks.map(y =>\n        line(V2(opt.xrange[0],y), V2(opt.xrange[1],y)).transform(axes_transform(opt)).stroke('gray')\n    );\n    return diagram_combine(...xgrid_diagrams).append_tags(TAG.GRAPH_GRID);\n}\n\n//  TODO: add xticks and ytiks as argument\nexport function xygrid(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.xticks == undefined) {\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], false);\n    }\n    if (opt.yticks == undefined) {\n        opt.yticks = get_tick_numbers(opt.yrange[0], opt.yrange[1], false);\n    }\n\n    let xgrid_diagrams = opt.xticks.map(x => \n        line(V2(x,opt.yrange[0]), V2(x,opt.yrange[1])).transform(axes_transform(opt)).stroke('gray')\n    );\n    let ygrid_diagrams = opt.yticks.map(y =>\n        line(V2(opt.xrange[0],y), V2(opt.xrange[1],y)).transform(axes_transform(opt)).stroke('gray')\n    );\n    return diagram_combine(...xgrid_diagrams, ...ygrid_diagrams);\n\n}\n\n\n\n\n// TODO : \n// export function axes(axes_options? : Partial<axes_options>) : Diagram {\n//     let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n// }\n\n/**\n * Plot a curve given a list of points\n * @param data list of points\n * @param axes_options options for the axes\n * example: opt = {\n *  bbox   : [V2(-100,-100), V2(100,100)],\n *  xrange : [-2, 2],\n *  yrange : [-2, 2],\n * }\n */\nexport function plotv(data : Vector2[], axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let [xmin, xmax] = opt.xrange;\n    let [ymin, ymax] = opt.yrange;\n\n    // split data into segments that are within the range\n    let segments : Vector2[][] = [];\n    let current_segment : Vector2[] = [];\n    for (let i=0; i < data.length; i++) {\n        let p = data[i];\n        let is_inside = (p.x >= xmin && p.x <= xmax && p.y >= ymin && p.y <= ymax);\n        if (!is_inside) {\n            if (current_segment.length > 1) segments.push(current_segment);\n            current_segment = [];\n        } else {\n            current_segment.push(p);\n        }\n    }\n    if (current_segment.length > 1) segments.push(current_segment);\n\n    let d : Diagram;\n    // create separate paths for each segment\n    let path_diagrams = segments.map(segment => curve(segment));\n    if (path_diagrams.length == 1){\n        d = path_diagrams[0];\n    } else {\n        d = diagram_combine(...path_diagrams).stroke('black').fill('none');\n    }\n\n    return d.transform(axes_transform(opt));\n}\n\n/**\n * Plot a curve given xdata and ydata\n * @param xdata x coordinates of the data\n * @param ydata y coordinates of the data\n * @param axes_options options for the axes\n * example: opt = {\n *   bbox   : [V2(-100,-100), V2(100,100)],\n *   xrange : [-2, 2],\n *   yrange : [-2, 2],\n * }\n */\nexport function plot(xdata : number[], ydata : number[], axes_options? : Partial<axes_options>) : Diagram {\n    if (xdata.length != ydata.length) throw new Error('xdata and ydata must have the same length');\n    let vdata = xdata.map((x,i) => V2(x,ydata[i]));\n    return plotv(vdata, axes_options);\n}\n\n/**\n * Plot a function\n * @param f function to plot\n * @param n number of points to plot\n * @param axes_options options for the axes\n */\nexport function plotf(f : (x:number)=>number, axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let xdata = linspace(...opt.xrange, opt.n_sample);\n    let vdata = xdata.map(x => V2(x,f(x)));\n    return plotv(vdata, axes_options);\n}\n\nexport function under_curvef(f : (x:number)=>number, x_start : number, x_end : number,  axes_options? : Partial<axes_options> ) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n\n    let new_opt = {...opt}; // copy opt\n    new_opt.xrange = [x_start, x_end];\n    new_opt.bbox = undefined;\n\n    // draw plot from x_start to x_end\n    let fplot = plotf(f, new_opt);\n    let area_under = fplot.add_points([V2(x_end,0), V2(x_start,0)]).to_polygon();\n    return area_under.transform(axes_transform(opt));\n}\n","import { Diagram, line, diagram_combine, curve } from '../diagram.js';\nimport { arrow, textvar, arc } from '../shapes.js';\nimport { Vector2, V2 } from '../vector.js';\n\n/**\n * Create an annotation vector\n * @param v vector to be annotated\n * @param str string to be annotated (will be converted to mathematical italic)\n * if you don't want to convert to mathematical italic, use annotation.vector_text\n * @param arrow_head_size size of the arrow head\n * @param text_offset position offset of the text\n */\nexport function vector(v : Vector2, str? : string, text_offset? : Vector2, arrow_head_size? : number) : Diagram {\n    if (text_offset == undefined){ text_offset = V2(0,0); } // default value\n    let vec = arrow(v, arrow_head_size);\n    if (str == \"\" || str == undefined){ return vec; } // if str is empty, return only the vector\n\n    let txt = textvar(str).position(v.add(text_offset));\n    return diagram_combine(vec, txt);\n}\n\n/**\n * Create an annotation for angle\n * @param p three points to define the angle\n * @param str string to be annotated (will be converted to mathematical italic)\n * @param radius radius of the arc\n * @param text_offset position offset of the text\n * if given as a number, the text will be placed at the angle bisector with the given distance from the vertex\n * if given as a vector, the text will be placed at the given position offset\n */\nexport function angle(p : [Vector2, Vector2, Vector2], \n    str? : string, radius : number = 1 , text_offset? : Vector2 | number,\n) : Diagram {\n\n    let [p1, p2, p3] = p;\n    let va = p1.sub(p2);\n    let vb = p3.sub(p2);\n\n    if (text_offset == undefined){ text_offset = V2(0,0); } // default value\n    if (typeof text_offset == \"number\"){ \n        let vd = va.normalize().add(vb.normalize()).normalize().scale(text_offset);\n        text_offset = vd;\n    } \n\n    let angle_a = va.angle();\n    let angle_b = vb.angle();\n    // angle_b must be larger than angle_a\n    if (angle_b < angle_a){ angle_b += 2*Math.PI; }\n\n    let angle_arc = arc(radius, angle_b-angle_a).rotate(angle_a)\n        .add_points([V2(0,0)]).to_polygon();\n    if (str == \"\" || str == undefined){ return angle_arc.position(p2); } // if str is empty, return only the arc\n\n    let angle_text = textvar(str)\n        .translate(text_offset);\n\n    return diagram_combine(angle_arc, angle_text).position(p2);\n}\n\n/**\n * Create an annotation for angle (always be the smaller angle)\n * @param p three points to define the angle\n * @param str string to be annotated (will be converted to mathematical italic)\n * @param radius radius of the arc\n * @param text_offset position offset of the text\n * if given as a number, the text will be placed at the angle bisector with the given distance from the vertex\n * if given as a vector, the text will be placed at the given position offset\n */\nexport function angle_smaller(p : [Vector2, Vector2, Vector2],\n    str? : string, radius : number = 1 , text_offset? : Vector2 | number,\n) : Diagram {\n\n    let [p1, p2, p3] = p;\n    let va = p1.sub(p2);\n    let vb = p3.sub(p2);\n\n    let angle_a = va.angle();\n    let angle_b = vb.angle();\n    // angle_b must be larger than angle_a\n    if (angle_b < angle_a){ angle_b += 2*Math.PI; }\n    let dangle = angle_b - angle_a;\n\n\n    // if dangle is larger than 180 degree, swap the two vectors\n    let ps : typeof p = dangle > Math.PI ? [p3, p2, p1] : [p1, p2, p3];\n    return angle(ps, str, radius, text_offset);\n}\n\n/**\n * Create an annotation for right angle\n * make sure the angle is 90 degree\n * @param p three points to define the angle\n * @param size size of the square\n */\nexport function right_angle(p : [Vector2, Vector2, Vector2], size : number = 1) : Diagram {\n    let [p1, p2, p3] = p;\n    let p1_ = p1.sub(p2).normalize().scale(size).add(p2);\n    let p3_ = p3.sub(p2).normalize().scale(size).add(p2);\n    let p2_ = V2(p1_.x, p3_.y);\n    return curve([p1_, p2_, p3_]);\n}\n\nexport function length(p1 : Vector2, p2 : Vector2, str : string, offset : number, \n    tablength? : number, textoffset? : number, tabsymmetric : boolean = true\n) : Diagram {\n\n    // setup defaults\n    tablength = tablength ?? p2.sub(p1).length()/20;\n    textoffset = textoffset ?? offset * 2;\n\n    let v = p1.equals(p2) ? V2(0,0) : p2.sub(p1).normalize();\n    let n = V2(v.y, -v.x);\n    let pA = p1.add(n.scale(offset));\n    let pB = p2.add(n.scale(offset));\n\n    let tabA = tabsymmetric ?\n        line(pA.sub(n.scale(tablength/2)), pA.add(n.scale(tablength/2))) :\n        line(pA, pA.sub(n.scale(tablength)));\n    let tabB = tabsymmetric ?\n        line(pB.sub(n.scale(tablength/2)), pB.add(n.scale(tablength/2))) :\n        line(pB, pB.sub(n.scale(tablength)));\n    let lineAB = line(pA, pB);\n    let lines = diagram_combine(lineAB, tabA, tabB);\n\n    let pmid = p1.add(p2).scale(0.5);\n    let label = textvar(str).position(pmid.add(n.scale(textoffset)));\n\n    return diagram_combine(lines, label);\n}\n\n/**\n * Create a congruence mark\n * @param p1 start point of the line\n * @param p2 end point of the line\n * @param count number of marks\n * @param size size of the mark\n * @param gap gap between the marks\n */\nexport function congruence_mark(p1 : Vector2, p2 : Vector2, count : number, size : number = 1, gap? : number) : Diagram {\n    let v = p2.sub(p1)\n    let n_angle = Math.atan2(v.x, -v.y);\n    let p_mid = p1.add(p2).scale(0.5);\n    gap = gap ?? size/2;\n\n    let marks = [];\n    for (let i = 0; i < count; i++){\n        let l = line(V2(-size/2, i*gap), V2(size/2, i*gap));\n        marks.push(l)\n    }\n    let dg_marks = diagram_combine(...marks);\n    return dg_marks.rotate(n_angle).move_origin('center-center').position(p_mid);\n}\n\n/**\n * Create a parallel mark\n * @param p1 start point of the line\n * @param p2 end point of the line\n * @param count number of marks\n * @param size size of the mark\n * @param gap gap between the marks\n * @param arrow_angle angle of the arrow\n */\nexport function parallel_mark(p1 : Vector2, p2 : Vector2, count : number, size : number = 1, gap? : number, arrow_angle : number = 0.5) : Diagram {\n    let v = p2.sub(p1)\n    let n_angle = Math.atan2(v.x, -v.y);\n    let p_mid = p1.add(p2).scale(0.5);\n    gap = gap ?? size/2;\n\n    let marks = [];\n    let dy = size/2 * Math.cos(arrow_angle);\n    for (let i = 0; i < count; i++){\n        let p0 = V2(0, i*gap - dy);\n        let l1 = line(V2(-size/2, i*gap), p0)\n        let l2 = line(V2(size/2, i*gap), p0)\n        marks.push(l1.combine(l2));\n    }\n    let dg_marks = diagram_combine(...marks);\n    return dg_marks.rotate(n_angle).move_origin('center-center').position(p_mid);\n}\n","import { Diagram, polygon, curve } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { linspace } from '../utils.js';\n\n/**\n * Create an inclined plane.\n * @param length The length of the inclined plane.\n * @param angle The angle of the inclined plane.\n * @returns A diagram of the inclined plane.\n */\nexport function inclined_plane(length : number, angle : number) : Diagram {\n    return polygon([V2(0,0), V2(length, length*Math.tan(angle)), V2(length,0)]);\n}\n\n/**\n * Create a spring between two points.\n * @param p1 The first point.\n * @param p2 The second point.\n * @param radius The radius of the spring.\n * @param coil_number The number of coils in the spring.\n * @param separation_coefficient The coefficient of separation between coils.\n * \\* at 0, no coils are overlapping. (there is no max value)\n * @param sample_number The number of points to sample in the spring.\n * @returns A diagram of the spring.\n */\nexport function spring(p1 : Vector2, p2 : Vector2, radius : number = 1, coil_number : number = 10,\n    separation_coefficient : number = 0.5, sample_number : number = 100) : Diagram {\n\n    // I got this equation from https://www.reddit.com/r/desmos/comments/i3m3yd/interactive_spring_graphic/\n\n    let angle  = p2.sub(p1).angle();\n    let length = p2.sub(p1).length();\n\n    // abbrev\n    let R = separation_coefficient;\n    let n = coil_number;\n\n    let k = radius/R; // k*R = radius\n\n    let a = (2 * n + 1) * Math.PI;\n    let b = (length - 2*R) / a;\n\n    let parametric_function = (t : number) => V2(b*t + R - R*Math.cos(t), k*R*Math.sin(t));\n    let points = linspace(0, a, sample_number).map(parametric_function);\n    return curve(points).rotate(angle).translate(p1);\n}\n","import { Diagram, line, text, diagram_combine } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { rectangle, } from '../shapes.js'\nimport { axes_options, yticks, axes_transform } from './shapes_graph.js'\n\nexport type bar_options = {\n    gap : number,\n    yrange? : [number, number],\n    yticks? : number[],\n    bbox? : [Vector2, Vector2],\n    ticksize : number,\n}\n\nexport let default_bar_options : bar_options = {\n    gap: 0.1,\n    ticksize: 0.2,\n    bbox: [V2(0,0), V2(10,10)],\n}\n\n\nfunction to_ax_options(datavalues : number[], baropt : Partial<bar_options>) : axes_options {\n    let opt = {...default_bar_options, ...baropt}; // use default if not defined\n    let n = datavalues.length;\n\n    let ymax = Math.max(...datavalues);\n    let yrange = opt.yrange ?? [0, ymax];\n    let bbox = opt.bbox ?? [V2(0,0), V2(10,ymax)];\n\n    let ax_opt : axes_options = {\n        xrange   : [-1, n],\n        yrange   : yrange,\n        headsize : 0,\n        ticksize : opt.ticksize,\n        bbox     : bbox,\n    }\n    return ax_opt;\n}\n\n/**\n * Plot a bar chart\n * @param datavalues the data values to plot\n * @param bar_options options for the bar chart\n * @returns a diagram of the bar chart\n */\nexport function plot(datavalues : number[], bar_options : Partial<bar_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n\n    let ax_opt = to_ax_options(datavalues, opt);\n    let ax_f = axes_transform(ax_opt);\n\n    let bar_arr = datavalues.map((y,i) => \n        rectangle(1.0-opt.gap, y).move_origin('bottom-center')\n            .position(V2(Number(i), 0)).transform(ax_f)\n    );\n    return diagram_combine(...bar_arr);\n}\n\n/**\n * x-axes with label for bar chart\n * @param datanames the data names\n * @param bar_options options for the bar chart\n * @returns a diagram of the x-axes\n */\nexport function xaxes(datanames : string[], bar_options : Partial<bar_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let n = datanames.length;\n\n    let ax_opt = to_ax_options(datanames.map(() => 1), opt);\n    let ax_f = axes_transform(ax_opt);\n\n    let l = line(V2(-1,0), V2(n,0)).transform(ax_f).stroke('gray');\n    let label_arr = datanames.map((name,i) => \n        text(name).move_origin_text('top-center').position(V2(Number(i), 0)).transform(ax_f)\n            .translate(V2(0,-opt.ticksize/2)).textfill('gray')\n    );\n    return diagram_combine(l, ...label_arr);\n}\n\n/**\n * y-axes with label for bar chart\n * @param datavalues the data values\n * @param bar_options options for the bar chart\n */\nexport function yaxes(datavalues : number[], bar_options : Partial<bar_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n\n    let ax_opt = to_ax_options(datavalues, opt);\n\n    let ymax   = ax_opt.yrange[1];\n    let yrange = opt.yrange ?? [0, ymax];\n\n    let ax_f = axes_transform(ax_opt);\n\n    let l = line(V2(-1,0), V2(-1,yrange[1])).transform(ax_f).stroke('gray');\n    return yticks(ax_opt, -1).combine(l);\n}\n\nexport function axes_tansform(datavalues : number[], bar_options : Partial<bar_options> = {}) : (v : Vector2) => Vector2 {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let ax_opt = to_ax_options(datavalues, opt);\n    return axes_transform(ax_opt);\n}\n","import { Diagram, diagram_combine } from '../diagram.js';\nimport { rectangle_corner } from '../shapes.js';\nimport { V2, Vector2 } from '../vector.js';\nimport { transpose, expand_directional_value } from '../utils.js';\nimport { TAG } from '../tag_names.js';\n\nenum TableOrientation {\n    ROWS    = 'rows',\n    COLUMNS = 'columns',\n}\n\nexport type cell_style = { index : [number,number], fill? : string, stroke? : string, strokewidth? : number };\n\n/**\n * Create a table with diagrams inside\n * @param diagrams 2D array of diagrams\n * @param orientation orientation of the table (default: 'rows')\n * can be 'rows' or 'columns'\n * @param min_rowsize minimum size of each row\n * @param min_colsize minimum size of each column\n * @returns a diagram of the table with the diagrams inside\n */\nexport function table(diagrams : Diagram[][], padding : number | number[] = 0, orientation : TableOrientation = TableOrientation.ROWS, \n    min_rowsize : number = 0, min_colsize : number = 0) : Diagram {\n    // if the orientation is columns, then we just transpose the rows and columns\n    let diagram_rows = orientation == TableOrientation.ROWS ? diagrams : transpose(diagrams);\n\n    const pad = expand_directional_value(padding);\n    function f_size(d? : Diagram) : [number, number] {\n        if (d == undefined) return [min_colsize, min_rowsize];\n        let [bottomleft, topright] = d.bounding_box();\n        let width  = topright.x - bottomleft.x + pad[1] + pad[3];\n        let height = topright.y - bottomleft.y + pad[0] + pad[2];\n        return [width, height];\n    }\n\n    let row_count = diagram_rows.length;\n    let col_count = Math.max(...diagram_rows.map(row => row.length));\n    let rowsizes : number[] = Array(row_count).fill(min_rowsize);\n    let colsizes : number[] = Array(col_count).fill(min_colsize);\n    // find the maximum size of each row and column\n    for (let r = 0; r < row_count; r++) {\n        for (let c = 0; c < col_count; c++) {\n            let [w, h] = f_size(diagram_rows[r][c]);\n            rowsizes[r] = Math.max(rowsizes[r], h);\n            colsizes[c] = Math.max(colsizes[c], w);\n        }\n    }\n\n    return fixed_size(diagrams, rowsizes, colsizes, orientation);\n}\n\n/**\n * Style the cells of a table\n * @param table_diagram a diagram of a table\n * @param styles an array of cell styles\n * each style has an index of the cell and the style\n * e.g. { index : [0,0], fill : 'red', stroke : 'black', strokewidth : 2 }\n * not all styles are required\n * e.g. { index : [0,0], fill : 'red' }\n * @returns a new diagram with the cells styled\n */\nexport function style_cell(table_diagram : Diagram, styles : cell_style[]) : Diagram {\n    let newd = table_diagram.copy();\n    if (table_diagram.tags.includes(TAG.CONTAIN_TABLE)) {\n        let table_index = newd.children.findIndex(d => d.tags.includes(TAG.TABLE));\n        let new_table = style_cell(newd.children[table_index], styles);\n        newd.children[table_index] = new_table;\n        return newd;\n    }\n    else if (!table_diagram.tags.includes(TAG.TABLE)) { return table_diagram; }\n\n    for (let style of styles) {\n        let [r, c] = style.index;\n        let cell = newd.children[r].children[c];\n        if (style.fill) { cell = cell.fill(style.fill); }\n        if (style.stroke) { cell = cell.stroke(style.stroke); }\n        if (style.strokewidth) { cell = cell.strokewidth(style.strokewidth); }\n        newd.children[r].children[c] = cell;\n    }\n    return newd;\n}\n\n/**\n * Create a table with fixed size\n * @param diagrams 2D array of diagrams\n * @param rowsizes size of each row\n * if `rowsizes.length` is less than `diagrams.length`, the last value will be repeated\n * e.g. [1,2,3] -> [1,2,3,3,3]\n * @param colsizes size of each column\n * if `colsizes.length` is less than `diagrams[0].length`, the last value will be repeated\n * @param orientation orientation of the table (default: 'rows')\n * can be 'rows' or 'columns'\n * @returns a diagram of the table with the diagrams inside\n */\nexport function fixed_size(diagrams : Diagram[][], rowsizes : number[], colsizes : number[]\n    , orientation : TableOrientation = TableOrientation.ROWS ) : Diagram \n{\n    // if the orientation is columns, then we just transpose the rows and columns\n    let diagram_rows = orientation == TableOrientation.ROWS ? diagrams : transpose(diagrams);\n    let row_count = diagram_rows.length;\n    let col_count = Math.max(...diagram_rows.map(row => row.length));\n\n    let table = empty_fixed_size(row_count, col_count, rowsizes, colsizes);\n    let points = get_points(table);\n\n    let diagram_grid : Diagram[] = [];\n    for (let r = 0; r < row_count; r++) {\n        for (let c = 0; c < col_count; c++) {\n            let d = diagram_rows[r][c];\n            if (d == undefined) continue;\n            d = d.move_origin('center-center').position(points[r][c])\n                .append_tags(TAG.TABLE_CONTENT)\n                .append_tags(TAG.ROW_ + r)\n                .append_tags(TAG.COL_ + c);\n            diagram_grid.push(d);\n        }\n    }\n    let diagram_grid_combined = diagram_combine(...diagram_grid);\n    return diagram_combine(table, diagram_grid_combined).append_tags(TAG.CONTAIN_TABLE);\n}\n\n/**\n * Create an empty table with fixed size\n * @param row_count number of rows\n * @param col_count number of columns\n * @param rowsizes size of each row\n * if `rowsizes.length` is less than `row_count`, the last value will be repeated\n * e.g. [1,2,3] -> [1,2,3,3,3]\n * @param colsizes size of each column\n * if `colsizes.length` is less than `col_count`, the last value will be repeated\n */\nexport function empty_fixed_size(row_count : number, col_count : number, \n    rowsizes : number[], colsizes : number[]) : Diagram \n{\n    while (rowsizes.length < row_count) { rowsizes.push(rowsizes[rowsizes.length-1]); }\n    while (colsizes.length < col_count) { colsizes.push(colsizes[colsizes.length-1]); }\n\n    let rows : Diagram[] = [];\n    let y_top = 0;\n    for (let r = 0; r < row_count; r++) {\n        let y_bot   = y_top - rowsizes[r];\n        let x_left = 0;\n        let cols : Diagram[] = [];\n        for (let c = 0; c < col_count; c++) {\n            let x_right = x_left + colsizes[c];\n            let x_mid = (x_left + x_right) / 2;\n            let y_mid = (y_top + y_bot) / 2;\n\n            //TODO: draw line instead of recangles\n            let rect = rectangle_corner(V2(x_left, y_bot), V2(x_right, y_top)).move_origin(V2(x_mid, y_mid))\n                .append_tags(TAG.TABLE_CELL)\n                .append_tags(TAG.ROW_ + r)\n                .append_tags(TAG.COL_ + c);\n            cols.push(rect);\n            x_left = x_right;\n        }\n        rows.push(diagram_combine(...cols));\n        y_top = y_bot;\n    }\n\n    return diagram_combine(...rows).append_tags(TAG.TABLE);\n}\n\n/**\n * Get the midpoints of the cells from a table diagram\n * @param table_diagram a table diagram\n * @returns a 2D array of points\n * the first index is the row, the second index is the column\n */\nexport function get_points(table_diagram : Diagram) : Vector2[][] {\n    let table_diagram_ = table_diagram;\n    if (table_diagram.tags.includes(TAG.CONTAIN_TABLE)) {\n        for (let d of table_diagram.children){\n            if (d.tags.includes(TAG.TABLE)) {\n                table_diagram_ = d;\n                break;\n            }\n        }\n    }\n    if (!table_diagram_.tags.includes(TAG.TABLE)) return [];\n\n    let rows : Vector2[][] = [];\n    for (let row of table_diagram_.children){\n        let cols : Vector2[] = [];\n        for (let cell of row.children){\n            cols.push(cell.origin);\n        }\n        rows.push(cols);\n    }\n    return rows;\n}\n","import { Diagram, line, text, diagram_combine } from '../diagram.js';\nimport { V2 } from '../vector.js';\nimport { arrow2 } from '../shapes.js'\nimport { TAG } from '../tag_names.js';\n\n/**\n * Draw an empty axis from xmin to xmax with arrowsize\n * @param xmin minimum value of the numberline\n * @param xmax maximum value of the numberline\n * @param arrowsize the size of the arrowhead\n * returns a Diagram\n */\nexport function axis(xmin : number, xmax : number, arrowsize : number = 1) : Diagram {\n    return arrow2(V2(xmin, 0), V2(xmax,0), arrowsize).fill('black').append_tags(TAG.GRAPH_AXIS);\n}\n\n/**\n * Draw a numbered ticks for a numberline\n * @param xs the values of the ticks\n * @param ticksize the size of the ticks\n * @param number_offset the offset of the number from the ticks\n * returns a Diagram\n */\nexport function numbered_ticks(xs : number[], ticksize : number, number_offset : number) : Diagram {\n    let d_ticks : Diagram[] = [];\n    for (let i of xs) {\n        let tick = line(V2(i, -ticksize/2), V2(i, ticksize/2)).stroke('black').append_tags(TAG.GRAPH_TICK);\n        let num  = text(i.toString()).move_origin('top-center').position(V2(i, -ticksize/2 - number_offset))\n            .append_tags(TAG.GRAPH_TICK_LABEL);\n        d_ticks.push(diagram_combine(tick, num));\n    }\n    return diagram_combine(...d_ticks);\n}\n\n/**\n * Draw ticks for a numberline\n * @param xs the values of the ticks\n * @param ticksize the size of the ticks\n * returns a Diagram\n */\nexport function ticks(xs : number[], ticksize : number) : Diagram {\n    let d_ticks : Diagram[] = [];\n    for (let i of xs) {\n        let tick = line(V2(i, -ticksize/2), V2(i, ticksize/2)).stroke('black').append_tags(TAG.GRAPH_TICK);\n        d_ticks.push(tick);\n    }\n    return diagram_combine(...d_ticks);\n}\n\n/**\n * Draw a single tick for a numberline\n * @param x the value of the tick\n * @param txt the text of the tick\n * @param ticksize the size of the tick\n * @param text_offset the offset of the text from the tick\n * returns a Diagram\n */\nexport function single_tick(x : number, txt : string, ticksize : number, text_offset : number) : Diagram {\n    let tick = line(V2(x, -ticksize/2), V2(x, ticksize/2)).stroke('black').append_tags(TAG.GRAPH_TICK);\n    if (txt == '') return tick;\n\n    let num  = text(txt).move_origin('top-center').position(V2(x, -ticksize/2 - text_offset))\n        .append_tags(TAG.GRAPH_TICK_LABEL);\n    return diagram_combine(tick, num);\n}\n","import { Diagram, line, text, diagram_combine } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { rectangle, arrow2 } from '../shapes.js'\nimport { axes_options, xticks, yticks, axes_transform, xtickmark_empty, ytickmark_empty } from './shapes_graph.js'\n\nexport type boxplot_options = {\n    range? : [number, number],\n    ticks? : number[],\n    bbox? : [Vector2, Vector2],\n    ticksize : number,\n    headsize : number,\n    orientation : 'x' | 'y',\n    tick_label_offset? : number,\n}\n\nexport let default_bar_options : boxplot_options = {\n    ticksize: 0.2,\n    range : [0,1],\n    bbox: [V2(0,0), V2(10,10)],\n    orientation: 'x',\n    headsize : 0.05,\n    tick_label_offset : 0,\n}\n\nexport function to_ax_options(baropt : Partial<boxplot_options>) : axes_options {\n    let opt = {...default_bar_options, ...baropt}; // use default if not defined\n    opt.bbox = opt.bbox ?? [V2(0,0), V2(10,10)]; // just to make sure it is defined\n\n    if (opt.orientation == 'x') {\n        let ax_opt : axes_options = {\n            xrange   : opt.range as [number, number],\n            yrange   : [opt.bbox[0].y, opt.bbox[1].y],\n            xticks   : opt.ticks,\n            headsize : opt.headsize,\n            ticksize : opt.ticksize,\n            bbox     : opt.bbox,\n            tick_label_offset : opt.tick_label_offset,\n        }\n        return ax_opt;\n    } else {\n        let ax_opt : axes_options = {\n            xrange   : [opt.bbox[0].x, opt.bbox[1].x],\n            yrange   : opt.range as [number, number],\n            yticks   : opt.ticks,\n            headsize : opt.headsize,\n            ticksize : opt.ticksize,\n            bbox     : opt.bbox,\n            tick_label_offset : opt.tick_label_offset,\n        }\n        return ax_opt;\n    }\n}\n\n\n/**\n * axis for boxplot\n * @param bar_options options for the bar chart\n * @returns a diagram of the axes\n */\nexport function axes(bar_options : Partial<boxplot_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let ax_opt = to_ax_options(opt);\n    // let ax_f = axes_transform(ax_opt);\n\n    let [lowerleft, upperright] = opt.bbox as [Vector2, Vector2];\n\n    if (opt.orientation == 'x') {\n        let xaxis = arrow2(V2(lowerleft.x,0), V2(upperright.x,0), opt.headsize);\n        let xtickmarks = xticks(ax_opt, 0);\n        return diagram_combine(xaxis, xtickmarks).stroke('gray').fill('gray');\n    } else {\n        let yaxis = arrow2(V2(0,lowerleft.y), V2(0,upperright.y), opt.headsize);\n        let ytickmarks = yticks(ax_opt, 0);\n        return diagram_combine(yaxis, ytickmarks).stroke('gray').fill('gray');\n    }\n}\n\n/**\n */\nexport function empty_tickmarks(xs: number[], bar_options : Partial<boxplot_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let ax_opt = to_ax_options(opt);\n    // let ax_f = axes_transform(ax_opt);\n    if (opt.orientation == 'x') {\n        ax_opt.xticks = xs;\n        return xticks(ax_opt, 0, true);\n    } else {\n        ax_opt.yticks = xs;\n        return yticks(ax_opt, 0, true);\n    }\n}\n\n/**\n * Plot a boxplot from quartiles\n * @param quartiles [Q0, Q1, Q2, Q3, Q4]\n * @param pos position of the boxplot\n * @param size size of the boxplot\n * @param bar_options options for the bar chart\n * @returns a diagram of the boxplot\n */\nexport function plotQ(quartiles : number[], pos : number, size : number, bar_options : Partial<boxplot_options>){\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let ax_opt = to_ax_options(opt);\n    let ax_f = axes_transform(ax_opt);\n    let [Q0, Q1, Q2, Q3, Q4] = quartiles;\n\n    let whisker_size = 0.8 * size;\n    if (opt.orientation == 'x') {\n        let box = rectangle(Q3-Q1, size).move_origin('center-left').position(V2(Q1, pos)).transform(ax_f);\n        let min    = line(V2(Q0, pos - whisker_size/2), V2(Q0, pos + whisker_size/2)).transform(ax_f);\n        let max    = line(V2(Q4, pos - whisker_size/2), V2(Q4, pos + whisker_size/2)).transform(ax_f);\n        let median = line(V2(Q2, pos - size/2), V2(Q2, pos + size/2)).transform(ax_f);\n        let whisker_min = line(V2(Q0, pos), V2(Q1, pos)).transform(ax_f);\n        let whisker_max = line(V2(Q3, pos), V2(Q4, pos)).transform(ax_f);\n        return diagram_combine(box, min, max, median, whisker_min, whisker_max);\n    } else {\n        let box = rectangle(size, Q3-Q1).move_origin('bottom-center').position(V2(pos, Q1)).transform(ax_f);\n        let min    = line(V2(pos - whisker_size/2, Q0), V2(pos + whisker_size/2, Q0)).transform(ax_f);\n        let max    = line(V2(pos - whisker_size/2, Q4), V2(pos + whisker_size/2, Q4)).transform(ax_f);\n        let median = line(V2(pos - size/2, Q2), V2(pos + size/2, Q2)).transform(ax_f);\n        let whisker_min = line(V2(pos, Q0), V2(pos, Q1)).transform(ax_f);\n        let whisker_max = line(V2(pos, Q3), V2(pos, Q4)).transform(ax_f);\n        return diagram_combine(box, min, max, median, whisker_min, whisker_max);\n    }\n}\n\n// TODO: plot boxplot from data\n// TODO: plot multiple boxplots at once\n","import { Diagram, line as dgline, text, diagram_combine, empty  } from '../diagram.js';\nimport { circle, textvar } from '../shapes.js';\nimport { V2, Vector2, Vdir } from '../vector.js';\n\nenum GeoType {\n    LINE = 'LINE',\n}\nexport type GeoCtx = {[key : string] : (GeoObj | Vector2 | number)}\nexport interface GeoObj { type : GeoType; }\n\nexport interface GeoLine extends GeoObj {\n    type : GeoType.LINE;\n    p : Vector2\n    dir : Vector2 // not necessarily a unit vector\n}\n// TODO : CeoCircle\n\nexport function intersect(o1 : GeoObj, o2 : GeoObj) : Vector2[] {\n    if (o1.type === GeoType.LINE && o2.type === GeoType.LINE) {\n        let l1 = o1 as GeoLine;\n        let l2 = o2 as GeoLine;\n        let p = line_intersection(l1, l2);\n        return [p]\n    }\n    return [];\n}\n\n\n/**\n * Get a point that is `d` distance away from `p` in the direction of `dir`\n * *ideally, point `p` should be in line `l`*\n */\nexport function point_onLine_atDistance_from(l : GeoLine, d : number, p : Vector2) : Vector2 {\n    let dir = l.dir.normalize();\n    return p.add(dir.scale(d));\n}\n\n/**\n * Get a point\n * - that is collinear with `p1` and `p2`\n * - that is `len` away from `p2` in the direction away from `p1`\n */\nexport function point_collinear_extend_length(p1 : Vector2, p2 : Vector2, len : number) : Vector2 {\n    let dir = p2.sub(p1).normalize();\n    return p2.add(dir.scale(len));\n}\n\n/** Get a point that is `t` fraction of the way from `p1` to `p2` */\nexport function point_collinear_fraction(p1 : Vector2, p2 : Vector2, t : number) : Vector2 {\n    let dir = p2.sub(p1);\n    return p1.add(dir.scale(t));\n}\n\n/** Get a point on line `l` with x-coordinate `x` */\nexport function point_onLine_with_x(l : GeoLine, x : number) : Vector2 {\n    let m = l.dir.y / l.dir.x;\n    let c = l.p.y - m * l.p.x;\n    return V2(x, m * x + c);\n}\n\n/** Get a point on line `l` with y-coordinate `y` */\nexport function point_onLine_with_y(l : GeoLine, y : number) : Vector2 {\n    let m = l.dir.y / l.dir.x;\n    let c = l.p.y - m * l.p.x;\n    return V2((y - c) / m, y);\n}\n\n\n/** Get the intersection point of two lines */\nexport function line_intersection(l1 : GeoLine, l2 : GeoLine) : Vector2 {\n    let a1 = l1.p; let b1 = l1.p.add(l1.dir);\n    let a2 = l2.p; let b2 = l2.p.add(l2.dir);\n\n    let x1 = a1.x; let y1 = a1.y; let x2 = b1.x; let y2 = b1.y;\n    let x3 = a2.x; let y3 = a2.y; let x4 = b2.x; let y4 = b2.y;\n\n    let d = (x1-x2)*(y3-y4) - (y1-y2)*(x3-x4);\n    let x = ((x1*y2 - y1*x2)*(x3-x4) - (x1-x2)*(x3*y4 - y3*x4))/d;\n    let y = ((x1*y2 - y1*x2)*(y3-y4) - (y1-y2)*(x3*y4 - y3*x4))/d;\n    return V2(x, y);\n}\n\n\n// Constructing lines\nexport function line(p : Vector2, dir : Vector2) : GeoLine {\n    return {type:GeoType.LINE, p, dir};\n}\nexport function line_from_points(p1 : Vector2, p2 : Vector2) : GeoLine {\n    return line(p1, p2.sub(p1));\n}\nexport function line_from_slope(p : Vector2, slope : number) : GeoLine {\n    return line(p, V2(1, slope));\n}\nexport function line_from_angle(p : Vector2, angle : number) : GeoLine {\n    return line(p, Vdir(angle));\n}\n\n/** Define a line that is parallel to `l` and passes through `p` */\nexport function line_parallel_at_point(l : GeoLine, p : Vector2) : GeoLine {\n    return line(p, l.dir);\n}\n/** Define a line that is perpendicular to `l` and passes through `p` */\nexport function line_perpendicular_at_point(l : GeoLine, p : Vector2) : GeoLine {\n    return line(p, V2(-l.dir.y, l.dir.x));\n}\n/** Define a line that has the direction of `l` rotated by `angle` and passes through `p` */\nexport function line_rotated_at_point(l : GeoLine, angle : number, p : Vector2) : GeoLine {\n    return line(p, l.dir.rotate(angle));\n}\n\nfunction line_intersect_bbox(l : GeoLine, bbox : [Vector2, Vector2]) : Diagram | undefined {\n    let [bottom_left, top_right] = bbox;\n    let bl = bottom_left;\n    let tr = top_right;\n    let tl = V2(bl.x, tr.y);\n    let br = V2(tr.x, bl.y);\n    let intersections = [\n        line_intersection(l, line_from_points(tl, tr)),\n        line_intersection(l, line_from_points(tr, br)),\n        line_intersection(l, line_from_points(br, bl)),\n        line_intersection(l, line_from_points(bl, tl)),\n    ];\n    const tol = 1e-6; // tolerance\n    const is_inside_bbox = (p : Vector2) => { \n        return p.x >= bl.x - tol && p.x <= tr.x + tol && p.y >= bl.y - tol && p.y <= tr.y + tol;\n    }\n    let points = intersections.filter(p => is_inside_bbox(p));\n    if (points.length <= 1) return undefined;\n    return dgline(points[0], points[1]);\n}\n\n// drawing\nfunction normalize_padding(padding : number[] | number) : [number, number, number, number] {\n    let p = (typeof padding === 'number') ? [padding] : padding;\n    switch (p.length) {\n        case 0: return [0, 0, 0, 0];\n        case 1: return [p[0], p[0], p[0], p[0]];\n        case 2: return [p[0], p[1], p[0], p[1]];\n        case 3: return [p[0], p[1], p[2], p[1]];\n        default: return [p[0], p[1], p[2], p[3]];\n    }\n}\n\n/**\n * Get a preview diagram of the context\n * @param ctx the Geo context (a dictionary of GeoObj and Vector2)\n * @param pad padding around the diagram (determine how far away from the defined point the visible diagram is)\n */\nexport function get_preview_diagram(ctx : GeoCtx, pad? : number[] | number) : Diagram {\n    let points : {name : string, p : Vector2}[] = [];\n    let lines : {name : string, obj : GeoLine}[] = [];\n\n    let typelist : {[key in GeoType] : {name: string, obj : GeoObj}[]} = {\n        [GeoType.LINE] : lines\n    }\n\n    let object_names = Object.keys(ctx);\n    for (let name of object_names) {\n        let obj = ctx[name];\n        if (typeof(obj) === 'number'){\n            continue;\n        }\n        else if (obj instanceof Vector2) {\n            points.push({name, p:obj});\n        } else {\n            typelist[obj.type].push({name, obj});\n        }\n    }\n\n    let minx = Math.min(...points.map(p => p.p.x));\n    let maxx = Math.max(...points.map(p => p.p.x));\n    let miny = Math.min(...points.map(p => p.p.y));\n    let maxy = Math.max(...points.map(p => p.p.y));\n\n    if (pad == undefined) pad = Math.max(maxx - minx, maxy - miny) * 0.1;\n    pad = normalize_padding(pad);\n    let bbox = [V2(minx - pad[0], miny - pad[1]), V2(maxx + pad[2], maxy + pad[3])] as [Vector2, Vector2];\n\n    let dg_lines = lines.map(l => line_intersect_bbox(l.obj, bbox)).filter(d => d !== undefined) as Diagram[];\n    let r = Math.max(bbox[1].x - bbox[0].x, bbox[1].y - bbox[0].y) * 0.01 * 2/3;\n    let dg_points = points.map(p => {\n        let c = circle(r).translate(p.p).fill('black');\n        let name = textvar(p.name).translate(p.p.add(V2(r*2, r*2))).move_origin_text('bottom-left');\n        let namebg = name.copy().textfill('white').textstroke('white').textstrokewidth(10).opacity(0.7)\n        return c.combine(namebg, name)\n    });\n    return diagram_combine(...dg_lines, ...dg_points);\n}\n","import { Diagram } from '../diagram.js';\nimport { V2 } from '../vector.js';\nimport { size } from './shapes_geometry.js';\nimport type { TreeNode } from './shapes_tree.js';\n\n// C. Buchheim, M. J Unger, and S. Leipert. Improving Walker's algorithm to run in linear time. In Proc. Graph Drawing (GD), 2002. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.8757\n// article : https://llimllib.github.io/pymag-trees/\nexport class TreeDraw  {\n    diagram: Diagram;\n    size: [number,number];\n    tree: TreeNode;\n    children: TreeDraw[];\n    x : number; \n    y : number;\n    parent: TreeDraw | undefined;\n    thread: TreeDraw | undefined;\n    mod: number;\n    ancestor: TreeDraw;\n    change: number;\n    shift: number;\n    number: number;\n\n    constructor(tree: TreeNode, parent : TreeDraw | undefined, depth : number = 0, number : number = 0) {\n        this.diagram = tree.value;\n        this.size = size(this.diagram);\n        this.x = -1.0;\n        this.y = depth;\n        this.tree = tree;\n        let tree_children = tree.children ?? [];\n        this.children = tree_children.map((child, i) => new TreeDraw(child, this, depth + 1, i));\n        this.parent = parent;\n        this.thread = undefined;\n        this.mod = 0;\n        this.ancestor = this;\n        this.change = 0;\n        this.shift = 0;\n        this.number = number;\n    }\n\n    left() : TreeDraw | undefined {\n        if (this.thread) return this.thread;\n        if (this.children.length > 0) return this.children[0];\n        return undefined;\n    }\n    right() : TreeDraw | undefined{\n        if (this.thread) return this.thread;\n        if (this.children.length > 0) return this.children[this.children.length-1];\n        return undefined;\n    }\n    lsibling() : TreeDraw | undefined {\n        if (!this.parent) return undefined;\n        if (this.number > 0) return this.parent.children[this.number-1];\n        return undefined;\n    }\n}\n\nexport function calculate_tree_buchheim(tree : TreeNode, vertical_dist : number, horizontal_gap : number) : TreeDraw{\n    let treeDraw = new TreeDraw(tree, undefined);\n    let dt = first_walk(treeDraw, horizontal_gap);\n    let min = second_walk(dt, 0, 0, vertical_dist, 0);\n    if (min < 0) third_walk(dt, -min);\n    position_diagram(dt);\n    return dt;\n}\n\nfunction position_diagram(tree : TreeDraw) {\n    tree.diagram = tree.diagram.position(V2(tree.x, tree.y));\n    tree.children.forEach(position_diagram);\n}\n\nfunction third_walk(td : TreeDraw, n : number){\n    td.x += n;\n    td.children.forEach(child => third_walk(child, n));\n}\n\nfunction first_walk(td : TreeDraw, horizontal_gap : number){\n    let self_halfwidth = td.size[0] / 2;\n    if (td.children.length === 0){\n        let lbrother = td.lsibling();\n        if (lbrother) {\n            let lbrother_halfwidth = lbrother.size[0] / 2;\n            let dist = lbrother_halfwidth + self_halfwidth + horizontal_gap;\n            td.x = lbrother.x + dist;\n        } else {\n            td.x = 0\n        }\n    } else {\n        let default_ancestor = td.children[0];\n        td.children.forEach(w => {\n            first_walk(w, horizontal_gap);\n            default_ancestor = apportion(w, default_ancestor, horizontal_gap);\n        });\n        execute_shifts(td);\n        let midpoint = (td.children[0].x + td.children[td.children.length-1].x) / 2;\n        let lbrother = td.lsibling();\n        if (lbrother){\n            let lbrother_halfwidth = lbrother.size[0] / 2;\n            let dist = lbrother_halfwidth + self_halfwidth + horizontal_gap;\n            td.x = lbrother.x + dist;\n            td.mod = td.x - midpoint;\n        } else {\n            td.x = midpoint;\n        }\n    }\n    return td;\n}\n\ntype V = TreeDraw | undefined;\nfunction apportion(v : TreeDraw, default_ancestor : TreeDraw, horizontal_gap : number) {\n    let w = v.lsibling();\n    if (w !== undefined) {\n        let lmost_sibling = (!v.parent || v.number === 0) ? undefined : v.parent.children[0];\n        let vir : V = v;\n        let vor : V = v;\n        let vil : V = w;\n        let vol : V = lmost_sibling ;\n        let sir = v.mod;\n        let sor = v.mod;\n        let sil = vil.mod;\n        let sol = vol!.mod;\n\n        while (vil?.right() !== undefined && vir?.left() !== undefined) {\n            vil = vil.right();\n            vir = vir.left();\n            vol = vol?.left();\n            vor = vor?.right();\n            vor!.ancestor = v;\n            let lhalfwidth = vil!.size[0] / 2;\n            let rhalfwidth = vir!.size[0] / 2;\n            let dist = lhalfwidth + rhalfwidth + horizontal_gap;\n            let shift = (vil!.x + sil) - (vir!.x + sir) + dist;\n            if (shift > 0) {\n                let a = ancestor(vil!, v, default_ancestor);\n                move_subtree(a, v, shift);\n                sir += shift;\n                sor += shift;\n            }\n            sil += vil!.mod;\n            sir += vir!.mod;\n            sol += vol!.mod;\n            sor += vor!.mod;\n        }\n        if (vil!.right() !== undefined && vor!.right() === undefined) {\n            vor!.thread = vil!.right();\n            vor!.mod += sil - sor;\n        } else {\n            if (vir?.left() !== undefined && vol?.left() === undefined) {\n                vol!.thread = vir.left();\n                vol!.mod += sir - sol;\n            }\n            default_ancestor = v;\n        }\n    }\n    return default_ancestor;\n}\n\nfunction move_subtree(wl : TreeDraw, wr : TreeDraw, shift : number){\n    let subtrees = wr.number - wl.number;\n    wr.change -= shift / subtrees;\n    wr.shift += shift;\n    wl.change += shift / subtrees;\n    wr.x += shift;\n    wr.mod += shift;\n}\n\nfunction execute_shifts(td : TreeDraw){\n    let shift = 0;\n    let change = 0;\n    for (let i = td.children.length - 1; i >= 0; i--){\n        let w = td.children[i];\n        w.x += shift;\n        w.mod += shift;\n        change += w.change;\n        shift += w.shift + change;\n    }\n}\n\nfunction ancestor(vil : TreeDraw, v : TreeDraw, default_ancestor : TreeDraw){\n    if (v.parent?.children.includes(vil.ancestor)) return vil.ancestor;\n    return default_ancestor;\n}\n\nfunction second_walk(td : TreeDraw, m : number, depth : number, vertical_dist : number, min? : number){\n    td.x += m;\n    td.y = -depth * vertical_dist;\n\n    // if (min === undefined) min = v.x;\n    min = Math.min(min ?? td.x, td.x);\n\n    td.children.forEach(w => {\n        min = second_walk(w, m + td.mod, depth + 1, vertical_dist, min);\n    });\n    return min;\n}\n","import { Diagram, diagram_combine, line } from '../diagram.js';\nimport { calculate_tree_buchheim, TreeDraw } from './utils_tree.js';\n\n\nexport interface TreeNode {\n    value: Diagram;\n    children?: TreeNode[];\n}\n\n/**\n * Create a tree diagram from a tree node\n * @param node root node of the tree\n * @param vertical_dist vertical distance between nodes\n * @param horizontal_gap horizontal gap between nodes\n * @returns tree diagram\n */\nexport function tree(node : TreeNode, vertical_dist : number, horizontal_gap : number) : Diagram {\n    let treeDraw = calculate_tree_buchheim(node, vertical_dist, horizontal_gap);\n    return diagram_from_treeDraw(treeDraw);\n}\n\n/**\n * Mirror a tree node\n * @param node root node of the tree\n * @returns mirrored tree node\n */\nexport function mirror_treenode(node : TreeNode) : TreeNode {\n    return {value: node.value, children: (node.children ?? []).map(mirror_treenode).reverse()};\n}\n\n/**\n * Helper function to create a diagram from a treeDraw\n * @param node treeDraw node\n * @returns diagram\n */\nfunction diagram_from_treeDraw(node : TreeDraw) : Diagram {\n    let node_dg = node.diagram;\n    let children_dglist = node.children.map(diagram_from_treeDraw);\n    let line_diagrams = node.children.map(child_node => {\n        let start = node_dg.get_anchor('bottom-center');\n        let end = child_node.diagram.get_anchor('top-center');\n        return line(start, end);\n    });\n    return diagram_combine(node_dg, ...line_diagrams, ...children_dglist);\n}\n\n","import { Diagram, curve } from '../diagram.js';\nimport { V2, Vector2 } from '../vector.js';\n\n/**\n* Combine multiple curves into a single curve\n* @param curves an array of curves\n* \\* you can reverse the order of the point in a curve by using the reverse() method\n*/\nexport function curve_combine(...curves : Diagram[]) : Diagram {\n    const points = curves.map(c => c.path?.points ?? []).flat();\n    return curve(points);\n}\n\nexport function bezier_quadratic(p0 : Vector2, p1 : Vector2, p2 : Vector2, n_sample = 100 ) {\n    const dt = 1/(n_sample-1);\n    const points = Array<Vector2>(n_sample);\n    for (let i = 0; i < n_sample; i++) {\n        const t = i*dt;\n        // B(t) = (1-t)^2 * P0 + 2t(1-t)P1 + t^2P2\n        const a = p0.scale((1-t)*(1-t));\n        const b = p1.scale(2*t*(1-t));\n        const c = p2.scale(t*t);\n        points[i] = a.add(b).add(c);\n    }\n    return curve(points);\n}\n\nexport function bezier_cubic(p0 : Vector2, p1 : Vector2, p2 : Vector2, p3 : Vector2, n_sample = 100 ) {\n    const dt = 1/(n_sample-1);\n    const points = Array<Vector2>(n_sample);\n    for (let i = 0; i < n_sample; i++) {\n        const t = i*dt;\n        // B(t) = (1-t)^3 * P0 + 3t(1-t)^2P1 + 3t^2(1-t)P2 + t^3P3\n        const a = p0.scale((1-t)*(1-t)*(1-t));\n        const b = p1.scale(3*t*(1-t)*(1-t));\n        const c = p2.scale(3*t*t*(1-t));\n        const d = p3.scale(t*t*t);\n        points[i] = a.add(b).add(c).add(d);\n    }\n    return curve(points);\n}\n\n// interpolations\n\n/**\n* Create a curve from the cubic spline interpolation of the given points\n* @param points array of points to interpolate\n* @param n number of points to interpolate between each pair of points (default 10)\n*/\nexport function cubic_spline(points : Vector2[], n : number = 10) : Diagram {\n    const interpolated_points = interpolate_cubic_spline(points, n);\n    return curve(interpolated_points);\n}\n\n/**\n * Cubic spline interpolation\n * @param points array of points to interpolate\n * @param n number of points to interpolate between each pair of points (default 10)\n * @returns array of interpolated points\n */\nexport function interpolate_cubic_spline(points: Vector2[], n: number = 10): Vector2[] {\n    const n_points = points.length;\n    let a: number[] = points.map(p => p.y);\n    let b: number[] = new Array(n_points).fill(0);\n    let d: number[] = new Array(n_points).fill(0);\n    let h: number[] = new Array(n_points - 1);\n    for (let i = 0; i < n_points - 1; i++) {\n        h[i] = points[i + 1].x - points[i].x;\n    }\n\n    // Solve tridiagonal system for the c[i] coefficients (second derivatives)\n    let alpha : number[] = new Array(n_points - 1).fill(0);\n    let c     : number[] = new Array(n_points).fill(0);\n    let l     : number[] = new Array(n_points).fill(1);\n    let mu    : number[] = new Array(n_points).fill(0);\n    let z     : number[] = new Array(n_points).fill(0);\n\n    for (let i = 1; i < n_points - 1; i++) {\n        alpha[i] = (3 / h[i]) * (a[i + 1] - a[i]) - (3 / h[i - 1]) * (a[i] - a[i - 1]);\n    }\n\n    for (let i = 1; i < n_points - 1; i++) {\n        l[i] = 2 * (points[i + 1].x - points[i - 1].x) - h[i - 1] * mu[i - 1];\n        mu[i] = h[i] / l[i];\n        z[i] = (alpha[i] - h[i - 1] * z[i - 1]) / l[i];\n    }\n\n    // Back substitution\n    for (let j = n_points - 2; j >= 0; j--) {\n        c[j] = z[j] - mu[j] * c[j + 1];\n        b[j] = (a[j + 1] - a[j]) / h[j] - h[j] * (c[j + 1] + 2 * c[j]) / 3;\n        d[j] = (c[j + 1] - c[j]) / (3 * h[j]);\n    }\n\n    // Now that we have coefficients, we can construct the spline between each pair of points\n    let spline_points: Vector2[] = [];\n    for (let i = 0; i < n_points - 1; i++) {\n        for (let j = 0; j <= n; j++) {\n            let x = points[i].x + j * (points[i + 1].x - points[i].x) / n;\n            let y = a[i] + b[i] * (x - points[i].x) + c[i] * Math.pow(x - points[i].x, 2) + d[i] * Math.pow(x - points[i].x, 3);\n            spline_points.push(V2(x, y));\n        }\n    }\n\n    return spline_points;\n}\n","// Simple encoding/decoding utilities using btoa, atob and encodeURIComponent, decodeURIComponent\n// can be used to store user code and pass it in the URL\n\nexport function encode(s: string): string {\n    return btoa(encodeURIComponent(s));\n}\n\nexport function decode(s: string): string {\n    return decodeURIComponent(atob(s));\n}\n"],"names":["Vector2","constructor","x","y","this","add","v","sub","scale","s","mul","rotate","angle","Math","cos","sin","dot","cross","equals","length","sqrt","length_sq","atan2","normalize","len","copy","apply","f","V2","Vdir","Transform","translate","p","pivot","origin","reflect_over_point","q","PI","reflect_over_line","p1","p2","n","d","skewX","ybase","tan","skewY","xbase","BB_TokenType","TAG","DiagramType","BB_Lexer","parse_tag_content","str","name","substring","type","CLOSE_TAG","attributes","_tag_name","space_id","indexOf","equal_id","OPEN_TAG","value","Error","parse","text","tokens","pos","TagLeft","push","TEXT","_text","TagRight","nextTagLeft","tag_content","BB_multiline","from_BBCode","linespace","tspans","tag_stack","token","style","dy","console","error","pop","build_style","tag","DEFAULT_FONTSIZE","Diagram","type_","args","children","path","undefined","textdata","multilinedata","imgdata","mutable","tags","mut","i","mut_parent_only","immut","newd","deep_setPrototypeOf","obj","Object","setPrototypeOf","prototype","objd","c","Path","JSON","stringify","copy_if_not_mutable","append_tags","Array","isArray","includes","remove_tags","filter","t","reset_tags","contain_tag","contain_all_tags","collect_children","concat","flatten","func","apply_recursive","apply_to_tagged_recursive","combine","diagrams","diagram_combine","to_curve","Polygon","Curve","to_polygon","add_points","points","last_child","update_style","stylename","stylevalue","excludedType","Text","Image","MultilineText","clone_style_from","diagram","assign","fill","color","stroke","opacity","toString","strokewidth","width","strokelinecap","linecap","strokelinejoin","linejoin","strokedasharray","dasharray","join","vectoreffect","textfill","textstroke","textstrokewidth","update_textdata","textdataname","textdatavalue","fontfamily","fontstyle","fontsize","fontweight","fontscale","textanchor","textdy","textangle","text_tovar","TEXTVAR","text_totext","bounding_box","minx","Infinity","miny","maxx","maxy","child","min","max","point","transform","transform_function","position","dv","scaletext","parseFloat","base","reflect","vflip","a","hflip","get_anchor","anchor","midx","midy","move_origin","__move_origin_text","anchor_to_textdata","move_origin_text","path_length","reverse_path","_a","reverse","parametric_point","segment_index","cumuative_length","total_length","cumulative_t","map","l","child_id","prev_t","segment_t","debug_bbox","rect_bbox","polygon","origin_x","debug","show_index","style_path","style_index","bg","dd","empty","f_obj","curve","deb_bbox","deb_object","prev_point","point_texts","minimum_dist_tolerance","newpoints","newp","closed","extended_points","cumulative_length","segment_id","start","dir","newdiagrams","all_children_mutable","line","end","LINE","condition","message","assert","image","src","height","multiline","spans","content","multiline_bb","bbstr","to_radian","to_degree","array_repeat","arr","new_arr","linspace","result","step","linspace_exc","range","floor","range_inc","transpose","j","expand_directional_value","padding","tab_color","blue","lightblue","orange","lightorange","green","lightgreen","red","lightred","purple","lightpurple","brown","lightbrown","pink","lightpink","grey","lightgrey","gray","lightgray","olive","lightolive","cyan","lightcyan","get_color","colorname","palette","unicode_mathematical_italic","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","b","e","g","h","k","m","o","r","u","w","z","fromEntries","entries","latex_greek","latex_symbols","textfractionsolidus","leftrightsquigarrow","textpertenthousand","blacktriangleright","blacktriangledown","blacktriangleleft","twoheadrightarrow","leftrightharpoons","rightleftharpoons","textreferencemark","circlearrowright","rightrightarrows","vartriangleright","textordmasculine","textvisiblespace","twoheadleftarrow","downharpoonright","ntrianglerighteq","rightharpoondown","textperthousand","leftrightarrows","textmusicalnote","nleftrightarrow","rightleftarrows","bigtriangledown","textordfeminine","ntrianglelefteq","rightthreetimes","trianglerighteq","vartriangleleft","rightsquigarrow","downharpoonleft","curvearrowright","circlearrowleft","leftharpoondown","nLeftrightarrow","curvearrowleft","guilsinglright","leftthreetimes","leftrightarrow","rightharpoonup","guillemotright","downdownarrows","hookrightarrow","dashrightarrow","leftleftarrows","trianglelefteq","ntriangleright","doublebarwedge","upharpoonright","rightarrowtail","looparrowright","Leftrightarrow","sphericalangle","divideontimes","measuredangle","blacktriangle","ntriangleleft","mathchar1356","texttrademark","mathchar2208","triangleright","leftarrowtail","guilsinglleft","upharpoonleft","fallingdotseq","looparrowleft","textbrokenbar","hookleftarrow","smallsetminus","dashleftarrow","guillemotleft","leftharpoonup","bigtriangleup","textcircledP","risingdotseq","triangleleft","mathsterling","textcurrency","triangledown","blacklozenge","preccurlyeq","Rrightarrow","circledcirc","nRightarrow","vartriangle","Updownarrow","nrightarrow","succcurlyeq","diamondsuit","curlyeqsucc","blacksquare","curlyeqprec","updownarrow","backepsilon","circleddash","eqslantless","nsupseteqq","textrecipe","nsubseteqq","subsetneqq","upuparrows","nleftarrow","eqslantgtr","curlywedge","varepsilon","supsetneqq","rightarrow","sqsubseteq","sqsupseteq","complement","Rightarrow","gtreqqless","lesseqqgtr","circledast","nLeftarrow","Lleftarrow","varnothing","Leftarrow","gvertneqq","supsetneq","leftarrow","nleqslant","llbracket","spadesuit","rrbracket","supseteqq","copyright","gtreqless","pitchfork","estimated","ngeqslant","therefore","triangleq","varpropto","subsetneq","heartsuit","lvertneqq","checkmark","nparallel","lesseqgtr","downarrow","backsimeq","Downarrow","subseteqq","setminus","succnsim","doteqdot","clubsuit","emptyset","sqsupset","curlyvee","varkappa","llcorner","varsigma","approxeq","backcong","supseteq","circledS","circledR","textcent","urcorner","lrcorner","boxminus","texteuro","vartheta","barwedge","sqsubset","subseteq","intercal","ulcorner","recorder","precnsim","parallel","boxtimes","multimap","maltese","nearrow","swarrow","lozenge","succsim","dotplus","lessgtr","Upsilon","Cdprime","gtrless","backsim","nexists","searrow","lessdot","boxplus","upsilon","epsilon","diamond","bigstar","ddagger","cdprime","Uparrow","between","sqangle","digamma","uparrow","nwarrow","precsim","because","bigcirc","lesssim","partial","natural","supset","hstrok","Tstrok","coprod","models","otimes","degree","gtrdot","preceq","Lambda","lambda","cprime","varrho","Bumpeq","hybull","lmidot","nvdash","lbrace","bullet","varphi","bumpeq","Lmidot","Cprime","female","rtimes","gtrsim","mapsto","daleth","square","nVDash","rangle","tstrok","oslash","ltimes","lfloor","marker","Subset","Vvdash","propto","Hstrok","dlcrop","forall","nVdash","Supset","langle","ominus","rfloor","circeq","eqcirc","drcrop","veebar","ulcrop","nvDash","urcrop","exists","approx","dagger","boxdot","succeq","bowtie","subset","notin","Sigma","Omega","nabla","colon","boxHu","boxHd","aleph","gnsim","boxHU","boxHD","equiv","lneqq","alpha","amalg","boxhU","boxhD","uplus","boxhu","kappa","sigma","boxDL","Theta","Vdash","boxDR","boxDl","sqcap","boxDr","dashv","vDash","boxdl","boxVl","boxVh","boxVr","boxdr","boxdL","boxVL","boxVH","boxVR","boxdR","theta","lhblk","uhblk","ldotp","ldots","boxvL","boxvH","boxvR","boxvl","boxvh","boxvr","Delta","boxUR","boxUL","oplus","boxUr","boxUl","doteq","happy","varpi","smile","boxul","simeq","boxuR","boxuL","boxhd","gimel","Gamma","lnsim","sqcup","omega","sharp","times","block","wedge","vdash","infty","gamma","asymp","rceil","lceil","delta","gneqq","frown","phone","vdots","boxr","perp","surd","vert","prec","mldr","cong","star","geqq","cdot","cdots","Vert","lnot","leqq","beta","beth","prod","circ","flat","oint","odot","nldr","nmid","zeta","iota","gneq","boxH","hbar","boxv","boxh","male","succ","lneq","boxV","leq","Cup","Psi","neq","cup","geq","mho","Dzh","cap","bot","psi","chi","Phi","ast","ell","top","lll","tau","Cap","sad","iff","eta","eth","rho","dzh","div","phi","Rsh","vee","int","sim","Lsh","yen","ggg","mid","sum","neg","Dz","Re","oe","DH","ll","ng","wr","wp","AE","AA","ss","dz","ae","aa","th","to","Pi","mp","Im","pm","pi","in","ni","ne","TH","Xi","nu","NG","xi","OE","gg","DJ","mu","dj","str_latex_to_unicode","key","replaceAll","str_to_mathematical_italic","default_diagram_style","_init_default_diagram_style","default_text_diagram_style","_init_default_text_diagram_style","default_textdata","_init_default_textdata","reset_default_styles","_IMAGE_DATAURL_CACHE_MAP","Map","draw_image","svgelement","embed_image","svgtag","document","createElementNS","setAttribute","ex","ey","xpos","ypos","img","test","has","dataURL","get","canvas","createElement","ctx","getContext","base_image","crossOrigin","onload","drawImage","toDataURL","set","remove","set_image_href_dataURL","appendChild","collect_text","calculate_text_scale","referencesvgelement","pad","bbox","getBBox","refsvgelement_width","baseVal","refsvgelement_height","get_tagged_svg_element","SVGElement","getAttribute","f_draw_to_svg","render_text","text_scaling_factor","createSVGPoint","appendItem","draw_polygon","polyline","draw_curve","warn","text_diagrams","multiline_diagrams","calculated_scale","angle_deg","font_size","text_content","is_texstr","innerHTML","draw_texts","textsvg","diagram_font_size","dg_scale_factor","_b","is_firstline","is_in_front","newline_dy","tspandata","_c","tspan","not_setting_dy","tspanstyle","dx","textdata_dy","_d","whiteSpace","draw_multiline_texts","draw_to_svg","outer_svgelement","set_html_attribute","clear_svg","draw_to_svg_element","options","SVGSVGElement","text_scaling_reference_svg","text_scaling_reference_padding","_f","_e","pad_px","_g","svg_width","svg_height","overflow","background_color","viewBox","rect","insertBefore","firstChild","startsWith","endsWith","is_texdisplaystr","handle_tex_in_svg","svg","texhandler","SVGTextElement","fontsizestr","svgstr","display","xstr","ystr","outerHTML","widthexstr","widthex","heightexstr","magic_number","xval","yval","download_svg_as_svg","inner_svgelement","querySelector","locator_svgelement","copy_inner_svgelement","cloneNode","svg_string","XMLSerializer","serializeToString","blob","Blob","url","URL","createObjectURL","href","download","click","download_svg_as_png","svgelem","svg_blob","DOMURL","window","webkitURL","revokeObjectURL","imgURI","replace","rectangle","rectangle_corner","bottomleft","topright","side","regular_polygon","radius","regular_polygon_side","sidelength","circle","CIRCLE","arc","arrow","headsize","ARROW_LINE","ARROW_HEAD","arrow1","arrow2","line_diagram","direction","raw_triangle","textvar","circle_radius","center","p0","line_points","size","bb","d0_2","r_2","v0","sLeft","vLeft","sRight","vRight","len1","len2","p0_new","p1_new","newl","l1","l2","a1","b1","a2","b2","x1","y1","x2","y2","x3","y3","x4","y4","yi","align_vertical","alignment","top_y","center_y","bottom_y","align_horizontal","left_x","center_x","right_x","distribute_horizontal","space","distributed_diagrams","prev_diagram","this_diagram","distribute_vertical","distribute_horizontal_and_align","horizontal_space","distribute_vertical_and_align","vertical_space","distribute_grid_row","column_count","vectical_space","row_count","ceil","rows","slice","row","grid_diagrams","distribute_variable_row","container_width","vertical_alignment","horizontal_alignment","current_row","current_row_w","add_diagrams_to_rows","distributed_row_dg","row_diagrams","defaultFormat_f","val","val_str","toFixed","format_number","control_svg_name","dnd_type","Interactive","control_container_div","diagram_outer_svg","inp_object_","inp_variables","inp_setter","display_mode","diagram_svg","locator_svg","dnd_svg","custom_svg","button_svg","locatorHandler","dragAndDropHandler","buttonHandler","draw_function","_","display_precision","intervals","registeredEventListenerRemoveFunctions","draw","setViewBox","set_viewbox","variable_name","label","display_format_func","labeldiv","classList","container","locator_draw","locator_initial_draw","drag_and_drop_initial_draw","dnd_initial_draw","drawSvg","registerEventListener","element","callback","addEventListener","removeEventListener","removeRegisteredEventListener","forEach","get_svg_element","metaname","svg_element","dnd","get_diagram_svg","locator","track_diagram","blink","control_svg","LocatorHandler","evt","drag","endDrag","redraw","registerCallback","setter","create_locator_circle_pointer_svg","blinking_outers","getElementsByClassName","addBlinkingCircleOuter","startDrag","track","coord","closest_point_from_points","setAttributeNS","registerSetter","locator_custom","create_locator_diagram_svg","slider","time","oninput","create_slider","interval_time","playbutton","symboldiv","onclick","setInterval","clearInterval","leftcontainer","rightcontainer","init_drag_and_drop","DragAndDropHandler","dnd_container","capacity","config","add_container","dnd_draggable_to_container","container_name","add_draggable_to_container","dnd_draggable","container_diagram","add_draggable_with_container","dnd_register_drop_outside_callback","register_dropped_outside_callback","dnd_move_to_container","try_move_draggable_to_container","get_dnd_data","getData","set_dnd_data","data","setData","get_dnd_container_content_size","get_container_content_size","NaN","set_dnd_content_sort","sort_content","remove_dnd_draggable","remove_draggable","custom_object","id","classlist","custom","init_button","button","ButtonHandler","button_toggle","diagram_on","diagram_off","state","main_callback","try_add_toggle","button_click","diagram_pressed","try_add_click","taget","source","closest_d2","closest_p","d2","clientPos_to_svgPos","clientPos","CTM","navigator","userAgent","toLowerCase","ctm","getScreenCTM","screenWidth","screenHeight","scalex","scaley","translateX","translateY","DOMMatrix","fromMatrix","firefox_calcCTM","getMousePosition","TouchEvent","touches","clientX","clientY","get_SVGPos_from_event","selectedElement","selectedVariable","callbacks","blinking_circle_outers","first_touch_callback","handleBlinking","MouseEvent","preventDefault","circle_outer","cursor","circle_inner","inner_radius","containers","draggables","hoveredContainerName","draggedElementName","draggedElementGhost","dropped_outside_callback","dom_to_id_map","WeakMap","position_config","replace_container_svg","generate_position_map","p_center","x0","y0","nx","ny","sizelist","diagram_size","distributed","content_diagrams","replace_draggable_svg","draggable","add_draggable_svg","reposition_container_content","add_container_svg","move_draggable_to_container","initial_container_name","diagram_container_from_draggable","containerdata","prepend","onmousedown","ontouchstart","append","sort","position_map","remove_draggable_from_container","draggable_name","original_container_name","draggedElement","other_draggable_name","reset_hovered_class","ghosts","ghost","pointerEvents","get_dnd_element_data_from_evt","evt_touch","elementFromPoint","evt_","localName","parentElement","dg_tag","parent","element_data","_evt","reset_picked_class","states","touchdownName","old_svg_on","old_svg_off","add_toggle","svg_off","svg_on","set_display","update_state","ontouchend","old_svg_normal","old_svg_pressed","add_click","svg_normal","svg_pressed","pressed","onmouseup","onmouseleave","function_handle_path_type","modified_func","resample","new_points","get_round_corner_arc_points","count","p3","v1","v3","corner_angle","abs","s_dist","d1","d3","pa","pb","distc","pc","angle_a","angle_b","angle_b_plus","angle_b_minus","angle_a_b","flip","new_arrowhead","arrowhead","v_tip","v_base1","v_base2","v_base","arrowhead_angle","point_indices","diagram_point_indices","curr_i","prev_i","next_i","prev_p","curr_p","next_p","arc_points","t_start","t_end","n_total","dnew","xs","ys","subdivide_points","default_axes_options","xrange","yrange","xticks","yticks","n_sample","ticksize","tick_label_offset","axes_transform","axes_options","opt","xmin","xmax","ymin","ymax","lowerleft","upperright","ax","axes_empty","xorigin","yorigin","GRAPH_AXIS","axes_corner_empty","axes_corner_empty_xbreak","xbreak_ysize_","get_tick_numbers","xbreak_xsize","xbreak_xpos","trans_f","xbreak_pleft_","xbreak_pright_","xbreak_xsize_","xbreak_pbottom_","xbreak_ptop_","xbreak_curve","xaxis","xtickmark_empty","GRAPH_TICK","xtickmark","tick","GRAPH_TICK_LABEL","ytickmark_empty","ytickmark","get_tick_interval","range_order","log10","interval_to_try","pow","tick_counts","exclude_zero","nozero","magnitude","interval","new_min","new_max","interval_prec","get_tick_numbers_aroundzero","round","get_tick_numbers_range","xycorneraxes","xyaxes","ax_origin","yaxis","ygrid","GRAPH_GRID","xgrid","xygrid","plotv","segments","current_segment","path_diagrams","segment","plot","xdata","ydata","plotf","under_curvef","x_start","x_end","new_opt","text_offset","va","vb","angle_arc","gap","n_angle","p_mid","marks","offset","tablength","textoffset","tabsymmetric","pA","pB","tabA","tabB","lines","pmid","arrow_angle","p1_","p3_","arrow_head_size","vec","coil_number","separation_coefficient","sample_number","default_bar_options","to_ax_options","datavalues","baropt","bar_options","ax_f","Number","datanames","ax_opt","TableOrientation","arrowsize","number_offset","d_ticks","num","txt","fixed_size","rowsizes","colsizes","orientation","ROWS","diagram_rows","col_count","table","empty_fixed_size","get_points","diagram_grid","TABLE_CONTENT","ROW_","COL_","diagram_grid_combined","CONTAIN_TABLE","y_top","y_bot","x_left","cols","x_right","x_mid","y_mid","TABLE_CELL","TABLE","table_diagram","table_diagram_","cell","style_cell","styles","table_index","findIndex","new_table","index","min_rowsize","min_colsize","f_size","ticks","GeoType","quartiles","Q0","Q1","Q2","Q3","Q4","whisker_size","line_intersection","line_from_points","line_intersect_bbox","bottom_left","top_right","bl","tr","tl","br","intersections","tol","is_inside_bbox","dgline","typelist","object_names","keys","normalize_padding","dg_lines","namebg","o1","o2","slope","TreeDraw","tree","depth","number","tree_children","thread","mod","ancestor","change","shift","left","right","lsibling","calculate_tree_buchheim","vertical_dist","horizontal_gap","dt","first_walk","second_walk","third_walk","position_diagram","td","self_halfwidth","lbrother","dist","default_ancestor","vir","vor","vil","vol","sir","sor","sil","sol","move_subtree","apportion","execute_shifts","midpoint","wl","subtrees","diagram_from_treeDraw","node","node_dg","children_dglist","line_diagrams","child_node","mirror_treenode","interpolate_cubic_spline","n_points","spline_points","curves","decodeURIComponent","atob","btoa","encodeURIComponent"],"mappings":"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XC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACV,QAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACV,QAAU,IACVC,MAAU,IACVC,MAAU,IACVhrB,MAAU,IACVirB,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACV,QAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,KAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAU,IACV,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACTC,MAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACTC,KAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAU,IACVC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAU,IACV,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACTC,KAAS,IACT,OAAU,IACVC,KAAS,IACTC,KAAS,IACTC,KAAS,IA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"}